type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'v
  (HasType (Prim 'vector (list (Int 1) (Int 2))) '(Vector Integer Integer))
  (Int 42)))


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v
  (HasType (Prim 'vector (list (Int 1) (Int 2))) '(Vector Integer Integer))
  (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v
  (HasType (Prim 'vector (list (Int 1) (Int 2))) '(Vector Integer Integer))
  (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6883
  (HasType (Prim 'vector (list (Int 1) (Int 2))) '(Vector Integer Integer))
  (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6883
  (HasType (Prim 'vector (list (Int 1) (Int 2))) '(Vector Integer Integer))
  (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6883
  (Let
   'vecinit6885
   (Int 1)
   (Let
    'vecinit6886
    (Int 2)
    (Let
     '_6889
     (If
      (Prim
       '<
       (list
        (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
        (GlobalValue 'fromspace_end)))
      (Void)
      (collect 24))
     (Let
      'alloc6884
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6888
       (Prim 'vector-set! (list (Var 'alloc6884) (Int 0) (Var 'vecinit6885)))
       (Let
        '_6887
        (Prim 'vector-set! (list (Var 'alloc6884) (Int 1) (Var 'vecinit6886)))
        (Var 'alloc6884)))))))
  (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6883
  (Let
   'vecinit6885
   (Int 1)
   (Let
    'vecinit6886
    (Int 2)
    (Let
     '_6889
     (If
      (Prim
       '<
       (list
        (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
        (GlobalValue 'fromspace_end)))
      (Void)
      (collect 24))
     (Let
      'alloc6884
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6888
       (Prim 'vector-set! (list (Var 'alloc6884) (Int 0) (Var 'vecinit6885)))
       (Let
        '_6887
        (Prim 'vector-set! (list (Var 'alloc6884) (Int 1) (Var 'vecinit6886)))
        (Var 'alloc6884)))))))
  (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6883
  (Let
   'vecinit6885
   (Int 1)
   (Let
    'vecinit6886
    (Int 2)
    (Let
     '_6889
     (If
      (Let
       'tmp6890
       (Let
        'tmp6891
        (GlobalValue 'free_ptr)
        (Prim '+ (list (Var 'tmp6891) (Int 24))))
       (Let
        'tmp6892
        (GlobalValue 'fromspace_end)
        (Prim '< (list (Var 'tmp6890) (Var 'tmp6892)))))
      (Void)
      (collect 24))
     (Let
      'alloc6884
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6888
       (Prim 'vector-set! (list (Var 'alloc6884) (Int 0) (Var 'vecinit6885)))
       (Let
        '_6887
        (Prim 'vector-set! (list (Var 'alloc6884) (Int 1) (Var 'vecinit6886)))
        (Var 'alloc6884)))))))
  (Int 42)))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6883
  (Let
   'vecinit6885
   (Int 1)
   (Let
    'vecinit6886
    (Int 2)
    (Let
     '_6889
     (If
      (Let
       'tmp6890
       (Let
        'tmp6891
        (GlobalValue 'free_ptr)
        (Prim '+ (list (Var 'tmp6891) (Int 24))))
       (Let
        'tmp6892
        (GlobalValue 'fromspace_end)
        (Prim '< (list (Var 'tmp6890) (Var 'tmp6892)))))
      (Void)
      (collect 24))
     (Let
      'alloc6884
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6888
       (Prim 'vector-set! (list (Var 'alloc6884) (Int 0) (Var 'vecinit6885)))
       (Let
        '_6887
        (Prim 'vector-set! (list (Var 'alloc6884) (Int 1) (Var 'vecinit6886)))
        (Var 'alloc6884)))))))
  (Int 42)))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6885) (Int 1))
    (Seq
     (Assign (Var 'vecinit6886) (Int 2))
     (Seq
      (Assign (Var 'tmp6891) (GlobalValue 'free_ptr))
      (Seq
       (Assign (Var 'tmp6890) (Prim '+ (list (Var 'tmp6891) (Int 24))))
       (Seq
        (Assign (Var 'tmp6892) (GlobalValue 'fromspace_end))
        (IfStmt
         (Prim '< (list (Var 'tmp6890) (Var 'tmp6892)))
         (Goto 'block6894)
         (Goto 'block6895))))))))
  (cons 'block6895 (Seq (collect 24) (Goto 'block6893)))
  (cons 'block6894 (Seq (Assign (Var '_6889) (Void)) (Goto 'block6893)))
  (cons
   'block6893
   (Seq
    (Assign (Var 'alloc6884) (allocate 2 (Vector Integer Integer)))
    (Seq
     (Assign
      (Var '_6888)
      (Prim 'vector-set! (list (Var 'alloc6884) (Int 0) (Var 'vecinit6885))))
     (Seq
      (Assign
       (Var '_6887)
       (Prim 'vector-set! (list (Var 'alloc6884) (Int 1) (Var 'vecinit6886))))
      (Seq (Assign (Var 'v6883) (Var 'alloc6884)) (Return (Int 42)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6885) (Int 1))
    (Seq
     (Assign (Var 'vecinit6886) (Int 2))
     (Seq
      (Assign (Var 'tmp6891) (GlobalValue 'free_ptr))
      (Seq
       (Assign (Var 'tmp6890) (Prim '+ (list (Var 'tmp6891) (Int 24))))
       (Seq
        (Assign (Var 'tmp6892) (GlobalValue 'fromspace_end))
        (IfStmt
         (Prim '< (list (Var 'tmp6890) (Var 'tmp6892)))
         (Goto 'block6894)
         (Goto 'block6895))))))))
  (cons 'block6895 (Seq (collect 24) (Goto 'block6893)))
  (cons 'block6894 (Seq (Assign (Var '_6889) (Void)) (Goto 'block6893)))
  (cons
   'block6893
   (Seq
    (Assign (Var 'alloc6884) (allocate 2 (Vector Integer Integer)))
    (Seq
     (Assign
      (Var '_6888)
      (Prim 'vector-set! (list (Var 'alloc6884) (Int 0) (Var 'vecinit6885))))
     (Seq
      (Assign
       (Var '_6887)
       (Prim 'vector-set! (list (Var 'alloc6884) (Int 1) (Var 'vecinit6886))))
      (Seq (Assign (Var 'v6883) (Var 'alloc6884)) (Return (Int 42)))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6885)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6886)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6891)))
     (Instr 'movq (list (Var 'tmp6891) (Var 'tmp6890)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6890)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6892)))
     (Instr 'cmpq (list (Var 'tmp6892) (Var 'tmp6890)))
     (JmpIf 'l 'block6894)
     (Jmp 'block6895))))
  (cons
   'block6895
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6893))))
  (cons
   'block6894
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6889))) (Jmp 'block6893))))
  (cons
   'block6893
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6884)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6885) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6888)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6886) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6887)))
     (Instr 'movq (list (Var 'alloc6884) (Var 'v6883)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6885)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6886)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6891)))
     (Instr 'movq (list (Var 'tmp6891) (Var 'tmp6890)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6890)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6892)))
     (Instr 'cmpq (list (Var 'tmp6892) (Var 'tmp6890)))
     (JmpIf 'l 'block6894)
     (Jmp 'block6895))))
  (cons
   'block6895
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6893))))
  (cons
   'block6894
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6889))) (Jmp 'block6893))))
  (cons
   'block6893
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6884)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6885) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6888)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6886) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6887)))
     (Instr 'movq (list (Var 'alloc6884) (Var 'v6883)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void)))
 (list
  (cons
   'block6893
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r11) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6884)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6885) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6888)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6886) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6887)))
     (Instr 'movq (list (Var 'alloc6884) (Var 'v6883)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6894
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list (Instr 'movq (list (Imm 0) (Var '_6889))) (Jmp 'block6893))))
  (cons
   'block6895
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Reg 'rsi) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6893))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Reg 'r15))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'tmp6891) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set
       (Var 'tmp6890)
       (Var 'vecinit6885)
       (Var 'tmp6892)
       (Reg 'r15)
       (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6885)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6886)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6891)))
     (Instr 'movq (list (Var 'tmp6891) (Var 'tmp6890)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6890)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6892)))
     (Instr 'cmpq (list (Var 'tmp6892) (Var 'tmp6890)))
     (JmpIf 'l 'block6894)
     (Jmp 'block6895))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void)))
 (list
  (cons
   'block6893
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r11) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6884)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6885) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6888)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6886) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6887)))
     (Instr 'movq (list (Var 'alloc6884) (Var 'v6883)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6894
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list (Instr 'movq (list (Imm 0) (Var '_6889))) (Jmp 'block6893))))
  (cons
   'block6895
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Reg 'rsi) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6893))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Reg 'r15))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'tmp6891) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set
       (Var 'tmp6890)
       (Var 'vecinit6885)
       (Var 'tmp6892)
       (Reg 'r15)
       (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6885)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6886)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6891)))
     (Instr 'movq (list (Var 'tmp6891) (Var 'tmp6890)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6890)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6892)))
     (Instr 'cmpq (list (Var 'tmp6892) (Var 'tmp6890)))
     (JmpIf 'l 'block6894)
     (Jmp 'block6895))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2027

1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886>>
1 instruction: #<Instr: addq (#<Imm: 24> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Imm: 5> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: r11> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6884>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886> #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Var: alloc6884> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886> #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Var: vecinit6885> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: vecinit6886> #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6888>)>
2 live-set: #<set: #<Var: vecinit6886> #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Var: alloc6884> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6886> #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Var: vecinit6886> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6887>)>
2 live-set: #<set: #<Var: alloc6884>>
1 instruction: #<Instr: movq (#<Var: alloc6884> #<Var: v6883>)>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Imm: 42> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6889>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886>>
1 instruction: #<Jmp: block6893>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 24> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: rsi> #<Var: vecinit6886> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886>>
1 instruction: #<Jmp: block6893>
2 live-set: #<set: #<Var: vecinit6885> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit6885>)>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 2> #<Var: vecinit6886>)>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6891>)>
2 live-set: #<set: #<Var: vecinit6885> #<Var: tmp6891> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Var: tmp6891> #<Var: tmp6890>)>
2 live-set: #<set: #<Var: tmp6890> #<Var: vecinit6885> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<Instr: addq (#<Imm: 24> #<Var: tmp6890>)>
2 live-set: #<set: #<Var: tmp6890> #<Var: vecinit6885> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6892>)>
2 live-set: #<set: #<Var: tmp6890> #<Var: vecinit6885> #<Var: tmp6892> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<Instr: cmpq (#<Var: tmp6892> #<Var: tmp6890>)>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<JmpIf: l block6894>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: r15> #<Var: vecinit6886>>
1 instruction: #<Jmp: block6895>
2 live-set: #<set: #<Var: vecinit6885> #<Reg: r15> #<Var: vecinit6886>>
#<Reg: rsi> -> #<Var: vecinit6885>;
#<Reg: rsi> -> #<Var: vecinit6886>;
#<Reg: rsi> -> #<Reg: rdi>;
#<Reg: rcx> -> #<Var: vecinit6885>;
#<Reg: rcx> -> #<Var: vecinit6886>;
#<Var: tmp6890> -> #<Var: vecinit6885>;
#<Var: tmp6890> -> #<Var: tmp6892>;
#<Var: tmp6890> -> #<Reg: r15>;
#<Var: tmp6890> -> #<Var: vecinit6886>;
#<Reg: r11> -> #<Var: vecinit6885>;
#<Reg: r11> -> #<Var: vecinit6886>;
#<Reg: r11> -> #<Var: alloc6884>;
#<Var: _6889> -> #<Var: vecinit6885>;
#<Var: _6889> -> #<Var: vecinit6886>;
#<Reg: r15> -> #<Var: tmp6890>;
#<Reg: r15> -> #<Var: vecinit6885>;
#<Reg: r15> -> #<Var: tmp6891>;
#<Reg: r15> -> #<Var: tmp6892>;
#<Reg: r15> -> #<Var: vecinit6886>;
#<Var: _6888> -> #<Var: vecinit6886>;
#<Var: _6888> -> #<Var: alloc6884>;
#<Var: tmp6892> -> #<Var: tmp6890>;
#<Var: tmp6892> -> #<Var: vecinit6885>;
#<Var: tmp6892> -> #<Reg: r15>;
#<Var: tmp6892> -> #<Var: vecinit6886>;
#<Var: vecinit6886> -> #<Var: tmp6890>;
#<Var: vecinit6886> -> #<Var: vecinit6885>;
#<Var: vecinit6886> -> #<Reg: rcx>;
#<Var: vecinit6886> -> #<Reg: rsi>;
#<Var: vecinit6886> -> #<Reg: rdx>;
#<Var: vecinit6886> -> #<Var: tmp6891>;
#<Var: vecinit6886> -> #<Var: tmp6892>;
#<Var: vecinit6886> -> #<Reg: r8>;
#<Var: vecinit6886> -> #<Reg: r15>;
#<Var: vecinit6886> -> #<Reg: r9>;
#<Var: vecinit6886> -> #<Reg: r11>;
#<Var: vecinit6886> -> #<Var: _6889>;
#<Var: vecinit6886> -> #<Var: alloc6884>;
#<Var: vecinit6886> -> #<Reg: rax>;
#<Var: vecinit6886> -> #<Var: _6888>;
#<Var: vecinit6886> -> #<Reg: rdi>;
#<Var: vecinit6886> -> #<Reg: r10>;
#<Reg: rax> -> #<Var: vecinit6885>;
#<Reg: rax> -> #<Var: vecinit6886>;
#<Reg: r8> -> #<Var: vecinit6885>;
#<Reg: r8> -> #<Var: vecinit6886>;
#<Reg: r10> -> #<Var: vecinit6885>;
#<Reg: r10> -> #<Var: vecinit6886>;
#<Var: _6887> -> #<Var: alloc6884>;
#<Var: vecinit6885> -> #<Var: tmp6890>;
#<Var: vecinit6885> -> #<Reg: rcx>;
#<Var: vecinit6885> -> #<Reg: rsi>;
#<Var: vecinit6885> -> #<Reg: rdx>;
#<Var: vecinit6885> -> #<Var: tmp6891>;
#<Var: vecinit6885> -> #<Var: tmp6892>;
#<Var: vecinit6885> -> #<Reg: r8>;
#<Var: vecinit6885> -> #<Reg: r15>;
#<Var: vecinit6885> -> #<Reg: r9>;
#<Var: vecinit6885> -> #<Reg: r11>;
#<Var: vecinit6885> -> #<Var: vecinit6886>;
#<Var: vecinit6885> -> #<Var: _6889>;
#<Var: vecinit6885> -> #<Var: alloc6884>;
#<Var: vecinit6885> -> #<Reg: rax>;
#<Var: vecinit6885> -> #<Reg: rdi>;
#<Var: vecinit6885> -> #<Reg: r10>;
#<Reg: rdx> -> #<Var: vecinit6885>;
#<Reg: rdx> -> #<Var: vecinit6886>;
#<Var: alloc6884> -> #<Var: vecinit6885>;
#<Var: alloc6884> -> #<Var: _6887>;
#<Var: alloc6884> -> #<Reg: r11>;
#<Var: alloc6884> -> #<Var: vecinit6886>;
#<Var: alloc6884> -> #<Var: _6888>;
#<Reg: rdi> -> #<Var: vecinit6885>;
#<Reg: rdi> -> #<Reg: rsi>;
#<Reg: rdi> -> #<Var: vecinit6886>;
#<Reg: r9> -> #<Var: vecinit6885>;
#<Reg: r9> -> #<Var: vecinit6886>;
#<Var: tmp6891> -> #<Var: vecinit6885>;
#<Var: tmp6891> -> #<Reg: r15>;
#<Var: tmp6891> -> #<Var: vecinit6886>;
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6893
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r11) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6884)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6885) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6888)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6886) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6887)))
     (Instr 'movq (list (Var 'alloc6884) (Var 'v6883)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6894
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list (Instr 'movq (list (Imm 0) (Var '_6889))) (Jmp 'block6893))))
  (cons
   'block6895
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Reg 'rsi) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6893))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Reg 'r15))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'tmp6891) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set
       (Var 'tmp6890)
       (Var 'vecinit6885)
       (Var 'tmp6892)
       (Reg 'r15)
       (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6885)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6886)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6891)))
     (Instr 'movq (list (Var 'tmp6891) (Var 'tmp6890)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6890)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6892)))
     (Instr 'cmpq (list (Var 'tmp6892) (Var 'tmp6890)))
     (JmpIf 'l 'block6894)
     (Jmp 'block6895))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6887 . Void)
    (tmp6892 . Integer)
    (alloc6884 Vector Integer Integer)
    (tmp6891 . Integer)
    (_6889 . Void)
    (vecinit6885 . Integer)
    (vecinit6886 . Integer)
    (v6883 Vector Integer Integer)
    (tmp6890 . Integer)
    (_6888 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6893
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r11) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'vecinit6886) (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set (Var 'alloc6884))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6884)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6885) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6888)))
     (Instr 'movq (list (Var 'alloc6884) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6886) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6887)))
     (Instr 'movq (list (Var 'alloc6884) (Var 'v6883)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6894
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list (Instr 'movq (list (Imm 0) (Var '_6889))) (Jmp 'block6893))))
  (cons
   'block6895
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Reg 'rsi) (Var 'vecinit6886) (Reg 'rdi))
      (set (Var 'vecinit6885) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6893))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6885) (Reg 'r15))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Var 'tmp6891) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'tmp6890) (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set
       (Var 'tmp6890)
       (Var 'vecinit6885)
       (Var 'tmp6892)
       (Reg 'r15)
       (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))
      (set (Var 'vecinit6885) (Reg 'r15) (Var 'vecinit6886))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6885)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6886)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6891)))
     (Instr 'movq (list (Var 'tmp6891) (Var 'tmp6890)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6890)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6892)))
     (Instr 'cmpq (list (Var 'tmp6892) (Var 'tmp6890)))
     (JmpIf 'l 'block6894)
     (Jmp 'block6895))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_1"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'v
  (HasType (Prim 'vector (list (Int 20) (Int 22))) '(Vector Integer Integer))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v) (Int 0)))
    (Prim 'vector-ref (list (Var 'v) (Int 1)))))))


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v
  (HasType (Prim 'vector (list (Int 20) (Int 22))) '(Vector Integer Integer))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v) (Int 0)))
    (Prim 'vector-ref (list (Var 'v) (Int 1)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v
  (HasType (Prim 'vector (list (Int 20) (Int 22))) '(Vector Integer Integer))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v) (Int 0)))
    (Prim 'vector-ref (list (Var 'v) (Int 1)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6899
  (HasType (Prim 'vector (list (Int 20) (Int 22))) '(Vector Integer Integer))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v6899) (Int 0)))
    (Prim 'vector-ref (list (Var 'v6899) (Int 1)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6899
  (HasType (Prim 'vector (list (Int 20) (Int 22))) '(Vector Integer Integer))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v6899) (Int 0)))
    (Prim 'vector-ref (list (Var 'v6899) (Int 1)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6899
  (Let
   'vecinit6901
   (Int 20)
   (Let
    'vecinit6902
    (Int 22)
    (Let
     '_6905
     (If
      (Prim
       '<
       (list
        (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
        (GlobalValue 'fromspace_end)))
      (Void)
      (collect 24))
     (Let
      'alloc6900
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6904
       (Prim 'vector-set! (list (Var 'alloc6900) (Int 0) (Var 'vecinit6901)))
       (Let
        '_6903
        (Prim 'vector-set! (list (Var 'alloc6900) (Int 1) (Var 'vecinit6902)))
        (Var 'alloc6900)))))))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v6899) (Int 0)))
    (Prim 'vector-ref (list (Var 'v6899) (Int 1)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6899
  (Let
   'vecinit6901
   (Int 20)
   (Let
    'vecinit6902
    (Int 22)
    (Let
     '_6905
     (If
      (Prim
       '<
       (list
        (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
        (GlobalValue 'fromspace_end)))
      (Void)
      (collect 24))
     (Let
      'alloc6900
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6904
       (Prim 'vector-set! (list (Var 'alloc6900) (Int 0) (Var 'vecinit6901)))
       (Let
        '_6903
        (Prim 'vector-set! (list (Var 'alloc6900) (Int 1) (Var 'vecinit6902)))
        (Var 'alloc6900)))))))
  (Prim
   '+
   (list
    (Prim 'vector-ref (list (Var 'v6899) (Int 0)))
    (Prim 'vector-ref (list (Var 'v6899) (Int 1)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6899
  (Let
   'vecinit6901
   (Int 20)
   (Let
    'vecinit6902
    (Int 22)
    (Let
     '_6905
     (If
      (Let
       'tmp6906
       (Let
        'tmp6907
        (GlobalValue 'free_ptr)
        (Prim '+ (list (Var 'tmp6907) (Int 24))))
       (Let
        'tmp6908
        (GlobalValue 'fromspace_end)
        (Prim '< (list (Var 'tmp6906) (Var 'tmp6908)))))
      (Void)
      (collect 24))
     (Let
      'alloc6900
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6904
       (Prim 'vector-set! (list (Var 'alloc6900) (Int 0) (Var 'vecinit6901)))
       (Let
        '_6903
        (Prim 'vector-set! (list (Var 'alloc6900) (Int 1) (Var 'vecinit6902)))
        (Var 'alloc6900)))))))
  (Let
   'tmp6909
   (Prim 'vector-ref (list (Var 'v6899) (Int 0)))
   (Let
    'tmp6910
    (Prim 'vector-ref (list (Var 'v6899) (Int 1)))
    (Prim '+ (list (Var 'tmp6909) (Var 'tmp6910)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6899
  (Let
   'vecinit6901
   (Int 20)
   (Let
    'vecinit6902
    (Int 22)
    (Let
     '_6905
     (If
      (Let
       'tmp6906
       (Let
        'tmp6907
        (GlobalValue 'free_ptr)
        (Prim '+ (list (Var 'tmp6907) (Int 24))))
       (Let
        'tmp6908
        (GlobalValue 'fromspace_end)
        (Prim '< (list (Var 'tmp6906) (Var 'tmp6908)))))
      (Void)
      (collect 24))
     (Let
      'alloc6900
      (allocate 2 (Vector Integer Integer))
      (Let
       '_6904
       (Prim 'vector-set! (list (Var 'alloc6900) (Int 0) (Var 'vecinit6901)))
       (Let
        '_6903
        (Prim 'vector-set! (list (Var 'alloc6900) (Int 1) (Var 'vecinit6902)))
        (Var 'alloc6900)))))))
  (Let
   'tmp6909
   (Prim 'vector-ref (list (Var 'v6899) (Int 0)))
   (Let
    'tmp6910
    (Prim 'vector-ref (list (Var 'v6899) (Int 1)))
    (Prim '+ (list (Var 'tmp6909) (Var 'tmp6910)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6901) (Int 20))
    (Seq
     (Assign (Var 'vecinit6902) (Int 22))
     (Seq
      (Assign (Var 'tmp6907) (GlobalValue 'free_ptr))
      (Seq
       (Assign (Var 'tmp6906) (Prim '+ (list (Var 'tmp6907) (Int 24))))
       (Seq
        (Assign (Var 'tmp6908) (GlobalValue 'fromspace_end))
        (IfStmt
         (Prim '< (list (Var 'tmp6906) (Var 'tmp6908)))
         (Goto 'block6912)
         (Goto 'block6913))))))))
  (cons 'block6913 (Seq (collect 24) (Goto 'block6911)))
  (cons 'block6912 (Seq (Assign (Var '_6905) (Void)) (Goto 'block6911)))
  (cons
   'block6911
   (Seq
    (Assign (Var 'alloc6900) (allocate 2 (Vector Integer Integer)))
    (Seq
     (Assign
      (Var '_6904)
      (Prim 'vector-set! (list (Var 'alloc6900) (Int 0) (Var 'vecinit6901))))
     (Seq
      (Assign
       (Var '_6903)
       (Prim 'vector-set! (list (Var 'alloc6900) (Int 1) (Var 'vecinit6902))))
      (Seq
       (Assign (Var 'v6899) (Var 'alloc6900))
       (Seq
        (Assign (Var 'tmp6909) (Prim 'vector-ref (list (Var 'v6899) (Int 0))))
        (Seq
         (Assign (Var 'tmp6910) (Prim 'vector-ref (list (Var 'v6899) (Int 1))))
         (Return (Prim '+ (list (Var 'tmp6909) (Var 'tmp6910)))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6901) (Int 20))
    (Seq
     (Assign (Var 'vecinit6902) (Int 22))
     (Seq
      (Assign (Var 'tmp6907) (GlobalValue 'free_ptr))
      (Seq
       (Assign (Var 'tmp6906) (Prim '+ (list (Var 'tmp6907) (Int 24))))
       (Seq
        (Assign (Var 'tmp6908) (GlobalValue 'fromspace_end))
        (IfStmt
         (Prim '< (list (Var 'tmp6906) (Var 'tmp6908)))
         (Goto 'block6912)
         (Goto 'block6913))))))))
  (cons 'block6913 (Seq (collect 24) (Goto 'block6911)))
  (cons 'block6912 (Seq (Assign (Var '_6905) (Void)) (Goto 'block6911)))
  (cons
   'block6911
   (Seq
    (Assign (Var 'alloc6900) (allocate 2 (Vector Integer Integer)))
    (Seq
     (Assign
      (Var '_6904)
      (Prim 'vector-set! (list (Var 'alloc6900) (Int 0) (Var 'vecinit6901))))
     (Seq
      (Assign
       (Var '_6903)
       (Prim 'vector-set! (list (Var 'alloc6900) (Int 1) (Var 'vecinit6902))))
      (Seq
       (Assign (Var 'v6899) (Var 'alloc6900))
       (Seq
        (Assign (Var 'tmp6909) (Prim 'vector-ref (list (Var 'v6899) (Int 0))))
        (Seq
         (Assign (Var 'tmp6910) (Prim 'vector-ref (list (Var 'v6899) (Int 1))))
         (Return (Prim '+ (list (Var 'tmp6909) (Var 'tmp6910)))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 20) (Var 'vecinit6901)))
     (Instr 'movq (list (Imm 22) (Var 'vecinit6902)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6907)))
     (Instr 'movq (list (Var 'tmp6907) (Var 'tmp6906)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6906)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6908)))
     (Instr 'cmpq (list (Var 'tmp6908) (Var 'tmp6906)))
     (JmpIf 'l 'block6912)
     (Jmp 'block6913))))
  (cons
   'block6913
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6911))))
  (cons
   'block6912
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6905))) (Jmp 'block6911))))
  (cons
   'block6911
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6900)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6901) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6904)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6902) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6903)))
     (Instr 'movq (list (Var 'alloc6900) (Var 'v6899)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6909)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6910)))
     (Instr 'movq (list (Var 'tmp6909) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp6910) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 20) (Var 'vecinit6901)))
     (Instr 'movq (list (Imm 22) (Var 'vecinit6902)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6907)))
     (Instr 'movq (list (Var 'tmp6907) (Var 'tmp6906)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6906)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6908)))
     (Instr 'cmpq (list (Var 'tmp6908) (Var 'tmp6906)))
     (JmpIf 'l 'block6912)
     (Jmp 'block6913))))
  (cons
   'block6913
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6911))))
  (cons
   'block6912
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6905))) (Jmp 'block6911))))
  (cons
   'block6911
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6900)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6901) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6904)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6902) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6903)))
     (Instr 'movq (list (Var 'alloc6900) (Var 'v6899)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6909)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6910)))
     (Instr 'movq (list (Var 'tmp6909) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp6910) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer)))
 (list
  (cons
   'block6911
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r11))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900))
      (set (Var 'alloc6900))
      (set (Var 'v6899))
      (set (Reg 'r11) (Var 'v6899))
      (set (Var 'tmp6909) (Var 'v6899))
      (set (Reg 'r11) (Var 'tmp6909))
      (set (Var 'tmp6910) (Var 'tmp6909))
      (set (Var 'tmp6910) (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6900)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6901) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6904)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6902) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6903)))
     (Instr 'movq (list (Var 'alloc6900) (Var 'v6899)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6909)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6910)))
     (Instr 'movq (list (Var 'tmp6909) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp6910) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6913
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Reg 'rsi) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6911))))
  (cons
   'block6912
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list (Instr 'movq (list (Imm 0) (Var '_6905))) (Jmp 'block6911))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'tmp6907) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set
       (Var 'vecinit6901)
       (Var 'vecinit6902)
       (Reg 'r15)
       (Var 'tmp6906)
       (Var 'tmp6908))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 20) (Var 'vecinit6901)))
     (Instr 'movq (list (Imm 22) (Var 'vecinit6902)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6907)))
     (Instr 'movq (list (Var 'tmp6907) (Var 'tmp6906)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6906)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6908)))
     (Instr 'cmpq (list (Var 'tmp6908) (Var 'tmp6906)))
     (JmpIf 'l 'block6912)
     (Jmp 'block6913))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer)))
 (list
  (cons
   'block6911
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r11))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900))
      (set (Var 'alloc6900))
      (set (Var 'v6899))
      (set (Reg 'r11) (Var 'v6899))
      (set (Var 'tmp6909) (Var 'v6899))
      (set (Reg 'r11) (Var 'tmp6909))
      (set (Var 'tmp6910) (Var 'tmp6909))
      (set (Var 'tmp6910) (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6900)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6901) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6904)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6902) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6903)))
     (Instr 'movq (list (Var 'alloc6900) (Var 'v6899)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6909)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6910)))
     (Instr 'movq (list (Var 'tmp6909) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp6910) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6913
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Reg 'rsi) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6911))))
  (cons
   'block6912
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list (Instr 'movq (list (Imm 0) (Var '_6905))) (Jmp 'block6911))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'tmp6907) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set
       (Var 'vecinit6901)
       (Var 'vecinit6902)
       (Reg 'r15)
       (Var 'tmp6906)
       (Var 'tmp6908))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 20) (Var 'vecinit6901)))
     (Instr 'movq (list (Imm 22) (Var 'vecinit6902)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6907)))
     (Instr 'movq (list (Var 'tmp6907) (Var 'tmp6906)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6906)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6908)))
     (Instr 'cmpq (list (Var 'tmp6908) (Var 'tmp6906)))
     (JmpIf 'l 'block6912)
     (Jmp 'block6913))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2027

1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902>>
1 instruction: #<Instr: addq (#<Imm: 24> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Imm: 5> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r11>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6900>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: alloc6900> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Var: alloc6900> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: alloc6900> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Var: vecinit6901> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: alloc6900> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6904>)>
2 live-set: #<set: #<Var: alloc6900> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Var: alloc6900> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc6900> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Var: vecinit6902> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: alloc6900>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6903>)>
2 live-set: #<set: #<Var: alloc6900>>
1 instruction: #<Instr: movq (#<Var: alloc6900> #<Var: v6899>)>
2 live-set: #<set: #<Var: v6899>>
1 instruction: #<Instr: movq (#<Var: v6899> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11> #<Var: v6899>>
1 instruction: #<Instr: movq (#<Deref: r11 8> #<Var: tmp6909>)>
2 live-set: #<set: #<Var: tmp6909> #<Var: v6899>>
1 instruction: #<Instr: movq (#<Var: v6899> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11> #<Var: tmp6909>>
1 instruction: #<Instr: movq (#<Deref: r11 16> #<Var: tmp6910>)>
2 live-set: #<set: #<Var: tmp6910> #<Var: tmp6909>>
1 instruction: #<Instr: movq (#<Var: tmp6909> #<Reg: rax>)>
2 live-set: #<set: #<Var: tmp6910> #<Reg: rax>>
1 instruction: #<Instr: addq (#<Var: tmp6910> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 24> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6901> #<Reg: rsi> #<Var: vecinit6902> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902>>
1 instruction: #<Jmp: block6911>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6905>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902>>
1 instruction: #<Jmp: block6911>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902>>
1 instruction: #<Instr: movq (#<Imm: 20> #<Var: vecinit6901>)>
2 live-set: #<set: #<Var: vecinit6901> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 22> #<Var: vecinit6902>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6907>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: tmp6907> #<Var: vecinit6902> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: tmp6907> #<Var: tmp6906>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15> #<Var: tmp6906>>
1 instruction: #<Instr: addq (#<Imm: 24> #<Var: tmp6906>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15> #<Var: tmp6906>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6908>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15> #<Var: tmp6906> #<Var: tmp6908>>
1 instruction: #<Instr: cmpq (#<Var: tmp6908> #<Var: tmp6906>)>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15>>
1 instruction: #<JmpIf: l block6912>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15>>
1 instruction: #<Jmp: block6913>
2 live-set: #<set: #<Var: vecinit6901> #<Var: vecinit6902> #<Reg: r15>>
#<Reg: rsi> -> #<Var: vecinit6901>;
#<Reg: rsi> -> #<Var: vecinit6902>;
#<Reg: rsi> -> #<Reg: rdi>;
#<Var: tmp6910> -> #<Var: tmp6909>;
#<Var: tmp6910> -> #<Reg: rax>;
#<Reg: rax> -> #<Var: vecinit6901>;
#<Reg: rax> -> #<Var: tmp6910>;
#<Reg: rax> -> #<Var: vecinit6902>;
#<Reg: rcx> -> #<Var: vecinit6901>;
#<Reg: rcx> -> #<Var: vecinit6902>;
#<Reg: r10> -> #<Var: vecinit6901>;
#<Reg: r10> -> #<Var: vecinit6902>;
#<Reg: r11> -> #<Var: vecinit6901>;
#<Reg: r11> -> #<Var: alloc6900>;
#<Reg: r11> -> #<Var: vecinit6902>;
#<Reg: r11> -> #<Var: tmp6909>;
#<Var: tmp6908> -> #<Var: vecinit6901>;
#<Var: tmp6908> -> #<Var: vecinit6902>;
#<Var: tmp6908> -> #<Reg: r15>;
#<Var: tmp6908> -> #<Var: tmp6906>;
#<Var: v6899> -> #<Var: tmp6909>;
#<Reg: r15> -> #<Var: vecinit6901>;
#<Reg: r15> -> #<Var: tmp6907>;
#<Reg: r15> -> #<Var: vecinit6902>;
#<Reg: r15> -> #<Var: tmp6906>;
#<Reg: r15> -> #<Var: tmp6908>;
#<Var: _6905> -> #<Var: vecinit6901>;
#<Var: _6905> -> #<Var: vecinit6902>;
#<Var: vecinit6902> -> #<Var: vecinit6901>;
#<Var: vecinit6902> -> #<Var: tmp6907>;
#<Var: vecinit6902> -> #<Reg: rcx>;
#<Var: vecinit6902> -> #<Reg: rsi>;
#<Var: vecinit6902> -> #<Reg: rdx>;
#<Var: vecinit6902> -> #<Reg: r8>;
#<Var: vecinit6902> -> #<Var: _6905>;
#<Var: vecinit6902> -> #<Var: alloc6900>;
#<Var: vecinit6902> -> #<Var: _6904>;
#<Var: vecinit6902> -> #<Reg: r15>;
#<Var: vecinit6902> -> #<Reg: r9>;
#<Var: vecinit6902> -> #<Reg: r11>;
#<Var: vecinit6902> -> #<Var: tmp6906>;
#<Var: vecinit6902> -> #<Var: tmp6908>;
#<Var: vecinit6902> -> #<Reg: rax>;
#<Var: vecinit6902> -> #<Reg: rdi>;
#<Var: vecinit6902> -> #<Reg: r10>;
#<Reg: r8> -> #<Var: vecinit6901>;
#<Reg: r8> -> #<Var: vecinit6902>;
#<Var: _6904> -> #<Var: alloc6900>;
#<Var: _6904> -> #<Var: vecinit6902>;
#<Var: tmp6906> -> #<Var: vecinit6901>;
#<Var: tmp6906> -> #<Var: vecinit6902>;
#<Var: tmp6906> -> #<Reg: r15>;
#<Var: tmp6906> -> #<Var: tmp6908>;
#<Var: _6903> -> #<Var: alloc6900>;
#<Var: vecinit6901> -> #<Var: tmp6907>;
#<Var: vecinit6901> -> #<Reg: rcx>;
#<Var: vecinit6901> -> #<Reg: rsi>;
#<Var: vecinit6901> -> #<Reg: rdx>;
#<Var: vecinit6901> -> #<Reg: r8>;
#<Var: vecinit6901> -> #<Var: _6905>;
#<Var: vecinit6901> -> #<Var: alloc6900>;
#<Var: vecinit6901> -> #<Var: vecinit6902>;
#<Var: vecinit6901> -> #<Reg: r15>;
#<Var: vecinit6901> -> #<Reg: r9>;
#<Var: vecinit6901> -> #<Reg: r11>;
#<Var: vecinit6901> -> #<Var: tmp6906>;
#<Var: vecinit6901> -> #<Var: tmp6908>;
#<Var: vecinit6901> -> #<Reg: rax>;
#<Var: vecinit6901> -> #<Reg: rdi>;
#<Var: vecinit6901> -> #<Reg: r10>;
#<Reg: rdx> -> #<Var: vecinit6901>;
#<Reg: rdx> -> #<Var: vecinit6902>;
#<Var: alloc6900> -> #<Var: _6903>;
#<Var: alloc6900> -> #<Var: vecinit6901>;
#<Var: alloc6900> -> #<Var: _6904>;
#<Var: alloc6900> -> #<Var: vecinit6902>;
#<Var: alloc6900> -> #<Reg: r11>;
#<Var: tmp6907> -> #<Var: vecinit6901>;
#<Var: tmp6907> -> #<Var: vecinit6902>;
#<Var: tmp6907> -> #<Reg: r15>;
#<Var: tmp6909> -> #<Var: tmp6910>;
#<Var: tmp6909> -> #<Reg: r11>;
#<Var: tmp6909> -> #<Var: v6899>;
#<Reg: rdi> -> #<Var: vecinit6901>;
#<Reg: rdi> -> #<Reg: rsi>;
#<Reg: rdi> -> #<Var: vecinit6902>;
#<Reg: r9> -> #<Var: vecinit6901>;
#<Reg: r9> -> #<Var: vecinit6902>;
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6911
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r11))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900))
      (set (Var 'alloc6900))
      (set (Var 'v6899))
      (set (Reg 'r11) (Var 'v6899))
      (set (Var 'tmp6909) (Var 'v6899))
      (set (Reg 'r11) (Var 'tmp6909))
      (set (Var 'tmp6910) (Var 'tmp6909))
      (set (Var 'tmp6910) (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6900)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6901) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6904)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6902) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6903)))
     (Instr 'movq (list (Var 'alloc6900) (Var 'v6899)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6909)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6910)))
     (Instr 'movq (list (Var 'tmp6909) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp6910) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6913
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Reg 'rsi) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6911))))
  (cons
   'block6912
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list (Instr 'movq (list (Imm 0) (Var '_6905))) (Jmp 'block6911))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'tmp6907) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set
       (Var 'vecinit6901)
       (Var 'vecinit6902)
       (Reg 'r15)
       (Var 'tmp6906)
       (Var 'tmp6908))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 20) (Var 'vecinit6901)))
     (Instr 'movq (list (Imm 22) (Var 'vecinit6902)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6907)))
     (Instr 'movq (list (Var 'tmp6907) (Var 'tmp6906)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6906)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6908)))
     (Instr 'cmpq (list (Var 'tmp6908) (Var 'tmp6906)))
     (JmpIf 'l 'block6912)
     (Jmp 'block6913))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (v6899 Vector Integer Integer)
    (tmp6907 . Integer)
    (_6903 . Void)
    (_6905 . Void)
    (vecinit6901 . Integer)
    (vecinit6902 . Integer)
    (_6904 . Void)
    (tmp6910 . Integer)
    (tmp6906 . Integer)
    (tmp6909 . Integer)
    (alloc6900 Vector Integer Integer)
    (tmp6908 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6911
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r11))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900) (Var 'vecinit6902))
      (set (Var 'alloc6900))
      (set (Var 'alloc6900))
      (set (Var 'v6899))
      (set (Reg 'r11) (Var 'v6899))
      (set (Var 'tmp6909) (Var 'v6899))
      (set (Reg 'r11) (Var 'tmp6909))
      (set (Var 'tmp6910) (Var 'tmp6909))
      (set (Var 'tmp6910) (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6900)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6901) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6904)))
     (Instr 'movq (list (Var 'alloc6900) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6902) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6903)))
     (Instr 'movq (list (Var 'alloc6900) (Var 'v6899)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6909)))
     (Instr 'movq (list (Var 'v6899) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6910)))
     (Instr 'movq (list (Var 'tmp6909) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp6910) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6913
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Reg 'rsi) (Var 'vecinit6902) (Reg 'rdi))
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 24) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6911))))
  (cons
   'block6912
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Var 'vecinit6902))
      (set (Var 'vecinit6901) (Var 'vecinit6902))))
    (list (Instr 'movq (list (Imm 0) (Var '_6905))) (Jmp 'block6911))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6901) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'tmp6907) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15) (Var 'tmp6906))
      (set
       (Var 'vecinit6901)
       (Var 'vecinit6902)
       (Reg 'r15)
       (Var 'tmp6906)
       (Var 'tmp6908))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))
      (set (Var 'vecinit6901) (Var 'vecinit6902) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 20) (Var 'vecinit6901)))
     (Instr 'movq (list (Imm 22) (Var 'vecinit6902)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6907)))
     (Instr 'movq (list (Var 'tmp6907) (Var 'tmp6906)))
     (Instr 'addq (list (Imm 24) (Var 'tmp6906)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6908)))
     (Instr 'cmpq (list (Var 'tmp6908) (Var 'tmp6906)))
     (JmpIf 'l 'block6912)
     (Jmp 'block6913))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_2"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (HasType
      (Prim
       'vector
       (list (HasType (Prim 'vector (list (Int 42))) '(Vector Integer))))
      '(Vector (Vector Integer)))
     (Int 0)))
   (Int 0))))


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (HasType
      (Prim
       'vector
       (list (HasType (Prim 'vector (list (Int 42))) '(Vector Integer))))
      '(Vector (Vector Integer)))
     (Int 0)))
   (Int 0))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (HasType
      (Prim
       'vector
       (list (HasType (Prim 'vector (list (Int 42))) '(Vector Integer))))
      '(Vector (Vector Integer)))
     (Int 0)))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (HasType
      (Prim
       'vector
       (list (HasType (Prim 'vector (list (Int 42))) '(Vector Integer))))
      '(Vector (Vector Integer)))
     (Int 0)))
   (Int 0))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (HasType
      (Prim
       'vector
       (list (HasType (Prim 'vector (list (Int 42))) '(Vector Integer))))
      '(Vector (Vector Integer)))
     (Int 0)))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (Let
      'vecinit6918
      (Let
       'vecinit6922
       (Int 42)
       (Let
        '_6924
        (If
         (Prim
          '<
          (list
           (Prim '+ (list (GlobalValue 'free_ptr) (Int 16)))
           (GlobalValue 'fromspace_end)))
         (Void)
         (collect 16))
        (Let
         'alloc6921
         (allocate 1 (Vector Integer))
         (Let
          '_6923
          (Prim
           'vector-set!
           (list (Var 'alloc6921) (Int 0) (Var 'vecinit6922)))
          (Var 'alloc6921)))))
      (Let
       '_6920
       (If
        (Prim
         '<
         (list
          (Prim '+ (list (GlobalValue 'free_ptr) (Int 16)))
          (GlobalValue 'fromspace_end)))
        (Void)
        (collect 16))
       (Let
        'alloc6917
        (allocate 1 (Vector (Vector Integer)))
        (Let
         '_6919
         (Prim 'vector-set! (list (Var 'alloc6917) (Int 0) (Var 'vecinit6918)))
         (Var 'alloc6917)))))
     (Int 0)))
   (Int 0))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  'vector-ref
  (list
   (Prim
    'vector-ref
    (list
     (Let
      'vecinit6918
      (Let
       'vecinit6922
       (Int 42)
       (Let
        '_6924
        (If
         (Prim
          '<
          (list
           (Prim '+ (list (GlobalValue 'free_ptr) (Int 16)))
           (GlobalValue 'fromspace_end)))
         (Void)
         (collect 16))
        (Let
         'alloc6921
         (allocate 1 (Vector Integer))
         (Let
          '_6923
          (Prim
           'vector-set!
           (list (Var 'alloc6921) (Int 0) (Var 'vecinit6922)))
          (Var 'alloc6921)))))
      (Let
       '_6920
       (If
        (Prim
         '<
         (list
          (Prim '+ (list (GlobalValue 'free_ptr) (Int 16)))
          (GlobalValue 'fromspace_end)))
        (Void)
        (collect 16))
       (Let
        'alloc6917
        (allocate 1 (Vector (Vector Integer)))
        (Let
         '_6919
         (Prim 'vector-set! (list (Var 'alloc6917) (Int 0) (Var 'vecinit6918)))
         (Var 'alloc6917)))))
     (Int 0)))
   (Int 0))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'tmp6925
  (Let
   'tmp6926
   (Let
    'vecinit6918
    (Let
     'vecinit6922
     (Int 42)
     (Let
      '_6924
      (If
       (Let
        'tmp6927
        (Let
         'tmp6928
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp6928) (Int 16))))
        (Let
         'tmp6929
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp6927) (Var 'tmp6929)))))
       (Void)
       (collect 16))
      (Let
       'alloc6921
       (allocate 1 (Vector Integer))
       (Let
        '_6923
        (Prim 'vector-set! (list (Var 'alloc6921) (Int 0) (Var 'vecinit6922)))
        (Var 'alloc6921)))))
    (Let
     '_6920
     (If
      (Let
       'tmp6930
       (Let
        'tmp6931
        (GlobalValue 'free_ptr)
        (Prim '+ (list (Var 'tmp6931) (Int 16))))
       (Let
        'tmp6932
        (GlobalValue 'fromspace_end)
        (Prim '< (list (Var 'tmp6930) (Var 'tmp6932)))))
      (Void)
      (collect 16))
     (Let
      'alloc6917
      (allocate 1 (Vector (Vector Integer)))
      (Let
       '_6919
       (Prim 'vector-set! (list (Var 'alloc6917) (Int 0) (Var 'vecinit6918)))
       (Var 'alloc6917)))))
   (Prim 'vector-ref (list (Var 'tmp6926) (Int 0))))
  (Prim 'vector-ref (list (Var 'tmp6925) (Int 0)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'tmp6925
  (Let
   'tmp6926
   (Let
    'vecinit6918
    (Let
     'vecinit6922
     (Int 42)
     (Let
      '_6924
      (If
       (Let
        'tmp6927
        (Let
         'tmp6928
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp6928) (Int 16))))
        (Let
         'tmp6929
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp6927) (Var 'tmp6929)))))
       (Void)
       (collect 16))
      (Let
       'alloc6921
       (allocate 1 (Vector Integer))
       (Let
        '_6923
        (Prim 'vector-set! (list (Var 'alloc6921) (Int 0) (Var 'vecinit6922)))
        (Var 'alloc6921)))))
    (Let
     '_6920
     (If
      (Let
       'tmp6930
       (Let
        'tmp6931
        (GlobalValue 'free_ptr)
        (Prim '+ (list (Var 'tmp6931) (Int 16))))
       (Let
        'tmp6932
        (GlobalValue 'fromspace_end)
        (Prim '< (list (Var 'tmp6930) (Var 'tmp6932)))))
      (Void)
      (collect 16))
     (Let
      'alloc6917
      (allocate 1 (Vector (Vector Integer)))
      (Let
       '_6919
       (Prim 'vector-set! (list (Var 'alloc6917) (Int 0) (Var 'vecinit6918)))
       (Var 'alloc6917)))))
   (Prim 'vector-ref (list (Var 'tmp6926) (Int 0))))
  (Prim 'vector-ref (list (Var 'tmp6925) (Int 0)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6922) (Int 42))
    (Seq
     (Assign (Var 'tmp6928) (GlobalValue 'free_ptr))
     (Seq
      (Assign (Var 'tmp6927) (Prim '+ (list (Var 'tmp6928) (Int 16))))
      (Seq
       (Assign (Var 'tmp6929) (GlobalValue 'fromspace_end))
       (IfStmt
        (Prim '< (list (Var 'tmp6927) (Var 'tmp6929)))
        (Goto 'block6937)
        (Goto 'block6938)))))))
  (cons 'block6938 (Seq (collect 16) (Goto 'block6936)))
  (cons 'block6937 (Seq (Assign (Var '_6924) (Void)) (Goto 'block6936)))
  (cons
   'block6936
   (Seq
    (Assign (Var 'alloc6921) (allocate 1 (Vector Integer)))
    (Seq
     (Assign
      (Var '_6923)
      (Prim 'vector-set! (list (Var 'alloc6921) (Int 0) (Var 'vecinit6922))))
     (Seq
      (Assign (Var 'vecinit6918) (Var 'alloc6921))
      (Seq
       (Assign (Var 'tmp6931) (GlobalValue 'free_ptr))
       (Seq
        (Assign (Var 'tmp6930) (Prim '+ (list (Var 'tmp6931) (Int 16))))
        (Seq
         (Assign (Var 'tmp6932) (GlobalValue 'fromspace_end))
         (IfStmt
          (Prim '< (list (Var 'tmp6930) (Var 'tmp6932)))
          (Goto 'block6934)
          (Goto 'block6935)))))))))
  (cons 'block6935 (Seq (collect 16) (Goto 'block6933)))
  (cons 'block6934 (Seq (Assign (Var '_6920) (Void)) (Goto 'block6933)))
  (cons
   'block6933
   (Seq
    (Assign (Var 'alloc6917) (allocate 1 (Vector (Vector Integer))))
    (Seq
     (Assign
      (Var '_6919)
      (Prim 'vector-set! (list (Var 'alloc6917) (Int 0) (Var 'vecinit6918))))
     (Seq
      (Assign (Var 'tmp6926) (Var 'alloc6917))
      (Seq
       (Assign (Var 'tmp6925) (Prim 'vector-ref (list (Var 'tmp6926) (Int 0))))
       (Return (Prim 'vector-ref (list (Var 'tmp6925) (Int 0)))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6922) (Int 42))
    (Seq
     (Assign (Var 'tmp6928) (GlobalValue 'free_ptr))
     (Seq
      (Assign (Var 'tmp6927) (Prim '+ (list (Var 'tmp6928) (Int 16))))
      (Seq
       (Assign (Var 'tmp6929) (GlobalValue 'fromspace_end))
       (IfStmt
        (Prim '< (list (Var 'tmp6927) (Var 'tmp6929)))
        (Goto 'block6937)
        (Goto 'block6938)))))))
  (cons 'block6938 (Seq (collect 16) (Goto 'block6936)))
  (cons 'block6937 (Seq (Assign (Var '_6924) (Void)) (Goto 'block6936)))
  (cons
   'block6936
   (Seq
    (Assign (Var 'alloc6921) (allocate 1 (Vector Integer)))
    (Seq
     (Assign
      (Var '_6923)
      (Prim 'vector-set! (list (Var 'alloc6921) (Int 0) (Var 'vecinit6922))))
     (Seq
      (Assign (Var 'vecinit6918) (Var 'alloc6921))
      (Seq
       (Assign (Var 'tmp6931) (GlobalValue 'free_ptr))
       (Seq
        (Assign (Var 'tmp6930) (Prim '+ (list (Var 'tmp6931) (Int 16))))
        (Seq
         (Assign (Var 'tmp6932) (GlobalValue 'fromspace_end))
         (IfStmt
          (Prim '< (list (Var 'tmp6930) (Var 'tmp6932)))
          (Goto 'block6934)
          (Goto 'block6935)))))))))
  (cons 'block6935 (Seq (collect 16) (Goto 'block6933)))
  (cons 'block6934 (Seq (Assign (Var '_6920) (Void)) (Goto 'block6933)))
  (cons
   'block6933
   (Seq
    (Assign (Var 'alloc6917) (allocate 1 (Vector (Vector Integer))))
    (Seq
     (Assign
      (Var '_6919)
      (Prim 'vector-set! (list (Var 'alloc6917) (Int 0) (Var 'vecinit6918))))
     (Seq
      (Assign (Var 'tmp6926) (Var 'alloc6917))
      (Seq
       (Assign (Var 'tmp6925) (Prim 'vector-ref (list (Var 'tmp6926) (Int 0))))
       (Return (Prim 'vector-ref (list (Var 'tmp6925) (Int 0)))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Var 'vecinit6922)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6928)))
     (Instr 'movq (list (Var 'tmp6928) (Var 'tmp6927)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6927)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6929)))
     (Instr 'cmpq (list (Var 'tmp6929) (Var 'tmp6927)))
     (JmpIf 'l 'block6937)
     (Jmp 'block6938))))
  (cons
   'block6938
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6936))))
  (cons
   'block6937
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6924))) (Jmp 'block6936))))
  (cons
   'block6936
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 3) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6921)))
     (Instr 'movq (list (Var 'alloc6921) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6922) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6923)))
     (Instr 'movq (list (Var 'alloc6921) (Var 'vecinit6918)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6931)))
     (Instr 'movq (list (Var 'tmp6931) (Var 'tmp6930)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6930)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6932)))
     (Instr 'cmpq (list (Var 'tmp6932) (Var 'tmp6930)))
     (JmpIf 'l 'block6934)
     (Jmp 'block6935))))
  (cons
   'block6935
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6933))))
  (cons
   'block6934
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6920))) (Jmp 'block6933))))
  (cons
   'block6933
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 131) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6917)))
     (Instr 'movq (list (Var 'alloc6917) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6918) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6919)))
     (Instr 'movq (list (Var 'alloc6917) (Var 'tmp6926)))
     (Instr 'movq (list (Var 'tmp6926) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6925)))
     (Instr 'movq (list (Var 'tmp6925) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 42) (Var 'vecinit6922)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6928)))
     (Instr 'movq (list (Var 'tmp6928) (Var 'tmp6927)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6927)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6929)))
     (Instr 'cmpq (list (Var 'tmp6929) (Var 'tmp6927)))
     (JmpIf 'l 'block6937)
     (Jmp 'block6938))))
  (cons
   'block6938
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6936))))
  (cons
   'block6937
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6924))) (Jmp 'block6936))))
  (cons
   'block6936
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 3) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6921)))
     (Instr 'movq (list (Var 'alloc6921) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6922) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6923)))
     (Instr 'movq (list (Var 'alloc6921) (Var 'vecinit6918)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6931)))
     (Instr 'movq (list (Var 'tmp6931) (Var 'tmp6930)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6930)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6932)))
     (Instr 'cmpq (list (Var 'tmp6932) (Var 'tmp6930)))
     (JmpIf 'l 'block6934)
     (Jmp 'block6935))))
  (cons
   'block6935
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6933))))
  (cons
   'block6934
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6920))) (Jmp 'block6933))))
  (cons
   'block6933
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 131) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6917)))
     (Instr 'movq (list (Var 'alloc6917) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6918) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6919)))
     (Instr 'movq (list (Var 'alloc6917) (Var 'tmp6926)))
     (Instr 'movq (list (Var 'tmp6926) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6925)))
     (Instr 'movq (list (Var 'tmp6925) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void)))
 (list
  (cons
   'block6933
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))
      (set (Reg 'r11) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917))
      (set (Var 'alloc6917))
      (set (Var 'tmp6926))
      (set (Reg 'r11))
      (set (Var 'tmp6925))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 131) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6917)))
     (Instr 'movq (list (Var 'alloc6917) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6918) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6919)))
     (Instr 'movq (list (Var 'alloc6917) (Var 'tmp6926)))
     (Instr 'movq (list (Var 'tmp6926) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6925)))
     (Instr 'movq (list (Var 'tmp6925) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6935
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918) (Reg 'rdi))
      (set (Reg 'rsi) (Var 'vecinit6918) (Reg 'rdi))
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6933))))
  (cons
   'block6934
   (Block
    (list (list 'live-sets (set (Var 'vecinit6918)) (set (Var 'vecinit6918))))
    (list (Instr 'movq (list (Imm 0) (Var '_6920))) (Jmp 'block6933))))
  (cons
   'block6936
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'r11))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918) (Var 'tmp6931))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'tmp6932) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 3) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6921)))
     (Instr 'movq (list (Var 'alloc6921) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6922) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6923)))
     (Instr 'movq (list (Var 'alloc6921) (Var 'vecinit6918)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6931)))
     (Instr 'movq (list (Var 'tmp6931) (Var 'tmp6930)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6930)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6932)))
     (Instr 'cmpq (list (Var 'tmp6932) (Var 'tmp6930)))
     (JmpIf 'l 'block6934)
     (Jmp 'block6935))))
  (cons
   'block6938
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'rsi) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6936))))
  (cons
   'block6937
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list (Instr 'movq (list (Imm 0) (Var '_6924))) (Jmp 'block6936))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'tmp6928) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Var 'tmp6929) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 42) (Var 'vecinit6922)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6928)))
     (Instr 'movq (list (Var 'tmp6928) (Var 'tmp6927)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6927)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6929)))
     (Instr 'cmpq (list (Var 'tmp6929) (Var 'tmp6927)))
     (JmpIf 'l 'block6937)
     (Jmp 'block6938))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void)))
 (list
  (cons
   'block6933
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))
      (set (Reg 'r11) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917))
      (set (Var 'alloc6917))
      (set (Var 'tmp6926))
      (set (Reg 'r11))
      (set (Var 'tmp6925))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 131) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6917)))
     (Instr 'movq (list (Var 'alloc6917) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6918) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6919)))
     (Instr 'movq (list (Var 'alloc6917) (Var 'tmp6926)))
     (Instr 'movq (list (Var 'tmp6926) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6925)))
     (Instr 'movq (list (Var 'tmp6925) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6935
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918) (Reg 'rdi))
      (set (Reg 'rsi) (Var 'vecinit6918) (Reg 'rdi))
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6933))))
  (cons
   'block6934
   (Block
    (list (list 'live-sets (set (Var 'vecinit6918)) (set (Var 'vecinit6918))))
    (list (Instr 'movq (list (Imm 0) (Var '_6920))) (Jmp 'block6933))))
  (cons
   'block6936
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'r11))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918) (Var 'tmp6931))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'tmp6932) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 3) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6921)))
     (Instr 'movq (list (Var 'alloc6921) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6922) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6923)))
     (Instr 'movq (list (Var 'alloc6921) (Var 'vecinit6918)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6931)))
     (Instr 'movq (list (Var 'tmp6931) (Var 'tmp6930)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6930)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6932)))
     (Instr 'cmpq (list (Var 'tmp6932) (Var 'tmp6930)))
     (JmpIf 'l 'block6934)
     (Jmp 'block6935))))
  (cons
   'block6938
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'rsi) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6936))))
  (cons
   'block6937
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list (Instr 'movq (list (Imm 0) (Var '_6924))) (Jmp 'block6936))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'tmp6928) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Var 'tmp6929) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 42) (Var 'vecinit6922)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6928)))
     (Instr 'movq (list (Var 'tmp6928) (Var 'tmp6927)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6927)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6929)))
     (Instr 'cmpq (list (Var 'tmp6929) (Var 'tmp6927)))
     (JmpIf 'l 'block6937)
     (Jmp 'block6938))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2027

1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6918>>
1 instruction: #<Instr: addq (#<Imm: 16> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Imm: 131> #<Deref: r11 0>)>
2 live-set: #<set: #<Reg: r11> #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6917>)>
2 live-set: #<set: #<Var: alloc6917> #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Var: alloc6917> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc6917> #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Var: vecinit6918> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: alloc6917>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6919>)>
2 live-set: #<set: #<Var: alloc6917>>
1 instruction: #<Instr: movq (#<Var: alloc6917> #<Var: tmp6926>)>
2 live-set: #<set: #<Var: tmp6926>>
1 instruction: #<Instr: movq (#<Var: tmp6926> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: movq (#<Deref: r11 8> #<Var: tmp6925>)>
2 live-set: #<set: #<Var: tmp6925>>
1 instruction: #<Instr: movq (#<Var: tmp6925> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: movq (#<Deref: r11 8> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6918> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 16> #<Reg: rsi>)>
2 live-set: #<set: #<Reg: rsi> #<Var: vecinit6918> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6918>>
1 instruction: #<Jmp: block6933>
2 live-set: #<set: #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6920>)>
2 live-set: #<set: #<Var: vecinit6918>>
1 instruction: #<Jmp: block6933>
2 live-set: #<set: #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Instr: addq (#<Imm: 16> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 3> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15> #<Reg: r11>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6921>)>
2 live-set: #<set: #<Var: vecinit6922> #<Var: alloc6921> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: alloc6921> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6922> #<Var: alloc6921> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: vecinit6922> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: alloc6921> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6923>)>
2 live-set: #<set: #<Var: alloc6921> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: alloc6921> #<Var: vecinit6918>)>
2 live-set: #<set: #<Reg: r15> #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6931>)>
2 live-set: #<set: #<Reg: r15> #<Var: vecinit6918> #<Var: tmp6931>>
1 instruction: #<Instr: movq (#<Var: tmp6931> #<Var: tmp6930>)>
2 live-set: #<set: #<Var: tmp6930> #<Reg: r15> #<Var: vecinit6918>>
1 instruction: #<Instr: addq (#<Imm: 16> #<Var: tmp6930>)>
2 live-set: #<set: #<Var: tmp6930> #<Reg: r15> #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6932>)>
2 live-set: #<set: #<Var: tmp6930> #<Reg: r15> #<Var: tmp6932> #<Var: vecinit6918>>
1 instruction: #<Instr: cmpq (#<Var: tmp6932> #<Var: tmp6930>)>
2 live-set: #<set: #<Reg: r15> #<Var: vecinit6918>>
1 instruction: #<JmpIf: l block6934>
2 live-set: #<set: #<Reg: r15> #<Var: vecinit6918>>
1 instruction: #<Jmp: block6935>
2 live-set: #<set: #<Reg: r15> #<Var: vecinit6918>>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 16> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: rsi> #<Reg: r15> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Jmp: block6936>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6924>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Jmp: block6936>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 42> #<Var: vecinit6922>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6928>)>
2 live-set: #<set: #<Var: vecinit6922> #<Var: tmp6928> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: tmp6928> #<Var: tmp6927>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15> #<Var: tmp6927>>
1 instruction: #<Instr: addq (#<Imm: 16> #<Var: tmp6927>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15> #<Var: tmp6927>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6929>)>
2 live-set: #<set: #<Var: vecinit6922> #<Var: tmp6929> #<Reg: r15> #<Var: tmp6927>>
1 instruction: #<Instr: cmpq (#<Var: tmp6929> #<Var: tmp6927>)>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<JmpIf: l block6937>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
1 instruction: #<Jmp: block6938>
2 live-set: #<set: #<Var: vecinit6922> #<Reg: r15>>
#<Var: tmp6929> -> #<Var: vecinit6922>;
#<Var: tmp6929> -> #<Reg: r15>;
#<Var: tmp6929> -> #<Var: tmp6927>;
#<Reg: rsi> -> #<Var: vecinit6922>;
#<Reg: rsi> -> #<Reg: r15>;
#<Reg: rsi> -> #<Var: vecinit6918>;
#<Reg: rsi> -> #<Reg: rdi>;
#<Reg: rsp> -> #<Var: vecinit6918>;
#<Var: tmp6928> -> #<Var: vecinit6922>;
#<Var: tmp6928> -> #<Reg: r15>;
#<Reg: rbp> -> #<Var: vecinit6918>;
#<Var: _6919> -> #<Var: alloc6917>;
#<Reg: r11> -> #<Var: vecinit6922>;
#<Reg: r11> -> #<Var: alloc6917>;
#<Reg: r11> -> #<Var: alloc6921>;
#<Reg: r11> -> #<Reg: r15>;
#<Reg: r11> -> #<Var: vecinit6918>;
#<Reg: rcx> -> #<Var: vecinit6922>;
#<Reg: rcx> -> #<Reg: r15>;
#<Reg: rcx> -> #<Var: vecinit6918>;
#<Reg: r12> -> #<Var: vecinit6918>;
#<Var: alloc6921> -> #<Var: vecinit6922>;
#<Var: alloc6921> -> #<Var: _6923>;
#<Var: alloc6921> -> #<Reg: r15>;
#<Var: alloc6921> -> #<Reg: r11>;
#<Var: tmp6931> -> #<Reg: r15>;
#<Var: tmp6931> -> #<Var: vecinit6918>;
#<Var: tmp6927> -> #<Var: vecinit6922>;
#<Var: tmp6927> -> #<Var: tmp6929>;
#<Var: tmp6927> -> #<Reg: r15>;
#<Reg: r15> -> #<Var: vecinit6922>;
#<Reg: r15> -> #<Var: _6923>;
#<Reg: r15> -> #<Reg: rcx>;
#<Reg: r15> -> #<Reg: rsi>;
#<Reg: r15> -> #<Var: tmp6930>;
#<Reg: r15> -> #<Var: tmp6929>;
#<Reg: r15> -> #<Var: tmp6928>;
#<Reg: r15> -> #<Reg: rdx>;
#<Reg: r15> -> #<Reg: r8>;
#<Reg: r15> -> #<Var: alloc6921>;
#<Reg: r15> -> #<Var: _6924>;
#<Reg: r15> -> #<Reg: r9>;
#<Reg: r15> -> #<Reg: r11>;
#<Reg: r15> -> #<Reg: rax>;
#<Reg: r15> -> #<Var: tmp6932>;
#<Reg: r15> -> #<Var: vecinit6918>;
#<Reg: r15> -> #<Reg: rdi>;
#<Reg: r15> -> #<Var: tmp6927>;
#<Reg: r15> -> #<Reg: r10>;
#<Reg: r15> -> #<Var: tmp6931>;
#<Reg: rax> -> #<Var: vecinit6922>;
#<Reg: rax> -> #<Reg: r15>;
#<Reg: rax> -> #<Var: vecinit6918>;
#<Reg: r8> -> #<Var: vecinit6922>;
#<Reg: r8> -> #<Reg: r15>;
#<Reg: r8> -> #<Var: vecinit6918>;
#<Reg: r10> -> #<Var: vecinit6922>;
#<Reg: r10> -> #<Reg: r15>;
#<Reg: r10> -> #<Var: vecinit6918>;
#<Var: _6923> -> #<Var: alloc6921>;
#<Var: _6923> -> #<Reg: r15>;
#<Reg: r13> -> #<Var: vecinit6918>;
#<Var: vecinit6922> -> #<Reg: rcx>;
#<Var: vecinit6922> -> #<Reg: rsi>;
#<Var: vecinit6922> -> #<Var: tmp6929>;
#<Var: vecinit6922> -> #<Var: tmp6928>;
#<Var: vecinit6922> -> #<Reg: rdx>;
#<Var: vecinit6922> -> #<Reg: r8>;
#<Var: vecinit6922> -> #<Var: alloc6921>;
#<Var: vecinit6922> -> #<Var: _6924>;
#<Var: vecinit6922> -> #<Reg: r15>;
#<Var: vecinit6922> -> #<Reg: r9>;
#<Var: vecinit6922> -> #<Reg: r11>;
#<Var: vecinit6922> -> #<Reg: rax>;
#<Var: vecinit6922> -> #<Reg: rdi>;
#<Var: vecinit6922> -> #<Var: tmp6927>;
#<Var: vecinit6922> -> #<Reg: r10>;
#<Var: _6920> -> #<Var: vecinit6918>;
#<Reg: rdx> -> #<Var: vecinit6922>;
#<Reg: rdx> -> #<Reg: r15>;
#<Reg: rdx> -> #<Var: vecinit6918>;
#<Var: tmp6932> -> #<Var: tmp6930>;
#<Var: tmp6932> -> #<Reg: r15>;
#<Var: tmp6932> -> #<Var: vecinit6918>;
#<Var: alloc6917> -> #<Reg: r11>;
#<Var: alloc6917> -> #<Var: vecinit6918>;
#<Var: alloc6917> -> #<Var: _6919>;
#<Reg: r14> -> #<Var: vecinit6918>;
#<Reg: rdi> -> #<Var: vecinit6922>;
#<Reg: rdi> -> #<Reg: rsi>;
#<Reg: rdi> -> #<Reg: r15>;
#<Reg: rdi> -> #<Var: vecinit6918>;
#<Var: _6924> -> #<Var: vecinit6922>;
#<Var: _6924> -> #<Reg: r15>;
#<Var: vecinit6918> -> #<Reg: r13>;
#<Var: vecinit6918> -> #<Reg: rsp>;
#<Var: vecinit6918> -> #<Reg: rcx>;
#<Var: vecinit6918> -> #<Reg: rsi>;
#<Var: vecinit6918> -> #<Var: tmp6930>;
#<Var: vecinit6918> -> #<Var: alloc6917>;
#<Var: vecinit6918> -> #<Var: _6920>;
#<Var: vecinit6918> -> #<Reg: rbp>;
#<Var: vecinit6918> -> #<Reg: rdx>;
#<Var: vecinit6918> -> #<Reg: r8>;
#<Var: vecinit6918> -> #<Reg: r14>;
#<Var: vecinit6918> -> #<Reg: r15>;
#<Var: vecinit6918> -> #<Reg: r9>;
#<Var: vecinit6918> -> #<Reg: r12>;
#<Var: vecinit6918> -> #<Reg: r11>;
#<Var: vecinit6918> -> #<Reg: rax>;
#<Var: vecinit6918> -> #<Var: tmp6932>;
#<Var: vecinit6918> -> #<Reg: rdi>;
#<Var: vecinit6918> -> #<Reg: r10>;
#<Var: vecinit6918> -> #<Reg: rbx>;
#<Var: vecinit6918> -> #<Var: tmp6931>;
#<Reg: r9> -> #<Var: vecinit6922>;
#<Reg: r9> -> #<Reg: r15>;
#<Reg: r9> -> #<Var: vecinit6918>;
#<Reg: rbx> -> #<Var: vecinit6918>;
#<Var: tmp6930> -> #<Reg: r15>;
#<Var: tmp6930> -> #<Var: tmp6932>;
#<Var: tmp6930> -> #<Var: vecinit6918>;
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6933
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))
      (set (Reg 'r11) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917))
      (set (Var 'alloc6917))
      (set (Var 'tmp6926))
      (set (Reg 'r11))
      (set (Var 'tmp6925))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 131) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6917)))
     (Instr 'movq (list (Var 'alloc6917) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6918) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6919)))
     (Instr 'movq (list (Var 'alloc6917) (Var 'tmp6926)))
     (Instr 'movq (list (Var 'tmp6926) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6925)))
     (Instr 'movq (list (Var 'tmp6925) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6935
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918) (Reg 'rdi))
      (set (Reg 'rsi) (Var 'vecinit6918) (Reg 'rdi))
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6933))))
  (cons
   'block6934
   (Block
    (list (list 'live-sets (set (Var 'vecinit6918)) (set (Var 'vecinit6918))))
    (list (Instr 'movq (list (Imm 0) (Var '_6920))) (Jmp 'block6933))))
  (cons
   'block6936
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'r11))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918) (Var 'tmp6931))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'tmp6932) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 3) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6921)))
     (Instr 'movq (list (Var 'alloc6921) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6922) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6923)))
     (Instr 'movq (list (Var 'alloc6921) (Var 'vecinit6918)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6931)))
     (Instr 'movq (list (Var 'tmp6931) (Var 'tmp6930)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6930)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6932)))
     (Instr 'cmpq (list (Var 'tmp6932) (Var 'tmp6930)))
     (JmpIf 'l 'block6934)
     (Jmp 'block6935))))
  (cons
   'block6938
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'rsi) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6936))))
  (cons
   'block6937
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list (Instr 'movq (list (Imm 0) (Var '_6924))) (Jmp 'block6936))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'tmp6928) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Var 'tmp6929) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 42) (Var 'vecinit6922)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6928)))
     (Instr 'movq (list (Var 'tmp6928) (Var 'tmp6927)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6927)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6929)))
     (Instr 'cmpq (list (Var 'tmp6929) (Var 'tmp6927)))
     (JmpIf 'l 'block6937)
     (Jmp 'block6938))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6920 . Void)
    (vecinit6918 Vector Integer)
    (tmp6930 . Integer)
    (tmp6927 . Integer)
    (tmp6932 . Integer)
    (tmp6929 . Integer)
    (alloc6921 Vector Integer)
    (tmp6925 Vector Integer)
    (_6924 . Void)
    (vecinit6922 . Integer)
    (tmp6931 . Integer)
    (tmp6928 . Integer)
    (_6923 . Void)
    (alloc6917 Vector (Vector Integer))
    (tmp6926 Vector (Vector Integer))
    (_6919 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6933
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))
      (set (Reg 'r11) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917) (Var 'vecinit6918))
      (set (Var 'alloc6917))
      (set (Var 'alloc6917))
      (set (Var 'tmp6926))
      (set (Reg 'r11))
      (set (Var 'tmp6925))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 131) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6917)))
     (Instr 'movq (list (Var 'alloc6917) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6918) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6919)))
     (Instr 'movq (list (Var 'alloc6917) (Var 'tmp6926)))
     (Instr 'movq (list (Var 'tmp6926) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Var 'tmp6925)))
     (Instr 'movq (list (Var 'tmp6925) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 8) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block6935
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6918) (Reg 'rdi))
      (set (Reg 'rsi) (Var 'vecinit6918) (Reg 'rdi))
      (set (Var 'vecinit6918))
      (set (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6933))))
  (cons
   'block6934
   (Block
    (list (list 'live-sets (set (Var 'vecinit6918)) (set (Var 'vecinit6918))))
    (list (Instr 'movq (list (Imm 0) (Var '_6920))) (Jmp 'block6933))))
  (cons
   'block6936
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'r11))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Var 'alloc6921) (Reg 'r15))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918) (Var 'tmp6931))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'vecinit6918))
      (set (Var 'tmp6930) (Reg 'r15) (Var 'tmp6932) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))
      (set (Reg 'r15) (Var 'vecinit6918))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 16) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 3) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6921)))
     (Instr 'movq (list (Var 'alloc6921) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6922) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6923)))
     (Instr 'movq (list (Var 'alloc6921) (Var 'vecinit6918)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6931)))
     (Instr 'movq (list (Var 'tmp6931) (Var 'tmp6930)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6930)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6932)))
     (Instr 'cmpq (list (Var 'tmp6932) (Var 'tmp6930)))
     (JmpIf 'l 'block6934)
     (Jmp 'block6935))))
  (cons
   'block6938
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'rsi) (Reg 'r15) (Reg 'rdi))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 16) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6936))))
  (cons
   'block6937
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list (Instr 'movq (list (Imm 0) (Var '_6924))) (Jmp 'block6936))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Var 'tmp6928) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Var 'tmp6929) (Reg 'r15) (Var 'tmp6927))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))
      (set (Var 'vecinit6922) (Reg 'r15))))
    (list
     (Instr 'movq (list (Imm 42) (Var 'vecinit6922)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6928)))
     (Instr 'movq (list (Var 'tmp6928) (Var 'tmp6927)))
     (Instr 'addq (list (Imm 16) (Var 'tmp6927)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6929)))
     (Instr 'cmpq (list (Var 'tmp6929) (Var 'tmp6927)))
     (JmpIf 'l 'block6937)
     (Jmp 'block6938))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_3"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'v
  (HasType
   (Prim 'vector (list (Int 1) (Bool #t) (Int 42)))
   '(Vector Integer Boolean Integer))
  (If (Prim 'vector-ref (list (Var 'v) (Int 1))) (Int 42) (Int 5))))


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v
  (HasType
   (Prim 'vector (list (Int 1) (Bool #t) (Int 42)))
   '(Vector Integer Boolean Integer))
  (If (Prim 'vector-ref (list (Var 'v) (Int 1))) (Int 42) (Int 5))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v
  (HasType
   (Prim 'vector (list (Int 1) (Bool #t) (Int 42)))
   '(Vector Integer Boolean Integer))
  (If (Prim 'vector-ref (list (Var 'v) (Int 1))) (Int 42) (Int 5))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6942
  (HasType
   (Prim 'vector (list (Int 1) (Bool #t) (Int 42)))
   '(Vector Integer Boolean Integer))
  (If (Prim 'vector-ref (list (Var 'v6942) (Int 1))) (Int 42) (Int 5))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6942
  (HasType
   (Prim 'vector (list (Int 1) (Bool #t) (Int 42)))
   '(Vector Integer Boolean Integer))
  (If (Prim 'vector-ref (list (Var 'v6942) (Int 1))) (Int 42) (Int 5))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6942
  (Let
   'vecinit6944
   (Int 1)
   (Let
    'vecinit6945
    (Bool #t)
    (Let
     'vecinit6946
     (Int 42)
     (Let
      '_6950
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 32))
      (Let
       'alloc6943
       (allocate 3 (Vector Integer Boolean Integer))
       (Let
        '_6949
        (Prim 'vector-set! (list (Var 'alloc6943) (Int 0) (Var 'vecinit6944)))
        (Let
         '_6948
         (Prim 'vector-set! (list (Var 'alloc6943) (Int 1) (Var 'vecinit6945)))
         (Let
          '_6947
          (Prim
           'vector-set!
           (list (Var 'alloc6943) (Int 2) (Var 'vecinit6946)))
          (Var 'alloc6943)))))))))
  (If (Prim 'vector-ref (list (Var 'v6942) (Int 1))) (Int 42) (Int 5))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6942
  (Let
   'vecinit6944
   (Int 1)
   (Let
    'vecinit6945
    (Bool #t)
    (Let
     'vecinit6946
     (Int 42)
     (Let
      '_6950
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 32))
      (Let
       'alloc6943
       (allocate 3 (Vector Integer Boolean Integer))
       (Let
        '_6949
        (Prim 'vector-set! (list (Var 'alloc6943) (Int 0) (Var 'vecinit6944)))
        (Let
         '_6948
         (Prim 'vector-set! (list (Var 'alloc6943) (Int 1) (Var 'vecinit6945)))
         (Let
          '_6947
          (Prim
           'vector-set!
           (list (Var 'alloc6943) (Int 2) (Var 'vecinit6946)))
          (Var 'alloc6943)))))))))
  (If (Prim 'vector-ref (list (Var 'v6942) (Int 1))) (Int 42) (Int 5))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v6942
  (Let
   'vecinit6944
   (Int 1)
   (Let
    'vecinit6945
    (Bool #t)
    (Let
     'vecinit6946
     (Int 42)
     (Let
      '_6950
      (If
       (Let
        'tmp6951
        (Let
         'tmp6952
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp6952) (Int 32))))
        (Let
         'tmp6953
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp6951) (Var 'tmp6953)))))
       (Void)
       (collect 32))
      (Let
       'alloc6943
       (allocate 3 (Vector Integer Boolean Integer))
       (Let
        '_6949
        (Prim 'vector-set! (list (Var 'alloc6943) (Int 0) (Var 'vecinit6944)))
        (Let
         '_6948
         (Prim 'vector-set! (list (Var 'alloc6943) (Int 1) (Var 'vecinit6945)))
         (Let
          '_6947
          (Prim
           'vector-set!
           (list (Var 'alloc6943) (Int 2) (Var 'vecinit6946)))
          (Var 'alloc6943)))))))))
  (If (Prim 'vector-ref (list (Var 'v6942) (Int 1))) (Int 42) (Int 5))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v6942
  (Let
   'vecinit6944
   (Int 1)
   (Let
    'vecinit6945
    (Bool #t)
    (Let
     'vecinit6946
     (Int 42)
     (Let
      '_6950
      (If
       (Let
        'tmp6951
        (Let
         'tmp6952
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp6952) (Int 32))))
        (Let
         'tmp6953
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp6951) (Var 'tmp6953)))))
       (Void)
       (collect 32))
      (Let
       'alloc6943
       (allocate 3 (Vector Integer Boolean Integer))
       (Let
        '_6949
        (Prim 'vector-set! (list (Var 'alloc6943) (Int 0) (Var 'vecinit6944)))
        (Let
         '_6948
         (Prim 'vector-set! (list (Var 'alloc6943) (Int 1) (Var 'vecinit6945)))
         (Let
          '_6947
          (Prim
           'vector-set!
           (list (Var 'alloc6943) (Int 2) (Var 'vecinit6946)))
          (Var 'alloc6943)))))))))
  (If (Prim 'vector-ref (list (Var 'v6942) (Int 1))) (Int 42) (Int 5))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6944) (Int 1))
    (Seq
     (Assign (Var 'vecinit6945) (Bool #t))
     (Seq
      (Assign (Var 'vecinit6946) (Int 42))
      (Seq
       (Assign (Var 'tmp6952) (GlobalValue 'free_ptr))
       (Seq
        (Assign (Var 'tmp6951) (Prim '+ (list (Var 'tmp6952) (Int 32))))
        (Seq
         (Assign (Var 'tmp6953) (GlobalValue 'fromspace_end))
         (IfStmt
          (Prim '< (list (Var 'tmp6951) (Var 'tmp6953)))
          (Goto 'block6958)
          (Goto 'block6959)))))))))
  (cons 'block6959 (Seq (collect 32) (Goto 'block6957)))
  (cons 'block6958 (Seq (Assign (Var '_6950) (Void)) (Goto 'block6957)))
  (cons
   'block6957
   (Seq
    (Assign (Var 'alloc6943) (allocate 3 (Vector Integer Boolean Integer)))
    (Seq
     (Assign
      (Var '_6949)
      (Prim 'vector-set! (list (Var 'alloc6943) (Int 0) (Var 'vecinit6944))))
     (Seq
      (Assign
       (Var '_6948)
       (Prim 'vector-set! (list (Var 'alloc6943) (Int 1) (Var 'vecinit6945))))
      (Seq
       (Assign
        (Var '_6947)
        (Prim 'vector-set! (list (Var 'alloc6943) (Int 2) (Var 'vecinit6946))))
       (Seq
        (Assign (Var 'v6942) (Var 'alloc6943))
        (Seq
         (Assign (Var 'tmp6954) (Prim 'vector-ref (list (Var 'v6942) (Int 1))))
         (IfStmt
          (Prim 'eq? (list (Var 'tmp6954) (Bool #t)))
          (Goto 'block6955)
          (Goto 'block6956)))))))))
  (cons 'block6956 (Return (Int 5)))
  (cons 'block6955 (Return (Int 42)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6944) (Int 1))
    (Seq
     (Assign (Var 'vecinit6945) (Bool #t))
     (Seq
      (Assign (Var 'vecinit6946) (Int 42))
      (Seq
       (Assign (Var 'tmp6952) (GlobalValue 'free_ptr))
       (Seq
        (Assign (Var 'tmp6951) (Prim '+ (list (Var 'tmp6952) (Int 32))))
        (Seq
         (Assign (Var 'tmp6953) (GlobalValue 'fromspace_end))
         (IfStmt
          (Prim '< (list (Var 'tmp6951) (Var 'tmp6953)))
          (Goto 'block6958)
          (Goto 'block6959)))))))))
  (cons 'block6959 (Seq (collect 32) (Goto 'block6957)))
  (cons 'block6958 (Seq (Assign (Var '_6950) (Void)) (Goto 'block6957)))
  (cons
   'block6957
   (Seq
    (Assign (Var 'alloc6943) (allocate 3 (Vector Integer Boolean Integer)))
    (Seq
     (Assign
      (Var '_6949)
      (Prim 'vector-set! (list (Var 'alloc6943) (Int 0) (Var 'vecinit6944))))
     (Seq
      (Assign
       (Var '_6948)
       (Prim 'vector-set! (list (Var 'alloc6943) (Int 1) (Var 'vecinit6945))))
      (Seq
       (Assign
        (Var '_6947)
        (Prim 'vector-set! (list (Var 'alloc6943) (Int 2) (Var 'vecinit6946))))
       (Seq
        (Assign (Var 'v6942) (Var 'alloc6943))
        (Seq
         (Assign (Var 'tmp6954) (Prim 'vector-ref (list (Var 'v6942) (Int 1))))
         (IfStmt
          (Prim 'eq? (list (Var 'tmp6954) (Bool #t)))
          (Goto 'block6955)
          (Goto 'block6956)))))))))
  (cons 'block6956 (Return (Int 5)))
  (cons 'block6955 (Return (Int 42)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6944)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6945)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit6946)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6952)))
     (Instr 'movq (list (Var 'tmp6952) (Var 'tmp6951)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6951)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6953)))
     (Instr 'cmpq (list (Var 'tmp6953) (Var 'tmp6951)))
     (JmpIf 'l 'block6958)
     (Jmp 'block6959))))
  (cons
   'block6959
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6957))))
  (cons
   'block6958
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6950))) (Jmp 'block6957))))
  (cons
   'block6957
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6943)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6944) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6949)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6945) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6948)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6946) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6947)))
     (Instr 'movq (list (Var 'alloc6943) (Var 'v6942)))
     (Instr 'movq (list (Var 'v6942) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6954)))
     (Instr 'cmpq (list (Imm 1) (Var 'tmp6954)))
     (JmpIf 'e 'block6955)
     (Jmp 'block6956))))
  (cons
   'block6956
   (Block
    '()
    (list (Instr 'movq (list (Imm 5) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6955
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6944)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6945)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit6946)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6952)))
     (Instr 'movq (list (Var 'tmp6952) (Var 'tmp6951)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6951)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6953)))
     (Instr 'cmpq (list (Var 'tmp6953) (Var 'tmp6951)))
     (JmpIf 'l 'block6958)
     (Jmp 'block6959))))
  (cons
   'block6959
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6957))))
  (cons
   'block6958
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6950))) (Jmp 'block6957))))
  (cons
   'block6957
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6943)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6944) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6949)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6945) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6948)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6946) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6947)))
     (Instr 'movq (list (Var 'alloc6943) (Var 'v6942)))
     (Instr 'movq (list (Var 'v6942) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6954)))
     (Instr 'cmpq (list (Imm 1) (Var 'tmp6954)))
     (JmpIf 'e 'block6955)
     (Jmp 'block6956))))
  (cons
   'block6956
   (Block
    '()
    (list (Instr 'movq (list (Imm 5) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6955
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean)))
 (list
  (cons
   'block6956
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 5) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6955
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6957
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r11) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'v6942))
      (set (Reg 'r11))
      (set (Var 'tmp6954))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6943)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6944) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6949)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6945) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6948)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6946) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6947)))
     (Instr 'movq (list (Var 'alloc6943) (Var 'v6942)))
     (Instr 'movq (list (Var 'v6942) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6954)))
     (Instr 'cmpq (list (Imm 1) (Var 'tmp6954)))
     (JmpIf 'e 'block6955)
     (Jmp 'block6956))))
  (cons
   'block6959
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946) (Reg 'rdi))
      (set
       (Var 'vecinit6945)
       (Reg 'rsi)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Reg 'rdi))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6957))))
  (cons
   'block6958
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list (Instr 'movq (list (Imm 0) (Var '_6950))) (Jmp 'block6957))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6952))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6953))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6944)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6945)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit6946)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6952)))
     (Instr 'movq (list (Var 'tmp6952) (Var 'tmp6951)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6951)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6953)))
     (Instr 'cmpq (list (Var 'tmp6953) (Var 'tmp6951)))
     (JmpIf 'l 'block6958)
     (Jmp 'block6959))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean)))
 (list
  (cons
   'block6956
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 5) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6955
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6957
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r11) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'v6942))
      (set (Reg 'r11))
      (set (Var 'tmp6954))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6943)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6944) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6949)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6945) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6948)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6946) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6947)))
     (Instr 'movq (list (Var 'alloc6943) (Var 'v6942)))
     (Instr 'movq (list (Var 'v6942) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6954)))
     (Instr 'cmpq (list (Imm 1) (Var 'tmp6954)))
     (JmpIf 'e 'block6955)
     (Jmp 'block6956))))
  (cons
   'block6959
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946) (Reg 'rdi))
      (set
       (Var 'vecinit6945)
       (Reg 'rsi)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Reg 'rdi))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6957))))
  (cons
   'block6958
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list (Instr 'movq (list (Imm 0) (Var '_6950))) (Jmp 'block6957))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6952))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6953))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6944)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6945)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit6946)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6952)))
     (Instr 'movq (list (Var 'tmp6952) (Var 'tmp6951)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6951)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6953)))
     (Instr 'cmpq (list (Var 'tmp6953) (Var 'tmp6951)))
     (JmpIf 'l 'block6958)
     (Jmp 'block6959))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2027

1 instruction: #<Instr: movq (#<Imm: 5> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Imm: 42> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: movq (#<Imm: 7> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r11> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6943>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: alloc6943> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: vecinit6944> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6949>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: alloc6943> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: vecinit6945> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6948>)>
2 live-set: #<set: #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: alloc6943> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6946> #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: vecinit6946> #<Deref: r11 24>)>
2 live-set: #<set: #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6947>)>
2 live-set: #<set: #<Var: alloc6943>>
1 instruction: #<Instr: movq (#<Var: alloc6943> #<Var: v6942>)>
2 live-set: #<set: #<Var: v6942>>
1 instruction: #<Instr: movq (#<Var: v6942> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: movq (#<Deref: r11 16> #<Var: tmp6954>)>
2 live-set: #<set: #<Var: tmp6954>>
1 instruction: #<Instr: cmpq (#<Imm: 1> #<Var: tmp6954>)>
2 live-set: #<set:>
1 instruction: #<JmpIf: e block6955>
2 live-set: #<set:>
1 instruction: #<Jmp: block6956>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 32> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: rsi> #<Var: vecinit6944> #<Var: vecinit6946> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Jmp: block6957>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6950>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Jmp: block6957>
2 live-set: #<set: #<Var: vecinit6945> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit6944>)>
2 live-set: #<set: #<Reg: r15> #<Var: vecinit6944>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit6945>)>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r15> #<Var: vecinit6944>>
1 instruction: #<Instr: movq (#<Imm: 42> #<Var: vecinit6946>)>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6952>)>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946> #<Var: tmp6952>>
1 instruction: #<Instr: movq (#<Var: tmp6952> #<Var: tmp6951>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: tmp6951> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Var: tmp6951>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: tmp6951> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6953>)>
2 live-set: #<set: #<Var: vecinit6945> #<Var: tmp6951> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946> #<Var: tmp6953>>
1 instruction: #<Instr: cmpq (#<Var: tmp6953> #<Var: tmp6951>)>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<JmpIf: l block6958>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946>>
1 instruction: #<Jmp: block6959>
2 live-set: #<set: #<Var: vecinit6945> #<Reg: r15> #<Var: vecinit6944> #<Var: vecinit6946>>
#<Var: tmp6951> -> #<Var: vecinit6945>;
#<Var: tmp6951> -> #<Reg: r15>;
#<Var: tmp6951> -> #<Var: vecinit6944>;
#<Var: tmp6951> -> #<Var: vecinit6946>;
#<Var: tmp6951> -> #<Var: tmp6953>;
#<Reg: rsi> -> #<Var: vecinit6945>;
#<Reg: rsi> -> #<Var: vecinit6944>;
#<Reg: rsi> -> #<Var: vecinit6946>;
#<Reg: rsi> -> #<Reg: rdi>;
#<Reg: rax> -> #<Var: vecinit6945>;
#<Reg: rax> -> #<Var: vecinit6944>;
#<Reg: rax> -> #<Var: vecinit6946>;
#<Reg: rcx> -> #<Var: vecinit6945>;
#<Reg: rcx> -> #<Var: vecinit6944>;
#<Reg: rcx> -> #<Var: vecinit6946>;
#<Reg: r11> -> #<Var: vecinit6945>;
#<Reg: r11> -> #<Var: vecinit6944>;
#<Reg: r11> -> #<Var: vecinit6946>;
#<Reg: r11> -> #<Var: alloc6943>;
#<Var: vecinit6944> -> #<Var: _6950>;
#<Var: vecinit6944> -> #<Reg: rcx>;
#<Var: vecinit6944> -> #<Var: vecinit6945>;
#<Var: vecinit6944> -> #<Reg: rsi>;
#<Var: vecinit6944> -> #<Var: tmp6951>;
#<Var: vecinit6944> -> #<Reg: rdx>;
#<Var: vecinit6944> -> #<Reg: r8>;
#<Var: vecinit6944> -> #<Reg: r15>;
#<Var: vecinit6944> -> #<Reg: r9>;
#<Var: vecinit6944> -> #<Reg: r11>;
#<Var: vecinit6944> -> #<Var: vecinit6946>;
#<Var: vecinit6944> -> #<Var: alloc6943>;
#<Var: vecinit6944> -> #<Reg: rax>;
#<Var: vecinit6944> -> #<Reg: rdi>;
#<Var: vecinit6944> -> #<Var: tmp6952>;
#<Var: vecinit6944> -> #<Reg: r10>;
#<Var: vecinit6944> -> #<Var: tmp6953>;
#<Reg: r15> -> #<Var: vecinit6945>;
#<Reg: r15> -> #<Var: tmp6951>;
#<Reg: r15> -> #<Var: vecinit6944>;
#<Reg: r15> -> #<Var: vecinit6946>;
#<Reg: r15> -> #<Var: tmp6952>;
#<Reg: r15> -> #<Var: tmp6953>;
#<Var: tmp6953> -> #<Var: vecinit6945>;
#<Var: tmp6953> -> #<Var: tmp6951>;
#<Var: tmp6953> -> #<Reg: r15>;
#<Var: tmp6953> -> #<Var: vecinit6944>;
#<Var: tmp6953> -> #<Var: vecinit6946>;
#<Var: alloc6943> -> #<Var: _6947>;
#<Var: alloc6943> -> #<Var: _6949>;
#<Var: alloc6943> -> #<Var: vecinit6945>;
#<Var: alloc6943> -> #<Var: _6948>;
#<Var: alloc6943> -> #<Reg: r11>;
#<Var: alloc6943> -> #<Var: vecinit6944>;
#<Var: alloc6943> -> #<Var: vecinit6946>;
#<Reg: r8> -> #<Var: vecinit6945>;
#<Reg: r8> -> #<Var: vecinit6944>;
#<Reg: r8> -> #<Var: vecinit6946>;
#<Reg: r10> -> #<Var: vecinit6945>;
#<Reg: r10> -> #<Var: vecinit6944>;
#<Reg: r10> -> #<Var: vecinit6946>;
#<Var: vecinit6945> -> #<Var: _6950>;
#<Var: vecinit6945> -> #<Var: _6949>;
#<Var: vecinit6945> -> #<Reg: rcx>;
#<Var: vecinit6945> -> #<Reg: rsi>;
#<Var: vecinit6945> -> #<Var: tmp6951>;
#<Var: vecinit6945> -> #<Reg: rdx>;
#<Var: vecinit6945> -> #<Reg: r8>;
#<Var: vecinit6945> -> #<Reg: r15>;
#<Var: vecinit6945> -> #<Reg: r9>;
#<Var: vecinit6945> -> #<Reg: r11>;
#<Var: vecinit6945> -> #<Var: vecinit6944>;
#<Var: vecinit6945> -> #<Var: vecinit6946>;
#<Var: vecinit6945> -> #<Var: alloc6943>;
#<Var: vecinit6945> -> #<Reg: rax>;
#<Var: vecinit6945> -> #<Reg: rdi>;
#<Var: vecinit6945> -> #<Var: tmp6952>;
#<Var: vecinit6945> -> #<Reg: r10>;
#<Var: vecinit6945> -> #<Var: tmp6953>;
#<Var: _6947> -> #<Var: alloc6943>;
#<Reg: rdx> -> #<Var: vecinit6945>;
#<Reg: rdx> -> #<Var: vecinit6944>;
#<Reg: rdx> -> #<Var: vecinit6946>;
#<Var: vecinit6946> -> #<Var: _6950>;
#<Var: vecinit6946> -> #<Var: _6949>;
#<Var: vecinit6946> -> #<Reg: rcx>;
#<Var: vecinit6946> -> #<Var: vecinit6945>;
#<Var: vecinit6946> -> #<Reg: rsi>;
#<Var: vecinit6946> -> #<Var: tmp6951>;
#<Var: vecinit6946> -> #<Reg: rdx>;
#<Var: vecinit6946> -> #<Reg: r8>;
#<Var: vecinit6946> -> #<Reg: r15>;
#<Var: vecinit6946> -> #<Reg: r9>;
#<Var: vecinit6946> -> #<Var: _6948>;
#<Var: vecinit6946> -> #<Reg: r11>;
#<Var: vecinit6946> -> #<Var: vecinit6944>;
#<Var: vecinit6946> -> #<Var: alloc6943>;
#<Var: vecinit6946> -> #<Reg: rax>;
#<Var: vecinit6946> -> #<Reg: rdi>;
#<Var: vecinit6946> -> #<Var: tmp6952>;
#<Var: vecinit6946> -> #<Reg: r10>;
#<Var: vecinit6946> -> #<Var: tmp6953>;
#<Var: _6949> -> #<Var: vecinit6945>;
#<Var: _6949> -> #<Var: vecinit6946>;
#<Var: _6949> -> #<Var: alloc6943>;
#<Var: tmp6952> -> #<Var: vecinit6945>;
#<Var: tmp6952> -> #<Reg: r15>;
#<Var: tmp6952> -> #<Var: vecinit6944>;
#<Var: tmp6952> -> #<Var: vecinit6946>;
#<Reg: rdi> -> #<Var: vecinit6945>;
#<Reg: rdi> -> #<Reg: rsi>;
#<Reg: rdi> -> #<Var: vecinit6944>;
#<Reg: rdi> -> #<Var: vecinit6946>;
#<Reg: r9> -> #<Var: vecinit6945>;
#<Reg: r9> -> #<Var: vecinit6944>;
#<Reg: r9> -> #<Var: vecinit6946>;
#<Var: _6948> -> #<Var: vecinit6946>;
#<Var: _6948> -> #<Var: alloc6943>;
#<Var: _6950> -> #<Var: vecinit6945>;
#<Var: _6950> -> #<Var: vecinit6944>;
#<Var: _6950> -> #<Var: vecinit6946>;
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6956
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 5) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6955
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6957
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r11) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'v6942))
      (set (Reg 'r11))
      (set (Var 'tmp6954))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6943)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6944) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6949)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6945) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6948)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6946) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6947)))
     (Instr 'movq (list (Var 'alloc6943) (Var 'v6942)))
     (Instr 'movq (list (Var 'v6942) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6954)))
     (Instr 'cmpq (list (Imm 1) (Var 'tmp6954)))
     (JmpIf 'e 'block6955)
     (Jmp 'block6956))))
  (cons
   'block6959
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946) (Reg 'rdi))
      (set
       (Var 'vecinit6945)
       (Reg 'rsi)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Reg 'rdi))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6957))))
  (cons
   'block6958
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list (Instr 'movq (list (Imm 0) (Var '_6950))) (Jmp 'block6957))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6952))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6953))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6944)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6945)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit6946)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6952)))
     (Instr 'movq (list (Var 'tmp6952) (Var 'tmp6951)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6951)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6953)))
     (Instr 'cmpq (list (Var 'tmp6953) (Var 'tmp6951)))
     (JmpIf 'l 'block6958)
     (Jmp 'block6959))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6947 . Void)
    (tmp6952 . Integer)
    (vecinit6945 . Boolean)
    (vecinit6944 . Integer)
    (_6948 . Void)
    (alloc6943 Vector Integer Boolean Integer)
    (v6942 Vector Integer Boolean Integer)
    (_6950 . Void)
    (tmp6951 . Integer)
    (tmp6953 . Integer)
    (vecinit6946 . Integer)
    (_6949 . Void)
    (tmp6954 . Boolean))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block6956
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 5) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6955
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block6957
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r11) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set
       (Var 'vecinit6945)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6945) (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'vecinit6946) (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'alloc6943))
      (set (Var 'v6942))
      (set (Reg 'r11))
      (set (Var 'tmp6954))
      (set)
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6943)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6944) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6949)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6945) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6948)))
     (Instr 'movq (list (Var 'alloc6943) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6946) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6947)))
     (Instr 'movq (list (Var 'alloc6943) (Var 'v6942)))
     (Instr 'movq (list (Var 'v6942) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Var 'tmp6954)))
     (Instr 'cmpq (list (Imm 1) (Var 'tmp6954)))
     (JmpIf 'e 'block6955)
     (Jmp 'block6956))))
  (cons
   'block6959
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946) (Reg 'rdi))
      (set
       (Var 'vecinit6945)
       (Reg 'rsi)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Reg 'rdi))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block6957))))
  (cons
   'block6958
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Var 'vecinit6944) (Var 'vecinit6946))))
    (list (Instr 'movq (list (Imm 0) (Var '_6950))) (Jmp 'block6957))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6952))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Var 'tmp6951)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946)
       (Var 'tmp6953))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set (Var 'vecinit6945) (Reg 'r15) (Var 'vecinit6944) (Var 'vecinit6946))
      (set
       (Var 'vecinit6945)
       (Reg 'r15)
       (Var 'vecinit6944)
       (Var 'vecinit6946))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6944)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6945)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit6946)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6952)))
     (Instr 'movq (list (Var 'tmp6952) (Var 'tmp6951)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6951)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6953)))
     (Instr 'cmpq (list (Var 'tmp6953) (Var 'tmp6951)))
     (JmpIf 'l 'block6958)
     (Jmp 'block6959))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_4"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Prim
  'vector-length
  (list
   (HasType
    (Prim
     'vector
     (list
      (Int 1)
      (Bool #t)
      (HasType
       (Prim 'vector (list (Int 4) (Int 5) (Int 6)))
       '(Vector Integer Integer Integer))
      (Prim
       'vector-length
       (list
        (HasType
         (Prim 'vector (list (Int 1) (Int 2) (Int 3)))
         '(Vector Integer Integer Integer))))))
    '(Vector Integer Boolean (Vector Integer Integer Integer) Integer)))))


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  'vector-length
  (list
   (HasType
    (Prim
     'vector
     (list
      (Int 1)
      (Bool #t)
      (HasType
       (Prim 'vector (list (Int 4) (Int 5) (Int 6)))
       '(Vector Integer Integer Integer))
      (Prim
       'vector-length
       (list
        (HasType
         (Prim 'vector (list (Int 1) (Int 2) (Int 3)))
         '(Vector Integer Integer Integer))))))
    '(Vector Integer Boolean (Vector Integer Integer Integer) Integer)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  'vector-length
  (list
   (HasType
    (Prim
     'vector
     (list
      (Int 1)
      (Bool #t)
      (HasType
       (Prim 'vector (list (Int 4) (Int 5) (Int 6)))
       '(Vector Integer Integer Integer))
      (Prim
       'vector-length
       (list
        (HasType
         (Prim 'vector (list (Int 1) (Int 2) (Int 3)))
         '(Vector Integer Integer Integer))))))
    '(Vector Integer Boolean (Vector Integer Integer Integer) Integer)))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  'vector-length
  (list
   (HasType
    (Prim
     'vector
     (list
      (Int 1)
      (Bool #t)
      (HasType
       (Prim 'vector (list (Int 4) (Int 5) (Int 6)))
       '(Vector Integer Integer Integer))
      (Prim
       'vector-length
       (list
        (HasType
         (Prim 'vector (list (Int 1) (Int 2) (Int 3)))
         '(Vector Integer Integer Integer))))))
    '(Vector Integer Boolean (Vector Integer Integer Integer) Integer)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  'vector-length
  (list
   (HasType
    (Prim
     'vector
     (list
      (Int 1)
      (Bool #t)
      (HasType
       (Prim 'vector (list (Int 4) (Int 5) (Int 6)))
       '(Vector Integer Integer Integer))
      (Prim
       'vector-length
       (list
        (HasType
         (Prim 'vector (list (Int 1) (Int 2) (Int 3)))
         '(Vector Integer Integer Integer))))))
    '(Vector Integer Boolean (Vector Integer Integer Integer) Integer)))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Prim
  'vector-length
  (list
   (Let
    'vecinit6964
    (Int 1)
    (Let
     'vecinit6965
     (Bool #t)
     (Let
      'vecinit6966
      (Let
       'vecinit6982
       (Int 4)
       (Let
        'vecinit6983
        (Int 5)
        (Let
         'vecinit6984
         (Int 6)
         (Let
          '_6988
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 32))
          (Let
           'alloc6981
           (allocate 3 (Vector Integer Integer Integer))
           (Let
            '_6987
            (Prim
             'vector-set!
             (list (Var 'alloc6981) (Int 0) (Var 'vecinit6982)))
            (Let
             '_6986
             (Prim
              'vector-set!
              (list (Var 'alloc6981) (Int 1) (Var 'vecinit6983)))
             (Let
              '_6985
              (Prim
               'vector-set!
               (list (Var 'alloc6981) (Int 2) (Var 'vecinit6984)))
              (Var 'alloc6981)))))))))
      (Let
       'vecinit6967
       (Prim
        'vector-length
        (list
         (Let
          'vecinit6974
          (Int 1)
          (Let
           'vecinit6975
           (Int 2)
           (Let
            'vecinit6976
            (Int 3)
            (Let
             '_6980
             (If
              (Prim
               '<
               (list
                (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
                (GlobalValue 'fromspace_end)))
              (Void)
              (collect 32))
             (Let
              'alloc6973
              (allocate 3 (Vector Integer Integer Integer))
              (Let
               '_6979
               (Prim
                'vector-set!
                (list (Var 'alloc6973) (Int 0) (Var 'vecinit6974)))
               (Let
                '_6978
                (Prim
                 'vector-set!
                 (list (Var 'alloc6973) (Int 1) (Var 'vecinit6975)))
                (Let
                 '_6977
                 (Prim
                  'vector-set!
                  (list (Var 'alloc6973) (Int 2) (Var 'vecinit6976)))
                 (Var 'alloc6973)))))))))))
       (Let
        '_6972
        (If
         (Prim
          '<
          (list
           (Prim '+ (list (GlobalValue 'free_ptr) (Int 40)))
           (GlobalValue 'fromspace_end)))
         (Void)
         (collect 40))
        (Let
         'alloc6963
         (allocate 4 (Vector Integer Boolean (Vector Integer Integer Integer) Integer))
         (Let
          '_6971
          (Prim
           'vector-set!
           (list (Var 'alloc6963) (Int 0) (Var 'vecinit6964)))
          (Let
           '_6970
           (Prim
            'vector-set!
            (list (Var 'alloc6963) (Int 1) (Var 'vecinit6965)))
           (Let
            '_6969
            (Prim
             'vector-set!
             (list (Var 'alloc6963) (Int 2) (Var 'vecinit6966)))
            (Let
             '_6968
             (Prim
              'vector-set!
              (list (Var 'alloc6963) (Int 3) (Var 'vecinit6967)))
             (Var 'alloc6963))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Prim
  'vector-length
  (list
   (Let
    'vecinit6964
    (Int 1)
    (Let
     'vecinit6965
     (Bool #t)
     (Let
      'vecinit6966
      (Let
       'vecinit6982
       (Int 4)
       (Let
        'vecinit6983
        (Int 5)
        (Let
         'vecinit6984
         (Int 6)
         (Let
          '_6988
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 32))
          (Let
           'alloc6981
           (allocate 3 (Vector Integer Integer Integer))
           (Let
            '_6987
            (Prim
             'vector-set!
             (list (Var 'alloc6981) (Int 0) (Var 'vecinit6982)))
            (Let
             '_6986
             (Prim
              'vector-set!
              (list (Var 'alloc6981) (Int 1) (Var 'vecinit6983)))
             (Let
              '_6985
              (Prim
               'vector-set!
               (list (Var 'alloc6981) (Int 2) (Var 'vecinit6984)))
              (Var 'alloc6981)))))))))
      (Let
       'vecinit6967
       (Prim
        'vector-length
        (list
         (Let
          'vecinit6974
          (Int 1)
          (Let
           'vecinit6975
           (Int 2)
           (Let
            'vecinit6976
            (Int 3)
            (Let
             '_6980
             (If
              (Prim
               '<
               (list
                (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
                (GlobalValue 'fromspace_end)))
              (Void)
              (collect 32))
             (Let
              'alloc6973
              (allocate 3 (Vector Integer Integer Integer))
              (Let
               '_6979
               (Prim
                'vector-set!
                (list (Var 'alloc6973) (Int 0) (Var 'vecinit6974)))
               (Let
                '_6978
                (Prim
                 'vector-set!
                 (list (Var 'alloc6973) (Int 1) (Var 'vecinit6975)))
                (Let
                 '_6977
                 (Prim
                  'vector-set!
                  (list (Var 'alloc6973) (Int 2) (Var 'vecinit6976)))
                 (Var 'alloc6973)))))))))))
       (Let
        '_6972
        (If
         (Prim
          '<
          (list
           (Prim '+ (list (GlobalValue 'free_ptr) (Int 40)))
           (GlobalValue 'fromspace_end)))
         (Void)
         (collect 40))
        (Let
         'alloc6963
         (allocate 4 (Vector Integer Boolean (Vector Integer Integer Integer) Integer))
         (Let
          '_6971
          (Prim
           'vector-set!
           (list (Var 'alloc6963) (Int 0) (Var 'vecinit6964)))
          (Let
           '_6970
           (Prim
            'vector-set!
            (list (Var 'alloc6963) (Int 1) (Var 'vecinit6965)))
           (Let
            '_6969
            (Prim
             'vector-set!
             (list (Var 'alloc6963) (Int 2) (Var 'vecinit6966)))
            (Let
             '_6968
             (Prim
              'vector-set!
              (list (Var 'alloc6963) (Int 3) (Var 'vecinit6967)))
             (Var 'alloc6963))))))))))))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'tmp6989
  (Let
   'vecinit6964
   (Int 1)
   (Let
    'vecinit6965
    (Bool #t)
    (Let
     'vecinit6966
     (Let
      'vecinit6982
      (Int 4)
      (Let
       'vecinit6983
       (Int 5)
       (Let
        'vecinit6984
        (Int 6)
        (Let
         '_6988
         (If
          (Let
           'tmp6990
           (Let
            'tmp6991
            (GlobalValue 'free_ptr)
            (Prim '+ (list (Var 'tmp6991) (Int 32))))
           (Let
            'tmp6992
            (GlobalValue 'fromspace_end)
            (Prim '< (list (Var 'tmp6990) (Var 'tmp6992)))))
          (Void)
          (collect 32))
         (Let
          'alloc6981
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_6987
           (Prim
            'vector-set!
            (list (Var 'alloc6981) (Int 0) (Var 'vecinit6982)))
           (Let
            '_6986
            (Prim
             'vector-set!
             (list (Var 'alloc6981) (Int 1) (Var 'vecinit6983)))
            (Let
             '_6985
             (Prim
              'vector-set!
              (list (Var 'alloc6981) (Int 2) (Var 'vecinit6984)))
             (Var 'alloc6981)))))))))
     (Let
      'vecinit6967
      (Let
       'tmp6993
       (Let
        'vecinit6974
        (Int 1)
        (Let
         'vecinit6975
         (Int 2)
         (Let
          'vecinit6976
          (Int 3)
          (Let
           '_6980
           (If
            (Let
             'tmp6994
             (Let
              'tmp6995
              (GlobalValue 'free_ptr)
              (Prim '+ (list (Var 'tmp6995) (Int 32))))
             (Let
              'tmp6996
              (GlobalValue 'fromspace_end)
              (Prim '< (list (Var 'tmp6994) (Var 'tmp6996)))))
            (Void)
            (collect 32))
           (Let
            'alloc6973
            (allocate 3 (Vector Integer Integer Integer))
            (Let
             '_6979
             (Prim
              'vector-set!
              (list (Var 'alloc6973) (Int 0) (Var 'vecinit6974)))
             (Let
              '_6978
              (Prim
               'vector-set!
               (list (Var 'alloc6973) (Int 1) (Var 'vecinit6975)))
              (Let
               '_6977
               (Prim
                'vector-set!
                (list (Var 'alloc6973) (Int 2) (Var 'vecinit6976)))
               (Var 'alloc6973)))))))))
       (Prim 'vector-length (list (Var 'tmp6993))))
      (Let
       '_6972
       (If
        (Let
         'tmp6997
         (Let
          'tmp6998
          (GlobalValue 'free_ptr)
          (Prim '+ (list (Var 'tmp6998) (Int 40))))
         (Let
          'tmp6999
          (GlobalValue 'fromspace_end)
          (Prim '< (list (Var 'tmp6997) (Var 'tmp6999)))))
        (Void)
        (collect 40))
       (Let
        'alloc6963
        (allocate 4 (Vector Integer Boolean (Vector Integer Integer Integer) Integer))
        (Let
         '_6971
         (Prim 'vector-set! (list (Var 'alloc6963) (Int 0) (Var 'vecinit6964)))
         (Let
          '_6970
          (Prim
           'vector-set!
           (list (Var 'alloc6963) (Int 1) (Var 'vecinit6965)))
          (Let
           '_6969
           (Prim
            'vector-set!
            (list (Var 'alloc6963) (Int 2) (Var 'vecinit6966)))
           (Let
            '_6968
            (Prim
             'vector-set!
             (list (Var 'alloc6963) (Int 3) (Var 'vecinit6967)))
            (Var 'alloc6963)))))))))))
  (Prim 'vector-length (list (Var 'tmp6989)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'tmp6989
  (Let
   'vecinit6964
   (Int 1)
   (Let
    'vecinit6965
    (Bool #t)
    (Let
     'vecinit6966
     (Let
      'vecinit6982
      (Int 4)
      (Let
       'vecinit6983
       (Int 5)
       (Let
        'vecinit6984
        (Int 6)
        (Let
         '_6988
         (If
          (Let
           'tmp6990
           (Let
            'tmp6991
            (GlobalValue 'free_ptr)
            (Prim '+ (list (Var 'tmp6991) (Int 32))))
           (Let
            'tmp6992
            (GlobalValue 'fromspace_end)
            (Prim '< (list (Var 'tmp6990) (Var 'tmp6992)))))
          (Void)
          (collect 32))
         (Let
          'alloc6981
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_6987
           (Prim
            'vector-set!
            (list (Var 'alloc6981) (Int 0) (Var 'vecinit6982)))
           (Let
            '_6986
            (Prim
             'vector-set!
             (list (Var 'alloc6981) (Int 1) (Var 'vecinit6983)))
            (Let
             '_6985
             (Prim
              'vector-set!
              (list (Var 'alloc6981) (Int 2) (Var 'vecinit6984)))
             (Var 'alloc6981)))))))))
     (Let
      'vecinit6967
      (Let
       'tmp6993
       (Let
        'vecinit6974
        (Int 1)
        (Let
         'vecinit6975
         (Int 2)
         (Let
          'vecinit6976
          (Int 3)
          (Let
           '_6980
           (If
            (Let
             'tmp6994
             (Let
              'tmp6995
              (GlobalValue 'free_ptr)
              (Prim '+ (list (Var 'tmp6995) (Int 32))))
             (Let
              'tmp6996
              (GlobalValue 'fromspace_end)
              (Prim '< (list (Var 'tmp6994) (Var 'tmp6996)))))
            (Void)
            (collect 32))
           (Let
            'alloc6973
            (allocate 3 (Vector Integer Integer Integer))
            (Let
             '_6979
             (Prim
              'vector-set!
              (list (Var 'alloc6973) (Int 0) (Var 'vecinit6974)))
             (Let
              '_6978
              (Prim
               'vector-set!
               (list (Var 'alloc6973) (Int 1) (Var 'vecinit6975)))
              (Let
               '_6977
               (Prim
                'vector-set!
                (list (Var 'alloc6973) (Int 2) (Var 'vecinit6976)))
               (Var 'alloc6973)))))))))
       (Prim 'vector-length (list (Var 'tmp6993))))
      (Let
       '_6972
       (If
        (Let
         'tmp6997
         (Let
          'tmp6998
          (GlobalValue 'free_ptr)
          (Prim '+ (list (Var 'tmp6998) (Int 40))))
         (Let
          'tmp6999
          (GlobalValue 'fromspace_end)
          (Prim '< (list (Var 'tmp6997) (Var 'tmp6999)))))
        (Void)
        (collect 40))
       (Let
        'alloc6963
        (allocate 4 (Vector Integer Boolean (Vector Integer Integer Integer) Integer))
        (Let
         '_6971
         (Prim 'vector-set! (list (Var 'alloc6963) (Int 0) (Var 'vecinit6964)))
         (Let
          '_6970
          (Prim
           'vector-set!
           (list (Var 'alloc6963) (Int 1) (Var 'vecinit6965)))
          (Let
           '_6969
           (Prim
            'vector-set!
            (list (Var 'alloc6963) (Int 2) (Var 'vecinit6966)))
           (Let
            '_6968
            (Prim
             'vector-set!
             (list (Var 'alloc6963) (Int 3) (Var 'vecinit6967)))
            (Var 'alloc6963)))))))))))
  (Prim 'vector-length (list (Var 'tmp6989)))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6964) (Int 1))
    (Seq
     (Assign (Var 'vecinit6965) (Bool #t))
     (Seq
      (Assign (Var 'vecinit6982) (Int 4))
      (Seq
       (Assign (Var 'vecinit6983) (Int 5))
       (Seq
        (Assign (Var 'vecinit6984) (Int 6))
        (Seq
         (Assign (Var 'tmp6991) (GlobalValue 'free_ptr))
         (Seq
          (Assign (Var 'tmp6990) (Prim '+ (list (Var 'tmp6991) (Int 32))))
          (Seq
           (Assign (Var 'tmp6992) (GlobalValue 'fromspace_end))
           (IfStmt
            (Prim '< (list (Var 'tmp6990) (Var 'tmp6992)))
            (Goto 'block7007)
            (Goto 'block7008)))))))))))
  (cons 'block7008 (Seq (collect 32) (Goto 'block7006)))
  (cons 'block7007 (Seq (Assign (Var '_6988) (Void)) (Goto 'block7006)))
  (cons
   'block7006
   (Seq
    (Assign (Var 'alloc6981) (allocate 3 (Vector Integer Integer Integer)))
    (Seq
     (Assign
      (Var '_6987)
      (Prim 'vector-set! (list (Var 'alloc6981) (Int 0) (Var 'vecinit6982))))
     (Seq
      (Assign
       (Var '_6986)
       (Prim 'vector-set! (list (Var 'alloc6981) (Int 1) (Var 'vecinit6983))))
      (Seq
       (Assign
        (Var '_6985)
        (Prim 'vector-set! (list (Var 'alloc6981) (Int 2) (Var 'vecinit6984))))
       (Seq
        (Assign (Var 'vecinit6966) (Var 'alloc6981))
        (Seq
         (Assign (Var 'vecinit6974) (Int 1))
         (Seq
          (Assign (Var 'vecinit6975) (Int 2))
          (Seq
           (Assign (Var 'vecinit6976) (Int 3))
           (Seq
            (Assign (Var 'tmp6995) (GlobalValue 'free_ptr))
            (Seq
             (Assign (Var 'tmp6994) (Prim '+ (list (Var 'tmp6995) (Int 32))))
             (Seq
              (Assign (Var 'tmp6996) (GlobalValue 'fromspace_end))
              (IfStmt
               (Prim '< (list (Var 'tmp6994) (Var 'tmp6996)))
               (Goto 'block7004)
               (Goto 'block7005))))))))))))))
  (cons 'block7005 (Seq (collect 32) (Goto 'block7003)))
  (cons 'block7004 (Seq (Assign (Var '_6980) (Void)) (Goto 'block7003)))
  (cons
   'block7003
   (Seq
    (Assign (Var 'alloc6973) (allocate 3 (Vector Integer Integer Integer)))
    (Seq
     (Assign
      (Var '_6979)
      (Prim 'vector-set! (list (Var 'alloc6973) (Int 0) (Var 'vecinit6974))))
     (Seq
      (Assign
       (Var '_6978)
       (Prim 'vector-set! (list (Var 'alloc6973) (Int 1) (Var 'vecinit6975))))
      (Seq
       (Assign
        (Var '_6977)
        (Prim 'vector-set! (list (Var 'alloc6973) (Int 2) (Var 'vecinit6976))))
       (Seq
        (Assign (Var 'tmp6993) (Var 'alloc6973))
        (Seq
         (Assign
          (Var 'vecinit6967)
          (Prim 'vector-length (list (Var 'tmp6993))))
         (Seq
          (Assign (Var 'tmp6998) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp6997) (Prim '+ (list (Var 'tmp6998) (Int 40))))
           (Seq
            (Assign (Var 'tmp6999) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp6997) (Var 'tmp6999)))
             (Goto 'block7001)
             (Goto 'block7002))))))))))))
  (cons 'block7002 (Seq (collect 40) (Goto 'block7000)))
  (cons 'block7001 (Seq (Assign (Var '_6972) (Void)) (Goto 'block7000)))
  (cons
   'block7000
   (Seq
    (Assign
     (Var 'alloc6963)
     (allocate 4 (Vector Integer Boolean (Vector Integer Integer Integer) Integer)))
    (Seq
     (Assign
      (Var '_6971)
      (Prim 'vector-set! (list (Var 'alloc6963) (Int 0) (Var 'vecinit6964))))
     (Seq
      (Assign
       (Var '_6970)
       (Prim 'vector-set! (list (Var 'alloc6963) (Int 1) (Var 'vecinit6965))))
      (Seq
       (Assign
        (Var '_6969)
        (Prim 'vector-set! (list (Var 'alloc6963) (Int 2) (Var 'vecinit6966))))
       (Seq
        (Assign
         (Var '_6968)
         (Prim 'vector-set! (list (Var 'alloc6963) (Int 3) (Var 'vecinit6967))))
        (Seq
         (Assign (Var 'tmp6989) (Var 'alloc6963))
         (Return (Prim 'vector-length (list (Var 'tmp6989)))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit6964) (Int 1))
    (Seq
     (Assign (Var 'vecinit6965) (Bool #t))
     (Seq
      (Assign (Var 'vecinit6982) (Int 4))
      (Seq
       (Assign (Var 'vecinit6983) (Int 5))
       (Seq
        (Assign (Var 'vecinit6984) (Int 6))
        (Seq
         (Assign (Var 'tmp6991) (GlobalValue 'free_ptr))
         (Seq
          (Assign (Var 'tmp6990) (Prim '+ (list (Var 'tmp6991) (Int 32))))
          (Seq
           (Assign (Var 'tmp6992) (GlobalValue 'fromspace_end))
           (IfStmt
            (Prim '< (list (Var 'tmp6990) (Var 'tmp6992)))
            (Goto 'block7007)
            (Goto 'block7008)))))))))))
  (cons 'block7008 (Seq (collect 32) (Goto 'block7006)))
  (cons 'block7007 (Seq (Assign (Var '_6988) (Void)) (Goto 'block7006)))
  (cons
   'block7006
   (Seq
    (Assign (Var 'alloc6981) (allocate 3 (Vector Integer Integer Integer)))
    (Seq
     (Assign
      (Var '_6987)
      (Prim 'vector-set! (list (Var 'alloc6981) (Int 0) (Var 'vecinit6982))))
     (Seq
      (Assign
       (Var '_6986)
       (Prim 'vector-set! (list (Var 'alloc6981) (Int 1) (Var 'vecinit6983))))
      (Seq
       (Assign
        (Var '_6985)
        (Prim 'vector-set! (list (Var 'alloc6981) (Int 2) (Var 'vecinit6984))))
       (Seq
        (Assign (Var 'vecinit6966) (Var 'alloc6981))
        (Seq
         (Assign (Var 'vecinit6974) (Int 1))
         (Seq
          (Assign (Var 'vecinit6975) (Int 2))
          (Seq
           (Assign (Var 'vecinit6976) (Int 3))
           (Seq
            (Assign (Var 'tmp6995) (GlobalValue 'free_ptr))
            (Seq
             (Assign (Var 'tmp6994) (Prim '+ (list (Var 'tmp6995) (Int 32))))
             (Seq
              (Assign (Var 'tmp6996) (GlobalValue 'fromspace_end))
              (IfStmt
               (Prim '< (list (Var 'tmp6994) (Var 'tmp6996)))
               (Goto 'block7004)
               (Goto 'block7005))))))))))))))
  (cons 'block7005 (Seq (collect 32) (Goto 'block7003)))
  (cons 'block7004 (Seq (Assign (Var '_6980) (Void)) (Goto 'block7003)))
  (cons
   'block7003
   (Seq
    (Assign (Var 'alloc6973) (allocate 3 (Vector Integer Integer Integer)))
    (Seq
     (Assign
      (Var '_6979)
      (Prim 'vector-set! (list (Var 'alloc6973) (Int 0) (Var 'vecinit6974))))
     (Seq
      (Assign
       (Var '_6978)
       (Prim 'vector-set! (list (Var 'alloc6973) (Int 1) (Var 'vecinit6975))))
      (Seq
       (Assign
        (Var '_6977)
        (Prim 'vector-set! (list (Var 'alloc6973) (Int 2) (Var 'vecinit6976))))
       (Seq
        (Assign (Var 'tmp6993) (Var 'alloc6973))
        (Seq
         (Assign
          (Var 'vecinit6967)
          (Prim 'vector-length (list (Var 'tmp6993))))
         (Seq
          (Assign (Var 'tmp6998) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp6997) (Prim '+ (list (Var 'tmp6998) (Int 40))))
           (Seq
            (Assign (Var 'tmp6999) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp6997) (Var 'tmp6999)))
             (Goto 'block7001)
             (Goto 'block7002))))))))))))
  (cons 'block7002 (Seq (collect 40) (Goto 'block7000)))
  (cons 'block7001 (Seq (Assign (Var '_6972) (Void)) (Goto 'block7000)))
  (cons
   'block7000
   (Seq
    (Assign
     (Var 'alloc6963)
     (allocate 4 (Vector Integer Boolean (Vector Integer Integer Integer) Integer)))
    (Seq
     (Assign
      (Var '_6971)
      (Prim 'vector-set! (list (Var 'alloc6963) (Int 0) (Var 'vecinit6964))))
     (Seq
      (Assign
       (Var '_6970)
       (Prim 'vector-set! (list (Var 'alloc6963) (Int 1) (Var 'vecinit6965))))
      (Seq
       (Assign
        (Var '_6969)
        (Prim 'vector-set! (list (Var 'alloc6963) (Int 2) (Var 'vecinit6966))))
       (Seq
        (Assign
         (Var '_6968)
         (Prim 'vector-set! (list (Var 'alloc6963) (Int 3) (Var 'vecinit6967))))
        (Seq
         (Assign (Var 'tmp6989) (Var 'alloc6963))
         (Return (Prim 'vector-length (list (Var 'tmp6989)))))))))))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6964)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6965)))
     (Instr 'movq (list (Imm 4) (Var 'vecinit6982)))
     (Instr 'movq (list (Imm 5) (Var 'vecinit6983)))
     (Instr 'movq (list (Imm 6) (Var 'vecinit6984)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6991)))
     (Instr 'movq (list (Var 'tmp6991) (Var 'tmp6990)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6990)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6992)))
     (Instr 'cmpq (list (Var 'tmp6992) (Var 'tmp6990)))
     (JmpIf 'l 'block7007)
     (Jmp 'block7008))))
  (cons
   'block7008
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7006))))
  (cons
   'block7007
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6988))) (Jmp 'block7006))))
  (cons
   'block7006
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6981)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6982) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6987)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6983) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6986)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6984) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6985)))
     (Instr 'movq (list (Var 'alloc6981) (Var 'vecinit6966)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6974)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6975)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit6976)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6995)))
     (Instr 'movq (list (Var 'tmp6995) (Var 'tmp6994)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6994)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6996)))
     (Instr 'cmpq (list (Var 'tmp6996) (Var 'tmp6994)))
     (JmpIf 'l 'block7004)
     (Jmp 'block7005))))
  (cons
   'block7005
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7003))))
  (cons
   'block7004
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6980))) (Jmp 'block7003))))
  (cons
   'block7003
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6973)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6974) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6979)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6975) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6978)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6976) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6977)))
     (Instr 'movq (list (Var 'alloc6973) (Var 'tmp6993)))
     (Instr 'movq (list (Var 'tmp6993) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Var 'vecinit6967)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6998)))
     (Instr 'movq (list (Var 'tmp6998) (Var 'tmp6997)))
     (Instr 'addq (list (Imm 40) (Var 'tmp6997)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6999)))
     (Instr 'cmpq (list (Var 'tmp6999) (Var 'tmp6997)))
     (JmpIf 'l 'block7001)
     (Jmp 'block7002))))
  (cons
   'block7002
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 40) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7000))))
  (cons
   'block7001
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6972))) (Jmp 'block7000))))
  (cons
   'block7000
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 521) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6963)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6964) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6971)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6965) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6970)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6966) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6969)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6967) (Deref 'r11 32)))
     (Instr 'movq (list (Imm 0) (Var '_6968)))
     (Instr 'movq (list (Var 'alloc6963) (Var 'tmp6989)))
     (Instr 'movq (list (Var 'tmp6989) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6964)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6965)))
     (Instr 'movq (list (Imm 4) (Var 'vecinit6982)))
     (Instr 'movq (list (Imm 5) (Var 'vecinit6983)))
     (Instr 'movq (list (Imm 6) (Var 'vecinit6984)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6991)))
     (Instr 'movq (list (Var 'tmp6991) (Var 'tmp6990)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6990)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6992)))
     (Instr 'cmpq (list (Var 'tmp6992) (Var 'tmp6990)))
     (JmpIf 'l 'block7007)
     (Jmp 'block7008))))
  (cons
   'block7008
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7006))))
  (cons
   'block7007
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6988))) (Jmp 'block7006))))
  (cons
   'block7006
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6981)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6982) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6987)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6983) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6986)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6984) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6985)))
     (Instr 'movq (list (Var 'alloc6981) (Var 'vecinit6966)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6974)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6975)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit6976)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6995)))
     (Instr 'movq (list (Var 'tmp6995) (Var 'tmp6994)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6994)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6996)))
     (Instr 'cmpq (list (Var 'tmp6996) (Var 'tmp6994)))
     (JmpIf 'l 'block7004)
     (Jmp 'block7005))))
  (cons
   'block7005
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7003))))
  (cons
   'block7004
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6980))) (Jmp 'block7003))))
  (cons
   'block7003
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6973)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6974) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6979)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6975) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6978)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6976) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6977)))
     (Instr 'movq (list (Var 'alloc6973) (Var 'tmp6993)))
     (Instr 'movq (list (Var 'tmp6993) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Var 'vecinit6967)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6998)))
     (Instr 'movq (list (Var 'tmp6998) (Var 'tmp6997)))
     (Instr 'addq (list (Imm 40) (Var 'tmp6997)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6999)))
     (Instr 'cmpq (list (Var 'tmp6999) (Var 'tmp6997)))
     (JmpIf 'l 'block7001)
     (Jmp 'block7002))))
  (cons
   'block7002
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 40) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7000))))
  (cons
   'block7001
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_6972))) (Jmp 'block7000))))
  (cons
   'block7000
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 521) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6963)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6964) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6971)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6965) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6970)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6966) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6969)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6967) (Deref 'r11 32)))
     (Instr 'movq (list (Imm 0) (Var '_6968)))
     (Instr 'movq (list (Var 'alloc6963) (Var 'tmp6989)))
     (Instr 'movq (list (Var 'tmp6989) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: liveness analysis @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void)))
 (list
  (cons
   'block7000
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r11)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963))
      (set (Var 'alloc6963))
      (set (Var 'tmp6989))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 521) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6963)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6964) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6971)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6965) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6970)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6966) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6969)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6967) (Deref 'r11 32)))
     (Instr 'movq (list (Imm 0) (Var '_6968)))
     (Instr 'movq (list (Var 'alloc6963) (Var 'tmp6989)))
     (Instr 'movq (list (Var 'tmp6989) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7002
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'rsi)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 40) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7000))))
  (cons
   'block7001
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6972))) (Jmp 'block7000))))
  (cons
   'block7003
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6993)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6998)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6999)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6973)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6974) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6979)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6975) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6978)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6976) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6977)))
     (Instr 'movq (list (Var 'alloc6973) (Var 'tmp6993)))
     (Instr 'movq (list (Var 'tmp6993) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Var 'vecinit6967)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6998)))
     (Instr 'movq (list (Var 'tmp6998) (Var 'tmp6997)))
     (Instr 'addq (list (Imm 40) (Var 'tmp6997)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6999)))
     (Instr 'cmpq (list (Var 'tmp6999) (Var 'tmp6997)))
     (JmpIf 'l 'block7001)
     (Jmp 'block7002))))
  (cons
   'block7005
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'rsi)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7003))))
  (cons
   'block7004
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6980))) (Jmp 'block7003))))
  (cons
   'block7006
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'vecinit6966) (Reg 'r15) (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'tmp6995)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'tmp6996)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6981)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6982) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6987)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6983) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6986)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6984) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6985)))
     (Instr 'movq (list (Var 'alloc6981) (Var 'vecinit6966)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6974)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6975)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit6976)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6995)))
     (Instr 'movq (list (Var 'tmp6995) (Var 'tmp6994)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6994)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6996)))
     (Instr 'cmpq (list (Var 'tmp6996) (Var 'tmp6994)))
     (JmpIf 'l 'block7004)
     (Jmp 'block7005))))
  (cons
   'block7008
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Reg 'rsi)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7006))))
  (cons
   'block7007
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list (Instr 'movq (list (Imm 0) (Var '_6988))) (Jmp 'block7006))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6964) (Reg 'r15))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965) (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'tmp6991)
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'tmp6992)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6964)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6965)))
     (Instr 'movq (list (Imm 4) (Var 'vecinit6982)))
     (Instr 'movq (list (Imm 5) (Var 'vecinit6983)))
     (Instr 'movq (list (Imm 6) (Var 'vecinit6984)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6991)))
     (Instr 'movq (list (Var 'tmp6991) (Var 'tmp6990)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6990)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6992)))
     (Instr 'cmpq (list (Var 'tmp6992) (Var 'tmp6990)))
     (JmpIf 'l 'block7007)
     (Jmp 'block7008))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void)))
 (list
  (cons
   'block7000
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r11)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963))
      (set (Var 'alloc6963))
      (set (Var 'tmp6989))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 521) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6963)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6964) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6971)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6965) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6970)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6966) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6969)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6967) (Deref 'r11 32)))
     (Instr 'movq (list (Imm 0) (Var '_6968)))
     (Instr 'movq (list (Var 'alloc6963) (Var 'tmp6989)))
     (Instr 'movq (list (Var 'tmp6989) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7002
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'rsi)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 40) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7000))))
  (cons
   'block7001
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6972))) (Jmp 'block7000))))
  (cons
   'block7003
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6993)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6998)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6999)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6973)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6974) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6979)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6975) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6978)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6976) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6977)))
     (Instr 'movq (list (Var 'alloc6973) (Var 'tmp6993)))
     (Instr 'movq (list (Var 'tmp6993) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Var 'vecinit6967)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6998)))
     (Instr 'movq (list (Var 'tmp6998) (Var 'tmp6997)))
     (Instr 'addq (list (Imm 40) (Var 'tmp6997)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6999)))
     (Instr 'cmpq (list (Var 'tmp6999) (Var 'tmp6997)))
     (JmpIf 'l 'block7001)
     (Jmp 'block7002))))
  (cons
   'block7005
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'rsi)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7003))))
  (cons
   'block7004
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6980))) (Jmp 'block7003))))
  (cons
   'block7006
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'vecinit6966) (Reg 'r15) (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'tmp6995)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'tmp6996)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6981)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6982) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6987)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6983) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6986)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6984) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6985)))
     (Instr 'movq (list (Var 'alloc6981) (Var 'vecinit6966)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6974)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6975)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit6976)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6995)))
     (Instr 'movq (list (Var 'tmp6995) (Var 'tmp6994)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6994)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6996)))
     (Instr 'cmpq (list (Var 'tmp6996) (Var 'tmp6994)))
     (JmpIf 'l 'block7004)
     (Jmp 'block7005))))
  (cons
   'block7008
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Reg 'rsi)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7006))))
  (cons
   'block7007
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list (Instr 'movq (list (Imm 0) (Var '_6988))) (Jmp 'block7006))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6964) (Reg 'r15))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965) (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'tmp6991)
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'tmp6992)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6964)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6965)))
     (Instr 'movq (list (Imm 4) (Var 'vecinit6982)))
     (Instr 'movq (list (Imm 5) (Var 'vecinit6983)))
     (Instr 'movq (list (Imm 6) (Var 'vecinit6984)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6991)))
     (Instr 'movq (list (Var 'tmp6991) (Var 'tmp6990)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6990)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6992)))
     (Instr 'cmpq (list (Var 'tmp6992) (Var 'tmp6990)))
     (JmpIf 'l 'block7007)
     (Jmp 'block7008))))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


running pass: build interference graph @ utilities.rkt:2027

1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: addq (#<Imm: 40> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 521> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r11> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6963>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6963> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6964> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6971>)>
2 live-set: #<set: #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6963> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6965> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6970>)>
2 live-set: #<set: #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967>>
1 instruction: #<Instr: movq (#<Var: alloc6963> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6966> #<Var: alloc6963> #<Var: vecinit6967>>
1 instruction: #<Instr: movq (#<Var: vecinit6966> #<Deref: r11 24>)>
2 live-set: #<set: #<Var: alloc6963> #<Var: vecinit6967>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6969>)>
2 live-set: #<set: #<Var: alloc6963> #<Var: vecinit6967>>
1 instruction: #<Instr: movq (#<Var: alloc6963> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc6963> #<Var: vecinit6967>>
1 instruction: #<Instr: movq (#<Var: vecinit6967> #<Deref: r11 32>)>
2 live-set: #<set: #<Var: alloc6963>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6968>)>
2 live-set: #<set: #<Var: alloc6963>>
1 instruction: #<Instr: movq (#<Var: alloc6963> #<Var: tmp6989>)>
2 live-set: #<set: #<Var: tmp6989>>
1 instruction: #<Instr: movq (#<Var: tmp6989> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: movq (#<Deref: r11 0> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: sarq (#<Imm: 1> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: andq (#<Imm: 63> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 40> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: rsi> #<Var: vecinit6967> #<Var: vecinit6965> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Jmp: block7000>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6972>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Jmp: block7000>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 7> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Reg: r11> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6973>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6973> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6974> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6979>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6973> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6975> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6978>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6973> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6976> #<Deref: r11 24>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6977>)>
2 live-set: #<set: #<Var: alloc6973> #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6973> #<Var: tmp6993>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: tmp6993> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: tmp6993> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Reg: r11> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Deref: r11 0> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Reg: r11> #<Var: vecinit6965>>
1 instruction: #<Instr: sarq (#<Imm: 1> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Reg: r11> #<Var: vecinit6965>>
1 instruction: #<Instr: andq (#<Imm: 63> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Reg: r11> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: vecinit6967>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6998>)>
2 live-set: #<set: #<Var: tmp6998> #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: tmp6998> #<Var: tmp6997>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: tmp6997> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: addq (#<Imm: 40> #<Var: tmp6997>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Var: tmp6997> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6999>)>
2 live-set: #<set: #<Var: tmp6999> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: tmp6997> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: cmpq (#<Var: tmp6999> #<Var: tmp6997>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<JmpIf: l block7001>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Jmp: block7002>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6967> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 32> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: rsi> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Jmp: block7003>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6980>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Jmp: block7003>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Imm: 7> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Reg: r11> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc6981>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Var: alloc6981> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Var: vecinit6982> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6987>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6981> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6983> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6986>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6981> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: vecinit6984> #<Deref: r11 24>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6985>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: alloc6981> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: alloc6981> #<Var: vecinit6966>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit6974>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 2> #<Var: vecinit6975>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 3> #<Var: vecinit6976>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6995>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: tmp6995> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Var: tmp6995> #<Var: tmp6994>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Var: tmp6994> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Var: tmp6994>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Var: tmp6994> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6996>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Var: tmp6994> #<Reg: r15> #<Var: tmp6996> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: cmpq (#<Var: tmp6996> #<Var: tmp6994>)>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<JmpIf: l block7004>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Jmp: block7005>
2 live-set: #<set: #<Var: vecinit6974> #<Var: vecinit6964> #<Var: vecinit6966> #<Var: vecinit6976> #<Reg: r15> #<Var: vecinit6975> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Reg: rdi> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Imm: 32> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit6964> #<Reg: rsi> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Reg: rdi> #<Var: vecinit6982>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Jmp: block7006>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _6988>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Jmp: block7006>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit6964>)>
2 live-set: #<set: #<Var: vecinit6964> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit6965>)>
2 live-set: #<set: #<Var: vecinit6964> #<Reg: r15> #<Var: vecinit6965>>
1 instruction: #<Instr: movq (#<Imm: 4> #<Var: vecinit6982>)>
2 live-set: #<set: #<Var: vecinit6964> #<Reg: r15> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Imm: 5> #<Var: vecinit6983>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Imm: 6> #<Var: vecinit6984>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp6991>)>
2 live-set: #<set: #<Var: tmp6991> #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Var: tmp6991> #<Var: tmp6990>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: tmp6990> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Var: tmp6990>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: tmp6990> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp6992>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: tmp6992> #<Var: vecinit6983> #<Reg: r15> #<Var: tmp6990> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Instr: cmpq (#<Var: tmp6992> #<Var: tmp6990>)>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<JmpIf: l block7007>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
1 instruction: #<Jmp: block7008>
2 live-set: #<set: #<Var: vecinit6964> #<Var: vecinit6983> #<Reg: r15> #<Var: vecinit6984> #<Var: vecinit6965> #<Var: vecinit6982>>
#<Var: _6987> -> #<Var: vecinit6964>;
#<Var: _6987> -> #<Var: alloc6981>;
#<Var: _6987> -> #<Var: vecinit6983>;
#<Var: _6987> -> #<Reg: r15>;
#<Var: _6987> -> #<Var: vecinit6984>;
#<Var: _6987> -> #<Var: vecinit6965>;
#<Var: tmp6995> -> #<Var: vecinit6974>;
#<Var: tmp6995> -> #<Var: vecinit6964>;
#<Var: tmp6995> -> #<Var: vecinit6966>;
#<Var: tmp6995> -> #<Var: vecinit6976>;
#<Var: tmp6995> -> #<Reg: r15>;
#<Var: tmp6995> -> #<Var: vecinit6975>;
#<Var: tmp6995> -> #<Var: vecinit6965>;
#<Reg: rsi> -> #<Var: vecinit6974>;
#<Reg: rsi> -> #<Var: vecinit6964>;
#<Reg: rsi> -> #<Var: vecinit6966>;
#<Reg: rsi> -> #<Var: vecinit6976>;
#<Reg: rsi> -> #<Var: vecinit6983>;
#<Reg: rsi> -> #<Reg: r15>;
#<Reg: rsi> -> #<Var: vecinit6975>;
#<Reg: rsi> -> #<Var: vecinit6984>;
#<Reg: rsi> -> #<Var: vecinit6967>;
#<Reg: rsi> -> #<Var: vecinit6965>;
#<Reg: rsi> -> #<Reg: rdi>;
#<Reg: rsi> -> #<Var: vecinit6982>;
#<Var: _6968> -> #<Var: alloc6963>;
#<Reg: rbp> -> #<Var: vecinit6966>;
#<Var: _6988> -> #<Var: vecinit6964>;
#<Var: _6988> -> #<Var: vecinit6983>;
#<Var: _6988> -> #<Reg: r15>;
#<Var: _6988> -> #<Var: vecinit6984>;
#<Var: _6988> -> #<Var: vecinit6965>;
#<Var: _6988> -> #<Var: vecinit6982>;
#<Var: alloc6981> -> #<Var: vecinit6964>;
#<Var: alloc6981> -> #<Var: vecinit6983>;
#<Var: alloc6981> -> #<Var: _6985>;
#<Var: alloc6981> -> #<Var: _6987>;
#<Var: alloc6981> -> #<Reg: r15>;
#<Var: alloc6981> -> #<Reg: r11>;
#<Var: alloc6981> -> #<Var: vecinit6984>;
#<Var: alloc6981> -> #<Var: vecinit6965>;
#<Var: alloc6981> -> #<Var: vecinit6982>;
#<Var: alloc6981> -> #<Var: _6986>;
#<Reg: r11> -> #<Var: vecinit6974>;
#<Reg: r11> -> #<Var: alloc6973>;
#<Reg: r11> -> #<Var: vecinit6964>;
#<Reg: r11> -> #<Var: vecinit6966>;
#<Reg: r11> -> #<Var: alloc6981>;
#<Reg: r11> -> #<Var: vecinit6976>;
#<Reg: r11> -> #<Var: vecinit6983>;
#<Reg: r11> -> #<Reg: r15>;
#<Reg: r11> -> #<Var: vecinit6975>;
#<Reg: r11> -> #<Var: alloc6963>;
#<Reg: r11> -> #<Var: vecinit6984>;
#<Reg: r11> -> #<Var: vecinit6967>;
#<Reg: r11> -> #<Var: vecinit6965>;
#<Reg: r11> -> #<Var: vecinit6982>;
#<Var: vecinit6966> -> #<Var: tmp6999>;
#<Var: vecinit6966> -> #<Var: tmp6998>;
#<Var: vecinit6966> -> #<Reg: r13>;
#<Var: vecinit6966> -> #<Var: _6978>;
#<Var: vecinit6966> -> #<Var: vecinit6974>;
#<Var: vecinit6966> -> #<Reg: rsp>;
#<Var: vecinit6966> -> #<Var: alloc6973>;
#<Var: vecinit6966> -> #<Var: _6970>;
#<Var: vecinit6966> -> #<Var: vecinit6964>;
#<Var: vecinit6966> -> #<Reg: rcx>;
#<Var: vecinit6966> -> #<Var: vecinit6976>;
#<Var: vecinit6966> -> #<Var: tmp6994>;
#<Var: vecinit6966> -> #<Reg: rsi>;
#<Var: vecinit6966> -> #<Reg: rbp>;
#<Var: vecinit6966> -> #<Reg: rdx>;
#<Var: vecinit6966> -> #<Reg: r8>;
#<Var: vecinit6966> -> #<Reg: r14>;
#<Var: vecinit6966> -> #<Var: tmp6997>;
#<Var: vecinit6966> -> #<Var: tmp6993>;
#<Var: vecinit6966> -> #<Reg: r15>;
#<Var: vecinit6966> -> #<Reg: r9>;
#<Var: vecinit6966> -> #<Reg: r12>;
#<Var: vecinit6966> -> #<Var: tmp6996>;
#<Var: vecinit6966> -> #<Var: vecinit6975>;
#<Var: vecinit6966> -> #<Reg: r11>;
#<Var: vecinit6966> -> #<Var: _6979>;
#<Var: vecinit6966> -> #<Var: alloc6963>;
#<Var: vecinit6966> -> #<Var: _6972>;
#<Var: vecinit6966> -> #<Var: _6971>;
#<Var: vecinit6966> -> #<Var: _6977>;
#<Var: vecinit6966> -> #<Var: vecinit6967>;
#<Var: vecinit6966> -> #<Var: tmp6995>;
#<Var: vecinit6966> -> #<Reg: rax>;
#<Var: vecinit6966> -> #<Var: vecinit6965>;
#<Var: vecinit6966> -> #<Var: _6980>;
#<Var: vecinit6966> -> #<Reg: rdi>;
#<Var: vecinit6966> -> #<Reg: r10>;
#<Var: vecinit6966> -> #<Reg: rbx>;
#<Reg: rcx> -> #<Var: vecinit6974>;
#<Reg: rcx> -> #<Var: vecinit6964>;
#<Reg: rcx> -> #<Var: vecinit6966>;
#<Reg: rcx> -> #<Var: vecinit6976>;
#<Reg: rcx> -> #<Var: vecinit6983>;
#<Reg: rcx> -> #<Reg: r15>;
#<Reg: rcx> -> #<Var: vecinit6975>;
#<Reg: rcx> -> #<Var: vecinit6984>;
#<Reg: rcx> -> #<Var: vecinit6967>;
#<Reg: rcx> -> #<Var: vecinit6965>;
#<Reg: rcx> -> #<Var: vecinit6982>;
#<Reg: r12> -> #<Var: vecinit6966>;
#<Var: vecinit6984> -> #<Var: tmp6991>;
#<Var: vecinit6984> -> #<Var: vecinit6964>;
#<Var: vecinit6984> -> #<Reg: rcx>;
#<Var: vecinit6984> -> #<Var: tmp6992>;
#<Var: vecinit6984> -> #<Var: alloc6981>;
#<Var: vecinit6984> -> #<Reg: rsi>;
#<Var: vecinit6984> -> #<Var: _6988>;
#<Var: vecinit6984> -> #<Var: vecinit6983>;
#<Var: vecinit6984> -> #<Var: _6987>;
#<Var: vecinit6984> -> #<Reg: rdx>;
#<Var: vecinit6984> -> #<Reg: r8>;
#<Var: vecinit6984> -> #<Reg: r15>;
#<Var: vecinit6984> -> #<Reg: r9>;
#<Var: vecinit6984> -> #<Reg: r11>;
#<Var: vecinit6984> -> #<Var: tmp6990>;
#<Var: vecinit6984> -> #<Reg: rax>;
#<Var: vecinit6984> -> #<Var: vecinit6965>;
#<Var: vecinit6984> -> #<Reg: rdi>;
#<Var: vecinit6984> -> #<Var: vecinit6982>;
#<Var: vecinit6984> -> #<Reg: r10>;
#<Var: vecinit6984> -> #<Var: _6986>;
#<Reg: rax> -> #<Var: vecinit6974>;
#<Reg: rax> -> #<Var: vecinit6964>;
#<Reg: rax> -> #<Var: vecinit6966>;
#<Reg: rax> -> #<Var: vecinit6976>;
#<Reg: rax> -> #<Var: vecinit6983>;
#<Reg: rax> -> #<Reg: r15>;
#<Reg: rax> -> #<Var: vecinit6975>;
#<Reg: rax> -> #<Var: vecinit6984>;
#<Reg: rax> -> #<Var: vecinit6967>;
#<Reg: rax> -> #<Var: vecinit6965>;
#<Reg: rax> -> #<Var: vecinit6982>;
#<Var: _6972> -> #<Var: vecinit6964>;
#<Var: _6972> -> #<Var: vecinit6966>;
#<Var: _6972> -> #<Var: vecinit6967>;
#<Var: _6972> -> #<Var: vecinit6965>;
#<Var: _6971> -> #<Var: vecinit6966>;
#<Var: _6971> -> #<Var: alloc6963>;
#<Var: _6971> -> #<Var: vecinit6967>;
#<Var: _6971> -> #<Var: vecinit6965>;
#<Var: _6978> -> #<Var: alloc6973>;
#<Var: _6978> -> #<Var: vecinit6964>;
#<Var: _6978> -> #<Var: vecinit6966>;
#<Var: _6978> -> #<Var: vecinit6976>;
#<Var: _6978> -> #<Reg: r15>;
#<Var: _6978> -> #<Var: vecinit6965>;
#<Var: tmp6990> -> #<Var: vecinit6964>;
#<Var: tmp6990> -> #<Var: tmp6992>;
#<Var: tmp6990> -> #<Var: vecinit6983>;
#<Var: tmp6990> -> #<Reg: r15>;
#<Var: tmp6990> -> #<Var: vecinit6984>;
#<Var: tmp6990> -> #<Var: vecinit6965>;
#<Var: tmp6990> -> #<Var: vecinit6982>;
#<Var: tmp6996> -> #<Var: vecinit6974>;
#<Var: tmp6996> -> #<Var: vecinit6964>;
#<Var: tmp6996> -> #<Var: vecinit6966>;
#<Var: tmp6996> -> #<Var: vecinit6976>;
#<Var: tmp6996> -> #<Var: tmp6994>;
#<Var: tmp6996> -> #<Reg: r15>;
#<Var: tmp6996> -> #<Var: vecinit6975>;
#<Var: tmp6996> -> #<Var: vecinit6965>;
#<Var: vecinit6982> -> #<Var: tmp6991>;
#<Var: vecinit6982> -> #<Var: vecinit6964>;
#<Var: vecinit6982> -> #<Reg: rcx>;
#<Var: vecinit6982> -> #<Var: tmp6992>;
#<Var: vecinit6982> -> #<Var: alloc6981>;
#<Var: vecinit6982> -> #<Reg: rsi>;
#<Var: vecinit6982> -> #<Var: _6988>;
#<Var: vecinit6982> -> #<Var: vecinit6983>;
#<Var: vecinit6982> -> #<Reg: rdx>;
#<Var: vecinit6982> -> #<Reg: r8>;
#<Var: vecinit6982> -> #<Reg: r15>;
#<Var: vecinit6982> -> #<Reg: r9>;
#<Var: vecinit6982> -> #<Reg: r11>;
#<Var: vecinit6982> -> #<Var: tmp6990>;
#<Var: vecinit6982> -> #<Var: vecinit6984>;
#<Var: vecinit6982> -> #<Reg: rax>;
#<Var: vecinit6982> -> #<Var: vecinit6965>;
#<Var: vecinit6982> -> #<Reg: rdi>;
#<Var: vecinit6982> -> #<Reg: r10>;
#<Reg: r9> -> #<Var: vecinit6974>;
#<Reg: r9> -> #<Var: vecinit6964>;
#<Reg: r9> -> #<Var: vecinit6966>;
#<Reg: r9> -> #<Var: vecinit6976>;
#<Reg: r9> -> #<Var: vecinit6983>;
#<Reg: r9> -> #<Reg: r15>;
#<Reg: r9> -> #<Var: vecinit6975>;
#<Reg: r9> -> #<Var: vecinit6984>;
#<Reg: r9> -> #<Var: vecinit6967>;
#<Reg: r9> -> #<Var: vecinit6965>;
#<Reg: r9> -> #<Var: vecinit6982>;
#<Reg: rbx> -> #<Var: vecinit6966>;
#<Var: _6979> -> #<Var: alloc6973>;
#<Var: _6979> -> #<Var: vecinit6964>;
#<Var: _6979> -> #<Var: vecinit6966>;
#<Var: _6979> -> #<Var: vecinit6976>;
#<Var: _6979> -> #<Reg: r15>;
#<Var: _6979> -> #<Var: vecinit6975>;
#<Var: _6979> -> #<Var: vecinit6965>;
#<Var: vecinit6967> -> #<Var: tmp6999>;
#<Var: vecinit6967> -> #<Var: tmp6998>;
#<Var: vecinit6967> -> #<Var: _6970>;
#<Var: vecinit6967> -> #<Var: vecinit6964>;
#<Var: vecinit6967> -> #<Var: vecinit6966>;
#<Var: vecinit6967> -> #<Reg: rcx>;
#<Var: vecinit6967> -> #<Reg: rsi>;
#<Var: vecinit6967> -> #<Reg: rdx>;
#<Var: vecinit6967> -> #<Reg: r8>;
#<Var: vecinit6967> -> #<Var: tmp6997>;
#<Var: vecinit6967> -> #<Reg: r15>;
#<Var: vecinit6967> -> #<Reg: r9>;
#<Var: vecinit6967> -> #<Reg: r11>;
#<Var: vecinit6967> -> #<Var: alloc6963>;
#<Var: vecinit6967> -> #<Var: _6972>;
#<Var: vecinit6967> -> #<Var: _6971>;
#<Var: vecinit6967> -> #<Var: _6969>;
#<Var: vecinit6967> -> #<Reg: rax>;
#<Var: vecinit6967> -> #<Var: vecinit6965>;
#<Var: vecinit6967> -> #<Reg: rdi>;
#<Var: vecinit6967> -> #<Reg: r10>;
#<Var: tmp6992> -> #<Var: vecinit6964>;
#<Var: tmp6992> -> #<Var: vecinit6983>;
#<Var: tmp6992> -> #<Reg: r15>;
#<Var: tmp6992> -> #<Var: tmp6990>;
#<Var: tmp6992> -> #<Var: vecinit6984>;
#<Var: tmp6992> -> #<Var: vecinit6965>;
#<Var: tmp6992> -> #<Var: vecinit6982>;
#<Reg: rsp> -> #<Var: vecinit6966>;
#<Var: tmp6991> -> #<Var: vecinit6964>;
#<Var: tmp6991> -> #<Var: vecinit6983>;
#<Var: tmp6991> -> #<Reg: r15>;
#<Var: tmp6991> -> #<Var: vecinit6984>;
#<Var: tmp6991> -> #<Var: vecinit6965>;
#<Var: tmp6991> -> #<Var: vecinit6982>;
#<Var: tmp6999> -> #<Var: vecinit6964>;
#<Var: tmp6999> -> #<Var: vecinit6966>;
#<Var: tmp6999> -> #<Var: tmp6997>;
#<Var: tmp6999> -> #<Reg: r15>;
#<Var: tmp6999> -> #<Var: vecinit6967>;
#<Var: tmp6999> -> #<Var: vecinit6965>;
#<Var: tmp6994> -> #<Var: vecinit6974>;
#<Var: tmp6994> -> #<Var: vecinit6964>;
#<Var: tmp6994> -> #<Var: vecinit6966>;
#<Var: tmp6994> -> #<Var: vecinit6976>;
#<Var: tmp6994> -> #<Reg: r15>;
#<Var: tmp6994> -> #<Var: tmp6996>;
#<Var: tmp6994> -> #<Var: vecinit6975>;
#<Var: tmp6994> -> #<Var: vecinit6965>;
#<Var: _6977> -> #<Var: alloc6973>;
#<Var: _6977> -> #<Var: vecinit6964>;
#<Var: _6977> -> #<Var: vecinit6966>;
#<Var: _6977> -> #<Reg: r15>;
#<Var: _6977> -> #<Var: vecinit6965>;
#<Var: vecinit6976> -> #<Var: _6978>;
#<Var: vecinit6976> -> #<Var: vecinit6974>;
#<Var: vecinit6976> -> #<Var: alloc6973>;
#<Var: vecinit6976> -> #<Var: vecinit6964>;
#<Var: vecinit6976> -> #<Var: vecinit6966>;
#<Var: vecinit6976> -> #<Reg: rcx>;
#<Var: vecinit6976> -> #<Var: tmp6994>;
#<Var: vecinit6976> -> #<Reg: rsi>;
#<Var: vecinit6976> -> #<Reg: rdx>;
#<Var: vecinit6976> -> #<Reg: r8>;
#<Var: vecinit6976> -> #<Reg: r15>;
#<Var: vecinit6976> -> #<Reg: r9>;
#<Var: vecinit6976> -> #<Var: tmp6996>;
#<Var: vecinit6976> -> #<Var: vecinit6975>;
#<Var: vecinit6976> -> #<Reg: r11>;
#<Var: vecinit6976> -> #<Var: _6979>;
#<Var: vecinit6976> -> #<Var: tmp6995>;
#<Var: vecinit6976> -> #<Reg: rax>;
#<Var: vecinit6976> -> #<Var: vecinit6965>;
#<Var: vecinit6976> -> #<Var: _6980>;
#<Var: vecinit6976> -> #<Reg: rdi>;
#<Var: vecinit6976> -> #<Reg: r10>;
#<Var: tmp6997> -> #<Var: tmp6999>;
#<Var: tmp6997> -> #<Var: vecinit6964>;
#<Var: tmp6997> -> #<Var: vecinit6966>;
#<Var: tmp6997> -> #<Reg: r15>;
#<Var: tmp6997> -> #<Var: vecinit6967>;
#<Var: tmp6997> -> #<Var: vecinit6965>;
#<Reg: r15> -> #<Var: tmp6999>;
#<Reg: r15> -> #<Var: tmp6998>;
#<Reg: r15> -> #<Var: _6978>;
#<Reg: r15> -> #<Var: vecinit6974>;
#<Reg: r15> -> #<Var: alloc6973>;
#<Reg: r15> -> #<Var: tmp6991>;
#<Reg: r15> -> #<Var: vecinit6964>;
#<Reg: r15> -> #<Var: vecinit6966>;
#<Reg: r15> -> #<Reg: rcx>;
#<Reg: r15> -> #<Var: tmp6992>;
#<Reg: r15> -> #<Var: alloc6981>;
#<Reg: r15> -> #<Var: vecinit6976>;
#<Reg: r15> -> #<Var: tmp6994>;
#<Reg: r15> -> #<Reg: rsi>;
#<Reg: r15> -> #<Var: _6988>;
#<Reg: r15> -> #<Var: vecinit6983>;
#<Reg: r15> -> #<Var: _6985>;
#<Reg: r15> -> #<Var: _6987>;
#<Reg: r15> -> #<Reg: rdx>;
#<Reg: r15> -> #<Reg: r8>;
#<Reg: r15> -> #<Var: tmp6997>;
#<Reg: r15> -> #<Var: tmp6993>;
#<Reg: r15> -> #<Reg: r9>;
#<Reg: r15> -> #<Var: tmp6996>;
#<Reg: r15> -> #<Var: vecinit6975>;
#<Reg: r15> -> #<Reg: r11>;
#<Reg: r15> -> #<Var: _6979>;
#<Reg: r15> -> #<Var: tmp6990>;
#<Reg: r15> -> #<Var: vecinit6984>;
#<Reg: r15> -> #<Var: _6977>;
#<Reg: r15> -> #<Var: vecinit6967>;
#<Reg: r15> -> #<Var: tmp6995>;
#<Reg: r15> -> #<Reg: rax>;
#<Reg: r15> -> #<Var: vecinit6965>;
#<Reg: r15> -> #<Var: _6980>;
#<Reg: r15> -> #<Reg: rdi>;
#<Reg: r15> -> #<Var: vecinit6982>;
#<Reg: r15> -> #<Reg: r10>;
#<Reg: r15> -> #<Var: _6986>;
#<Var: _6986> -> #<Var: vecinit6964>;
#<Var: _6986> -> #<Var: alloc6981>;
#<Var: _6986> -> #<Reg: r15>;
#<Var: _6986> -> #<Var: vecinit6984>;
#<Var: _6986> -> #<Var: vecinit6965>;
#<Var: alloc6963> -> #<Var: _6968>;
#<Var: alloc6963> -> #<Var: _6970>;
#<Var: alloc6963> -> #<Var: vecinit6964>;
#<Var: alloc6963> -> #<Var: vecinit6966>;
#<Var: alloc6963> -> #<Reg: r11>;
#<Var: alloc6963> -> #<Var: _6971>;
#<Var: alloc6963> -> #<Var: _6969>;
#<Var: alloc6963> -> #<Var: vecinit6967>;
#<Var: alloc6963> -> #<Var: vecinit6965>;
#<Var: vecinit6965> -> #<Var: tmp6999>;
#<Var: vecinit6965> -> #<Var: tmp6998>;
#<Var: vecinit6965> -> #<Var: _6978>;
#<Var: vecinit6965> -> #<Var: vecinit6974>;
#<Var: vecinit6965> -> #<Var: alloc6973>;
#<Var: vecinit6965> -> #<Var: tmp6991>;
#<Var: vecinit6965> -> #<Var: vecinit6964>;
#<Var: vecinit6965> -> #<Var: vecinit6966>;
#<Var: vecinit6965> -> #<Reg: rcx>;
#<Var: vecinit6965> -> #<Var: tmp6992>;
#<Var: vecinit6965> -> #<Var: alloc6981>;
#<Var: vecinit6965> -> #<Var: vecinit6976>;
#<Var: vecinit6965> -> #<Var: tmp6994>;
#<Var: vecinit6965> -> #<Reg: rsi>;
#<Var: vecinit6965> -> #<Var: _6988>;
#<Var: vecinit6965> -> #<Var: vecinit6983>;
#<Var: vecinit6965> -> #<Var: _6985>;
#<Var: vecinit6965> -> #<Var: _6987>;
#<Var: vecinit6965> -> #<Reg: rdx>;
#<Var: vecinit6965> -> #<Reg: r8>;
#<Var: vecinit6965> -> #<Var: tmp6997>;
#<Var: vecinit6965> -> #<Var: tmp6993>;
#<Var: vecinit6965> -> #<Reg: r15>;
#<Var: vecinit6965> -> #<Reg: r9>;
#<Var: vecinit6965> -> #<Var: tmp6996>;
#<Var: vecinit6965> -> #<Var: vecinit6975>;
#<Var: vecinit6965> -> #<Reg: r11>;
#<Var: vecinit6965> -> #<Var: _6979>;
#<Var: vecinit6965> -> #<Var: alloc6963>;
#<Var: vecinit6965> -> #<Var: _6972>;
#<Var: vecinit6965> -> #<Var: tmp6990>;
#<Var: vecinit6965> -> #<Var: _6971>;
#<Var: vecinit6965> -> #<Var: vecinit6984>;
#<Var: vecinit6965> -> #<Var: _6977>;
#<Var: vecinit6965> -> #<Var: vecinit6967>;
#<Var: vecinit6965> -> #<Var: tmp6995>;
#<Var: vecinit6965> -> #<Reg: rax>;
#<Var: vecinit6965> -> #<Var: _6980>;
#<Var: vecinit6965> -> #<Reg: rdi>;
#<Var: vecinit6965> -> #<Var: vecinit6982>;
#<Var: vecinit6965> -> #<Reg: r10>;
#<Var: vecinit6965> -> #<Var: _6986>;
#<Reg: r8> -> #<Var: vecinit6974>;
#<Reg: r8> -> #<Var: vecinit6964>;
#<Reg: r8> -> #<Var: vecinit6966>;
#<Reg: r8> -> #<Var: vecinit6976>;
#<Reg: r8> -> #<Var: vecinit6983>;
#<Reg: r8> -> #<Reg: r15>;
#<Reg: r8> -> #<Var: vecinit6975>;
#<Reg: r8> -> #<Var: vecinit6984>;
#<Reg: r8> -> #<Var: vecinit6967>;
#<Reg: r8> -> #<Var: vecinit6965>;
#<Reg: r8> -> #<Var: vecinit6982>;
#<Reg: r10> -> #<Var: vecinit6974>;
#<Reg: r10> -> #<Var: vecinit6964>;
#<Reg: r10> -> #<Var: vecinit6966>;
#<Reg: r10> -> #<Var: vecinit6976>;
#<Reg: r10> -> #<Var: vecinit6983>;
#<Reg: r10> -> #<Reg: r15>;
#<Reg: r10> -> #<Var: vecinit6975>;
#<Reg: r10> -> #<Var: vecinit6984>;
#<Reg: r10> -> #<Var: vecinit6967>;
#<Reg: r10> -> #<Var: vecinit6965>;
#<Reg: r10> -> #<Var: vecinit6982>;
#<Var: _6970> -> #<Var: vecinit6966>;
#<Var: _6970> -> #<Var: alloc6963>;
#<Var: _6970> -> #<Var: vecinit6967>;
#<Var: _6985> -> #<Var: vecinit6964>;
#<Var: _6985> -> #<Var: alloc6981>;
#<Var: _6985> -> #<Reg: r15>;
#<Var: _6985> -> #<Var: vecinit6965>;
#<Reg: r13> -> #<Var: vecinit6966>;
#<Var: vecinit6974> -> #<Var: alloc6973>;
#<Var: vecinit6974> -> #<Var: vecinit6964>;
#<Var: vecinit6974> -> #<Var: vecinit6966>;
#<Var: vecinit6974> -> #<Reg: rcx>;
#<Var: vecinit6974> -> #<Var: vecinit6976>;
#<Var: vecinit6974> -> #<Var: tmp6994>;
#<Var: vecinit6974> -> #<Reg: rsi>;
#<Var: vecinit6974> -> #<Reg: rdx>;
#<Var: vecinit6974> -> #<Reg: r8>;
#<Var: vecinit6974> -> #<Reg: r15>;
#<Var: vecinit6974> -> #<Reg: r9>;
#<Var: vecinit6974> -> #<Var: tmp6996>;
#<Var: vecinit6974> -> #<Var: vecinit6975>;
#<Var: vecinit6974> -> #<Reg: r11>;
#<Var: vecinit6974> -> #<Var: tmp6995>;
#<Var: vecinit6974> -> #<Reg: rax>;
#<Var: vecinit6974> -> #<Var: vecinit6965>;
#<Var: vecinit6974> -> #<Var: _6980>;
#<Var: vecinit6974> -> #<Reg: rdi>;
#<Var: vecinit6974> -> #<Reg: r10>;
#<Var: vecinit6964> -> #<Var: tmp6999>;
#<Var: vecinit6964> -> #<Var: tmp6998>;
#<Var: vecinit6964> -> #<Var: _6978>;
#<Var: vecinit6964> -> #<Var: vecinit6974>;
#<Var: vecinit6964> -> #<Var: alloc6973>;
#<Var: vecinit6964> -> #<Var: tmp6991>;
#<Var: vecinit6964> -> #<Var: vecinit6966>;
#<Var: vecinit6964> -> #<Reg: rcx>;
#<Var: vecinit6964> -> #<Var: tmp6992>;
#<Var: vecinit6964> -> #<Var: alloc6981>;
#<Var: vecinit6964> -> #<Var: vecinit6976>;
#<Var: vecinit6964> -> #<Var: tmp6994>;
#<Var: vecinit6964> -> #<Reg: rsi>;
#<Var: vecinit6964> -> #<Var: _6988>;
#<Var: vecinit6964> -> #<Var: vecinit6983>;
#<Var: vecinit6964> -> #<Var: _6985>;
#<Var: vecinit6964> -> #<Var: _6987>;
#<Var: vecinit6964> -> #<Reg: rdx>;
#<Var: vecinit6964> -> #<Reg: r8>;
#<Var: vecinit6964> -> #<Var: tmp6997>;
#<Var: vecinit6964> -> #<Var: tmp6993>;
#<Var: vecinit6964> -> #<Reg: r15>;
#<Var: vecinit6964> -> #<Reg: r9>;
#<Var: vecinit6964> -> #<Var: tmp6996>;
#<Var: vecinit6964> -> #<Var: vecinit6975>;
#<Var: vecinit6964> -> #<Reg: r11>;
#<Var: vecinit6964> -> #<Var: _6979>;
#<Var: vecinit6964> -> #<Var: alloc6963>;
#<Var: vecinit6964> -> #<Var: _6972>;
#<Var: vecinit6964> -> #<Var: tmp6990>;
#<Var: vecinit6964> -> #<Var: vecinit6984>;
#<Var: vecinit6964> -> #<Var: _6977>;
#<Var: vecinit6964> -> #<Var: vecinit6967>;
#<Var: vecinit6964> -> #<Var: tmp6995>;
#<Var: vecinit6964> -> #<Reg: rax>;
#<Var: vecinit6964> -> #<Var: vecinit6965>;
#<Var: vecinit6964> -> #<Var: _6980>;
#<Var: vecinit6964> -> #<Reg: rdi>;
#<Var: vecinit6964> -> #<Var: vecinit6982>;
#<Var: vecinit6964> -> #<Reg: r10>;
#<Var: vecinit6964> -> #<Var: _6986>;
#<Reg: rdx> -> #<Var: vecinit6974>;
#<Reg: rdx> -> #<Var: vecinit6964>;
#<Reg: rdx> -> #<Var: vecinit6966>;
#<Reg: rdx> -> #<Var: vecinit6976>;
#<Reg: rdx> -> #<Var: vecinit6983>;
#<Reg: rdx> -> #<Reg: r15>;
#<Reg: rdx> -> #<Var: vecinit6975>;
#<Reg: rdx> -> #<Var: vecinit6984>;
#<Reg: rdx> -> #<Var: vecinit6967>;
#<Reg: rdx> -> #<Var: vecinit6965>;
#<Reg: rdx> -> #<Var: vecinit6982>;
#<Var: vecinit6983> -> #<Var: tmp6991>;
#<Var: vecinit6983> -> #<Var: vecinit6964>;
#<Var: vecinit6983> -> #<Reg: rcx>;
#<Var: vecinit6983> -> #<Var: tmp6992>;
#<Var: vecinit6983> -> #<Var: alloc6981>;
#<Var: vecinit6983> -> #<Reg: rsi>;
#<Var: vecinit6983> -> #<Var: _6988>;
#<Var: vecinit6983> -> #<Var: _6987>;
#<Var: vecinit6983> -> #<Reg: rdx>;
#<Var: vecinit6983> -> #<Reg: r8>;
#<Var: vecinit6983> -> #<Reg: r15>;
#<Var: vecinit6983> -> #<Reg: r9>;
#<Var: vecinit6983> -> #<Reg: r11>;
#<Var: vecinit6983> -> #<Var: tmp6990>;
#<Var: vecinit6983> -> #<Var: vecinit6984>;
#<Var: vecinit6983> -> #<Reg: rax>;
#<Var: vecinit6983> -> #<Var: vecinit6965>;
#<Var: vecinit6983> -> #<Reg: rdi>;
#<Var: vecinit6983> -> #<Var: vecinit6982>;
#<Var: vecinit6983> -> #<Reg: r10>;
#<Var: _6969> -> #<Var: alloc6963>;
#<Var: _6969> -> #<Var: vecinit6967>;
#<Reg: rdi> -> #<Var: vecinit6974>;
#<Reg: rdi> -> #<Var: vecinit6964>;
#<Reg: rdi> -> #<Var: vecinit6966>;
#<Reg: rdi> -> #<Var: vecinit6976>;
#<Reg: rdi> -> #<Reg: rsi>;
#<Reg: rdi> -> #<Var: vecinit6983>;
#<Reg: rdi> -> #<Reg: r15>;
#<Reg: rdi> -> #<Var: vecinit6975>;
#<Reg: rdi> -> #<Var: vecinit6984>;
#<Reg: rdi> -> #<Var: vecinit6967>;
#<Reg: rdi> -> #<Var: vecinit6965>;
#<Reg: rdi> -> #<Var: vecinit6982>;
#<Var: tmp6993> -> #<Var: vecinit6964>;
#<Var: tmp6993> -> #<Var: vecinit6966>;
#<Var: tmp6993> -> #<Reg: r15>;
#<Var: tmp6993> -> #<Var: vecinit6965>;
#<Var: _6980> -> #<Var: vecinit6974>;
#<Var: _6980> -> #<Var: vecinit6964>;
#<Var: _6980> -> #<Var: vecinit6966>;
#<Var: _6980> -> #<Var: vecinit6976>;
#<Var: _6980> -> #<Reg: r15>;
#<Var: _6980> -> #<Var: vecinit6975>;
#<Var: _6980> -> #<Var: vecinit6965>;
#<Var: tmp6998> -> #<Var: vecinit6964>;
#<Var: tmp6998> -> #<Var: vecinit6966>;
#<Var: tmp6998> -> #<Reg: r15>;
#<Var: tmp6998> -> #<Var: vecinit6967>;
#<Var: tmp6998> -> #<Var: vecinit6965>;
#<Var: vecinit6975> -> #<Var: vecinit6974>;
#<Var: vecinit6975> -> #<Var: alloc6973>;
#<Var: vecinit6975> -> #<Var: vecinit6964>;
#<Var: vecinit6975> -> #<Var: vecinit6966>;
#<Var: vecinit6975> -> #<Reg: rcx>;
#<Var: vecinit6975> -> #<Var: vecinit6976>;
#<Var: vecinit6975> -> #<Var: tmp6994>;
#<Var: vecinit6975> -> #<Reg: rsi>;
#<Var: vecinit6975> -> #<Reg: rdx>;
#<Var: vecinit6975> -> #<Reg: r8>;
#<Var: vecinit6975> -> #<Reg: r15>;
#<Var: vecinit6975> -> #<Reg: r9>;
#<Var: vecinit6975> -> #<Var: tmp6996>;
#<Var: vecinit6975> -> #<Reg: r11>;
#<Var: vecinit6975> -> #<Var: _6979>;
#<Var: vecinit6975> -> #<Var: tmp6995>;
#<Var: vecinit6975> -> #<Reg: rax>;
#<Var: vecinit6975> -> #<Var: vecinit6965>;
#<Var: vecinit6975> -> #<Var: _6980>;
#<Var: vecinit6975> -> #<Reg: rdi>;
#<Var: vecinit6975> -> #<Reg: r10>;
#<Reg: r14> -> #<Var: vecinit6966>;
#<Var: alloc6973> -> #<Var: _6978>;
#<Var: alloc6973> -> #<Var: vecinit6974>;
#<Var: alloc6973> -> #<Var: vecinit6964>;
#<Var: alloc6973> -> #<Var: vecinit6966>;
#<Var: alloc6973> -> #<Var: vecinit6976>;
#<Var: alloc6973> -> #<Reg: r15>;
#<Var: alloc6973> -> #<Var: vecinit6975>;
#<Var: alloc6973> -> #<Reg: r11>;
#<Var: alloc6973> -> #<Var: _6979>;
#<Var: alloc6973> -> #<Var: _6977>;
#<Var: alloc6973> -> #<Var: vecinit6965>;
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block7000
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r11)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963))
      (set (Var 'alloc6963))
      (set (Var 'tmp6989))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 521) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6963)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6964) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6971)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6965) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6970)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6966) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6969)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6967) (Deref 'r11 32)))
     (Instr 'movq (list (Imm 0) (Var '_6968)))
     (Instr 'movq (list (Var 'alloc6963) (Var 'tmp6989)))
     (Instr 'movq (list (Var 'tmp6989) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7002
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'rsi)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 40) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7000))))
  (cons
   'block7001
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6972))) (Jmp 'block7000))))
  (cons
   'block7003
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6993)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6998)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6999)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6973)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6974) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6979)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6975) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6978)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6976) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6977)))
     (Instr 'movq (list (Var 'alloc6973) (Var 'tmp6993)))
     (Instr 'movq (list (Var 'tmp6993) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Var 'vecinit6967)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6998)))
     (Instr 'movq (list (Var 'tmp6998) (Var 'tmp6997)))
     (Instr 'addq (list (Imm 40) (Var 'tmp6997)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6999)))
     (Instr 'cmpq (list (Var 'tmp6999) (Var 'tmp6997)))
     (JmpIf 'l 'block7001)
     (Jmp 'block7002))))
  (cons
   'block7005
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'rsi)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7003))))
  (cons
   'block7004
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6980))) (Jmp 'block7003))))
  (cons
   'block7006
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'vecinit6966) (Reg 'r15) (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'tmp6995)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'tmp6996)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6981)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6982) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6987)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6983) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6986)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6984) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6985)))
     (Instr 'movq (list (Var 'alloc6981) (Var 'vecinit6966)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6974)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6975)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit6976)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6995)))
     (Instr 'movq (list (Var 'tmp6995) (Var 'tmp6994)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6994)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6996)))
     (Instr 'cmpq (list (Var 'tmp6996) (Var 'tmp6994)))
     (JmpIf 'l 'block7004)
     (Jmp 'block7005))))
  (cons
   'block7008
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Reg 'rsi)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7006))))
  (cons
   'block7007
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list (Instr 'movq (list (Imm 0) (Var '_6988))) (Jmp 'block7006))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6964) (Reg 'r15))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965) (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'tmp6991)
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'tmp6992)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6964)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6965)))
     (Instr 'movq (list (Imm 4) (Var 'vecinit6982)))
     (Instr 'movq (list (Imm 5) (Var 'vecinit6983)))
     (Instr 'movq (list (Imm 6) (Var 'vecinit6984)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6991)))
     (Instr 'movq (list (Var 'tmp6991) (Var 'tmp6990)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6990)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6992)))
     (Instr 'cmpq (list (Var 'tmp6992) (Var 'tmp6990)))
     (JmpIf 'l 'block7007)
     (Jmp 'block7008))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (_6986 . Void)
    (alloc6973 Vector Integer Integer Integer)
    (tmp6992 . Integer)
    (_6980 . Void)
    (vecinit6965 . Boolean)
    (vecinit6982 . Integer)
    (vecinit6976 . Integer)
    (tmp6991 . Integer)
    (_6970 . Void)
    (_6987 . Void)
    (_6977 . Void)
    (tmp6994 . Integer)
    (tmp6996 . Integer)
    (vecinit6964 . Integer)
    (tmp6989 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (vecinit6975 . Integer)
    (_6971 . Void)
    (tmp6997 . Integer)
    (_6978 . Void)
    (tmp6995 . Integer)
    (vecinit6967 . Integer)
    (alloc6963 Vector Integer Boolean (Vector Integer Integer Integer) Integer)
    (alloc6981 Vector Integer Integer Integer)
    (vecinit6974 . Integer)
    (_6988 . Void)
    (_6979 . Void)
    (tmp6998 . Integer)
    (vecinit6984 . Integer)
    (tmp6999 . Integer)
    (_6968 . Void)
    (tmp6993 Vector Integer Integer Integer)
    (_6985 . Void)
    (_6972 . Void)
    (tmp6990 . Integer)
    (vecinit6966 Vector Integer Integer Integer)
    (vecinit6983 . Integer)
    (_6969 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block7000
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r11)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6966)
       (Var 'alloc6963)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'vecinit6966) (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963) (Var 'vecinit6967))
      (set (Var 'alloc6963))
      (set (Var 'alloc6963))
      (set (Var 'tmp6989))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 521) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6963)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6964) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6971)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6965) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6970)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6966) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6969)))
     (Instr 'movq (list (Var 'alloc6963) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6967) (Deref 'r11 32)))
     (Instr 'movq (list (Imm 0) (Var '_6968)))
     (Instr 'movq (list (Var 'alloc6963) (Var 'tmp6989)))
     (Instr 'movq (list (Var 'tmp6989) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7002
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'rsi)
       (Var 'vecinit6967)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 40) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7000))))
  (cons
   'block7001
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6972))) (Jmp 'block7000))))
  (cons
   'block7003
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'alloc6973)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6993)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6998)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'tmp6999)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'tmp6997)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6967)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6973)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6974) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6979)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6975) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6978)))
     (Instr 'movq (list (Var 'alloc6973) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6976) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6977)))
     (Instr 'movq (list (Var 'alloc6973) (Var 'tmp6993)))
     (Instr 'movq (list (Var 'tmp6993) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 0) (Reg 'r11)))
     (Instr 'sarq (list (Imm 1) (Reg 'r11)))
     (Instr 'andq (list (Imm 63) (Reg 'r11)))
     (Instr 'movq (list (Reg 'r11) (Var 'vecinit6967)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6998)))
     (Instr 'movq (list (Var 'tmp6998) (Var 'tmp6997)))
     (Instr 'addq (list (Imm 40) (Var 'tmp6997)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6999)))
     (Instr 'cmpq (list (Var 'tmp6999) (Var 'tmp6997)))
     (JmpIf 'l 'block7001)
     (Jmp 'block7002))))
  (cons
   'block7005
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'rsi)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965)
       (Reg 'rdi))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7003))))
  (cons
   'block7004
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list (Instr 'movq (list (Imm 0) (Var '_6980))) (Jmp 'block7003))))
  (cons
   'block7006
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6964)
       (Var 'alloc6981)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'alloc6981) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Var 'vecinit6966) (Reg 'r15) (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'tmp6995)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Var 'tmp6994)
       (Reg 'r15)
       (Var 'tmp6996)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))
      (set
       (Var 'vecinit6974)
       (Var 'vecinit6964)
       (Var 'vecinit6966)
       (Var 'vecinit6976)
       (Reg 'r15)
       (Var 'vecinit6975)
       (Var 'vecinit6965))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc6981)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6982) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_6987)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6983) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_6986)))
     (Instr 'movq (list (Var 'alloc6981) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit6984) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_6985)))
     (Instr 'movq (list (Var 'alloc6981) (Var 'vecinit6966)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6974)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit6975)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit6976)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6995)))
     (Instr 'movq (list (Var 'tmp6995) (Var 'tmp6994)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6994)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6996)))
     (Instr 'cmpq (list (Var 'tmp6996) (Var 'tmp6994)))
     (JmpIf 'l 'block7004)
     (Jmp 'block7005))))
  (cons
   'block7008
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Reg 'rsi)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Reg 'rdi)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7006))))
  (cons
   'block7007
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list (Instr 'movq (list (Imm 0) (Var '_6988))) (Jmp 'block7006))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit6964) (Reg 'r15))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965))
      (set (Var 'vecinit6964) (Reg 'r15) (Var 'vecinit6965) (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'tmp6991)
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'tmp6992)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'tmp6990)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))
      (set
       (Var 'vecinit6964)
       (Var 'vecinit6983)
       (Reg 'r15)
       (Var 'vecinit6984)
       (Var 'vecinit6965)
       (Var 'vecinit6982))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit6964)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit6965)))
     (Instr 'movq (list (Imm 4) (Var 'vecinit6982)))
     (Instr 'movq (list (Imm 5) (Var 'vecinit6983)))
     (Instr 'movq (list (Imm 6) (Var 'vecinit6984)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp6991)))
     (Instr 'movq (list (Var 'tmp6991) (Var 'tmp6990)))
     (Instr 'addq (list (Imm 32) (Var 'tmp6990)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp6992)))
     (Instr 'cmpq (list (Var 'tmp6992) (Var 'tmp6990)))
     (JmpIf 'l 'block7007)
     (Jmp 'block7008))))))


output:  @ utilities.rkt:2042
result:
4


testing @ utilities.rkt:2016
test-name:
"vectors_test_5"

expected-result:
4


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(Program
 '()
 (Let
  'v
  (HasType
   (Prim 'vector (list (Int 1) (Int 2) (Int 42)))
   '(Vector Integer Integer Integer))
  (Let
   'w
   (HasType
    (Prim
     'vector
     (list (Bool #t) (Prim 'vector-ref (list (Var 'v) (Int 2))) (Int 3)))
    '(Vector Boolean Integer Integer))
   (Prim 'vector-ref (list (Var 'w) (Int 1))))))


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v
  (HasType
   (Prim 'vector (list (Int 1) (Int 2) (Int 42)))
   '(Vector Integer Integer Integer))
  (Let
   'w
   (HasType
    (Prim
     'vector
     (list (Bool #t) (Prim 'vector-ref (list (Var 'v) (Int 2))) (Int 3)))
    '(Vector Boolean Integer Integer))
   (Prim 'vector-ref (list (Var 'w) (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v
  (HasType
   (Prim 'vector (list (Int 1) (Int 2) (Int 42)))
   '(Vector Integer Integer Integer))
  (Let
   'w
   (HasType
    (Prim
     'vector
     (list (Bool #t) (Prim 'vector-ref (list (Var 'v) (Int 2))) (Int 3)))
    '(Vector Boolean Integer Integer))
   (Prim 'vector-ref (list (Var 'w) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v7012
  (HasType
   (Prim 'vector (list (Int 1) (Int 2) (Int 42)))
   '(Vector Integer Integer Integer))
  (Let
   'w7013
   (HasType
    (Prim
     'vector
     (list (Bool #t) (Prim 'vector-ref (list (Var 'v7012) (Int 2))) (Int 3)))
    '(Vector Boolean Integer Integer))
   (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v7012
  (HasType
   (Prim 'vector (list (Int 1) (Int 2) (Int 42)))
   '(Vector Integer Integer Integer))
  (Let
   'w7013
   (HasType
    (Prim
     'vector
     (list (Bool #t) (Prim 'vector-ref (list (Var 'v7012) (Int 2))) (Int 3)))
    '(Vector Boolean Integer Integer))
   (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v7012
  (Let
   'vecinit7015
   (Int 1)
   (Let
    'vecinit7016
    (Int 2)
    (Let
     'vecinit7017
     (Int 42)
     (Let
      '_7021
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 32))
      (Let
       'alloc7014
       (allocate 3 (Vector Integer Integer Integer))
       (Let
        '_7020
        (Prim 'vector-set! (list (Var 'alloc7014) (Int 0) (Var 'vecinit7015)))
        (Let
         '_7019
         (Prim 'vector-set! (list (Var 'alloc7014) (Int 1) (Var 'vecinit7016)))
         (Let
          '_7018
          (Prim
           'vector-set!
           (list (Var 'alloc7014) (Int 2) (Var 'vecinit7017)))
          (Var 'alloc7014)))))))))
  (Let
   'w7013
   (Let
    'vecinit7023
    (Bool #t)
    (Let
     'vecinit7024
     (Prim 'vector-ref (list (Var 'v7012) (Int 2)))
     (Let
      'vecinit7025
      (Int 3)
      (Let
       '_7029
       (If
        (Prim
         '<
         (list
          (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
          (GlobalValue 'fromspace_end)))
        (Void)
        (collect 32))
       (Let
        'alloc7022
        (allocate 3 (Vector Boolean Integer Integer))
        (Let
         '_7028
         (Prim 'vector-set! (list (Var 'alloc7022) (Int 0) (Var 'vecinit7023)))
         (Let
          '_7027
          (Prim
           'vector-set!
           (list (Var 'alloc7022) (Int 1) (Var 'vecinit7024)))
          (Let
           '_7026
           (Prim
            'vector-set!
            (list (Var 'alloc7022) (Int 2) (Var 'vecinit7025)))
           (Var 'alloc7022)))))))))
   (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v7012
  (Let
   'vecinit7015
   (Int 1)
   (Let
    'vecinit7016
    (Int 2)
    (Let
     'vecinit7017
     (Int 42)
     (Let
      '_7021
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 32))
      (Let
       'alloc7014
       (allocate 3 (Vector Integer Integer Integer))
       (Let
        '_7020
        (Prim 'vector-set! (list (Var 'alloc7014) (Int 0) (Var 'vecinit7015)))
        (Let
         '_7019
         (Prim 'vector-set! (list (Var 'alloc7014) (Int 1) (Var 'vecinit7016)))
         (Let
          '_7018
          (Prim
           'vector-set!
           (list (Var 'alloc7014) (Int 2) (Var 'vecinit7017)))
          (Var 'alloc7014)))))))))
  (Let
   'w7013
   (Let
    'vecinit7023
    (Bool #t)
    (Let
     'vecinit7024
     (Prim 'vector-ref (list (Var 'v7012) (Int 2)))
     (Let
      'vecinit7025
      (Int 3)
      (Let
       '_7029
       (If
        (Prim
         '<
         (list
          (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
          (GlobalValue 'fromspace_end)))
        (Void)
        (collect 32))
       (Let
        'alloc7022
        (allocate 3 (Vector Boolean Integer Integer))
        (Let
         '_7028
         (Prim 'vector-set! (list (Var 'alloc7022) (Int 0) (Var 'vecinit7023)))
         (Let
          '_7027
          (Prim
           'vector-set!
           (list (Var 'alloc7022) (Int 1) (Var 'vecinit7024)))
          (Let
           '_7026
           (Prim
            'vector-set!
            (list (Var 'alloc7022) (Int 2) (Var 'vecinit7025)))
           (Var 'alloc7022)))))))))
   (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(Program
 '()
 (Let
  'v7012
  (Let
   'vecinit7015
   (Int 1)
   (Let
    'vecinit7016
    (Int 2)
    (Let
     'vecinit7017
     (Int 42)
     (Let
      '_7021
      (If
       (Let
        'tmp7030
        (Let
         'tmp7031
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp7031) (Int 32))))
        (Let
         'tmp7032
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp7030) (Var 'tmp7032)))))
       (Void)
       (collect 32))
      (Let
       'alloc7014
       (allocate 3 (Vector Integer Integer Integer))
       (Let
        '_7020
        (Prim 'vector-set! (list (Var 'alloc7014) (Int 0) (Var 'vecinit7015)))
        (Let
         '_7019
         (Prim 'vector-set! (list (Var 'alloc7014) (Int 1) (Var 'vecinit7016)))
         (Let
          '_7018
          (Prim
           'vector-set!
           (list (Var 'alloc7014) (Int 2) (Var 'vecinit7017)))
          (Var 'alloc7014)))))))))
  (Let
   'w7013
   (Let
    'vecinit7023
    (Bool #t)
    (Let
     'vecinit7024
     (Prim 'vector-ref (list (Var 'v7012) (Int 2)))
     (Let
      'vecinit7025
      (Int 3)
      (Let
       '_7029
       (If
        (Let
         'tmp7033
         (Let
          'tmp7034
          (GlobalValue 'free_ptr)
          (Prim '+ (list (Var 'tmp7034) (Int 32))))
         (Let
          'tmp7035
          (GlobalValue 'fromspace_end)
          (Prim '< (list (Var 'tmp7033) (Var 'tmp7035)))))
        (Void)
        (collect 32))
       (Let
        'alloc7022
        (allocate 3 (Vector Boolean Integer Integer))
        (Let
         '_7028
         (Prim 'vector-set! (list (Var 'alloc7022) (Int 0) (Var 'vecinit7023)))
         (Let
          '_7027
          (Prim
           'vector-set!
           (list (Var 'alloc7022) (Int 1) (Var 'vecinit7024)))
          (Let
           '_7026
           (Prim
            'vector-set!
            (list (Var 'alloc7022) (Int 2) (Var 'vecinit7025)))
           (Var 'alloc7022)))))))))
   (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(Program
 '()
 (Let
  'v7012
  (Let
   'vecinit7015
   (Int 1)
   (Let
    'vecinit7016
    (Int 2)
    (Let
     'vecinit7017
     (Int 42)
     (Let
      '_7021
      (If
       (Let
        'tmp7030
        (Let
         'tmp7031
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp7031) (Int 32))))
        (Let
         'tmp7032
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp7030) (Var 'tmp7032)))))
       (Void)
       (collect 32))
      (Let
       'alloc7014
       (allocate 3 (Vector Integer Integer Integer))
       (Let
        '_7020
        (Prim 'vector-set! (list (Var 'alloc7014) (Int 0) (Var 'vecinit7015)))
        (Let
         '_7019
         (Prim 'vector-set! (list (Var 'alloc7014) (Int 1) (Var 'vecinit7016)))
         (Let
          '_7018
          (Prim
           'vector-set!
           (list (Var 'alloc7014) (Int 2) (Var 'vecinit7017)))
          (Var 'alloc7014)))))))))
  (Let
   'w7013
   (Let
    'vecinit7023
    (Bool #t)
    (Let
     'vecinit7024
     (Prim 'vector-ref (list (Var 'v7012) (Int 2)))
     (Let
      'vecinit7025
      (Int 3)
      (Let
       '_7029
       (If
        (Let
         'tmp7033
         (Let
          'tmp7034
          (GlobalValue 'free_ptr)
          (Prim '+ (list (Var 'tmp7034) (Int 32))))
         (Let
          'tmp7035
          (GlobalValue 'fromspace_end)
          (Prim '< (list (Var 'tmp7033) (Var 'tmp7035)))))
        (Void)
        (collect 32))
       (Let
        'alloc7022
        (allocate 3 (Vector Boolean Integer Integer))
        (Let
         '_7028
         (Prim 'vector-set! (list (Var 'alloc7022) (Int 0) (Var 'vecinit7023)))
         (Let
          '_7027
          (Prim
           'vector-set!
           (list (Var 'alloc7022) (Int 1) (Var 'vecinit7024)))
          (Let
           '_7026
           (Prim
            'vector-set!
            (list (Var 'alloc7022) (Int 2) (Var 'vecinit7025)))
           (Var 'alloc7022)))))))))
   (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit7015) (Int 1))
    (Seq
     (Assign (Var 'vecinit7016) (Int 2))
     (Seq
      (Assign (Var 'vecinit7017) (Int 42))
      (Seq
       (Assign (Var 'tmp7031) (GlobalValue 'free_ptr))
       (Seq
        (Assign (Var 'tmp7030) (Prim '+ (list (Var 'tmp7031) (Int 32))))
        (Seq
         (Assign (Var 'tmp7032) (GlobalValue 'fromspace_end))
         (IfStmt
          (Prim '< (list (Var 'tmp7030) (Var 'tmp7032)))
          (Goto 'block7040)
          (Goto 'block7041)))))))))
  (cons 'block7041 (Seq (collect 32) (Goto 'block7039)))
  (cons 'block7040 (Seq (Assign (Var '_7021) (Void)) (Goto 'block7039)))
  (cons
   'block7039
   (Seq
    (Assign (Var 'alloc7014) (allocate 3 (Vector Integer Integer Integer)))
    (Seq
     (Assign
      (Var '_7020)
      (Prim 'vector-set! (list (Var 'alloc7014) (Int 0) (Var 'vecinit7015))))
     (Seq
      (Assign
       (Var '_7019)
       (Prim 'vector-set! (list (Var 'alloc7014) (Int 1) (Var 'vecinit7016))))
      (Seq
       (Assign
        (Var '_7018)
        (Prim 'vector-set! (list (Var 'alloc7014) (Int 2) (Var 'vecinit7017))))
       (Seq
        (Assign (Var 'v7012) (Var 'alloc7014))
        (Seq
         (Assign (Var 'vecinit7023) (Bool #t))
         (Seq
          (Assign
           (Var 'vecinit7024)
           (Prim 'vector-ref (list (Var 'v7012) (Int 2))))
          (Seq
           (Assign (Var 'vecinit7025) (Int 3))
           (Seq
            (Assign (Var 'tmp7034) (GlobalValue 'free_ptr))
            (Seq
             (Assign (Var 'tmp7033) (Prim '+ (list (Var 'tmp7034) (Int 32))))
             (Seq
              (Assign (Var 'tmp7035) (GlobalValue 'fromspace_end))
              (IfStmt
               (Prim '< (list (Var 'tmp7033) (Var 'tmp7035)))
               (Goto 'block7037)
               (Goto 'block7038))))))))))))))
  (cons 'block7038 (Seq (collect 32) (Goto 'block7036)))
  (cons 'block7037 (Seq (Assign (Var '_7029) (Void)) (Goto 'block7036)))
  (cons
   'block7036
   (Seq
    (Assign (Var 'alloc7022) (allocate 3 (Vector Boolean Integer Integer)))
    (Seq
     (Assign
      (Var '_7028)
      (Prim 'vector-set! (list (Var 'alloc7022) (Int 0) (Var 'vecinit7023))))
     (Seq
      (Assign
       (Var '_7027)
       (Prim 'vector-set! (list (Var 'alloc7022) (Int 1) (Var 'vecinit7024))))
      (Seq
       (Assign
        (Var '_7026)
        (Prim 'vector-set! (list (Var 'alloc7022) (Int 2) (Var 'vecinit7025))))
       (Seq
        (Assign (Var 'w7013) (Var 'alloc7022))
        (Return (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(CProgram
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'vecinit7015) (Int 1))
    (Seq
     (Assign (Var 'vecinit7016) (Int 2))
     (Seq
      (Assign (Var 'vecinit7017) (Int 42))
      (Seq
       (Assign (Var 'tmp7031) (GlobalValue 'free_ptr))
       (Seq
        (Assign (Var 'tmp7030) (Prim '+ (list (Var 'tmp7031) (Int 32))))
        (Seq
         (Assign (Var 'tmp7032) (GlobalValue 'fromspace_end))
         (IfStmt
          (Prim '< (list (Var 'tmp7030) (Var 'tmp7032)))
          (Goto 'block7040)
          (Goto 'block7041)))))))))
  (cons 'block7041 (Seq (collect 32) (Goto 'block7039)))
  (cons 'block7040 (Seq (Assign (Var '_7021) (Void)) (Goto 'block7039)))
  (cons
   'block7039
   (Seq
    (Assign (Var 'alloc7014) (allocate 3 (Vector Integer Integer Integer)))
    (Seq
     (Assign
      (Var '_7020)
      (Prim 'vector-set! (list (Var 'alloc7014) (Int 0) (Var 'vecinit7015))))
     (Seq
      (Assign
       (Var '_7019)
       (Prim 'vector-set! (list (Var 'alloc7014) (Int 1) (Var 'vecinit7016))))
      (Seq
       (Assign
        (Var '_7018)
        (Prim 'vector-set! (list (Var 'alloc7014) (Int 2) (Var 'vecinit7017))))
       (Seq
        (Assign (Var 'v7012) (Var 'alloc7014))
        (Seq
         (Assign (Var 'vecinit7023) (Bool #t))
         (Seq
          (Assign
           (Var 'vecinit7024)
           (Prim 'vector-ref (list (Var 'v7012) (Int 2))))
          (Seq
           (Assign (Var 'vecinit7025) (Int 3))
           (Seq
            (Assign (Var 'tmp7034) (GlobalValue 'free_ptr))
            (Seq
             (Assign (Var 'tmp7033) (Prim '+ (list (Var 'tmp7034) (Int 32))))
             (Seq
              (Assign (Var 'tmp7035) (GlobalValue 'fromspace_end))
              (IfStmt
               (Prim '< (list (Var 'tmp7033) (Var 'tmp7035)))
               (Goto 'block7037)
               (Goto 'block7038))))))))))))))
  (cons 'block7038 (Seq (collect 32) (Goto 'block7036)))
  (cons 'block7037 (Seq (Assign (Var '_7029) (Void)) (Goto 'block7036)))
  (cons
   'block7036
   (Seq
    (Assign (Var 'alloc7022) (allocate 3 (Vector Boolean Integer Integer)))
    (Seq
     (Assign
      (Var '_7028)
      (Prim 'vector-set! (list (Var 'alloc7022) (Int 0) (Var 'vecinit7023))))
     (Seq
      (Assign
       (Var '_7027)
       (Prim 'vector-set! (list (Var 'alloc7022) (Int 1) (Var 'vecinit7024))))
      (Seq
       (Assign
        (Var '_7026)
        (Prim 'vector-set! (list (Var 'alloc7022) (Int 2) (Var 'vecinit7025))))
       (Seq
        (Assign (Var 'w7013) (Var 'alloc7022))
        (Return (Prim 'vector-ref (list (Var 'w7013) (Int 1))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit7015)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit7016)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit7017)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7031)))
     (Instr 'movq (list (Var 'tmp7031) (Var 'tmp7030)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7030)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7032)))
     (Instr 'cmpq (list (Var 'tmp7032) (Var 'tmp7030)))
     (JmpIf 'l 'block7040)
     (Jmp 'block7041))))
  (cons
   'block7041
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7039))))
  (cons
   'block7040
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_7021))) (Jmp 'block7039))))
  (cons
   'block7039
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7014)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7015) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7020)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7016) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7019)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7017) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7018)))
     (Instr 'movq (list (Var 'alloc7014) (Var 'v7012)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit7023)))
     (Instr 'movq (list (Var 'v7012) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 24) (Var 'vecinit7024)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit7025)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7034)))
     (Instr 'movq (list (Var 'tmp7034) (Var 'tmp7033)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7033)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7035)))
     (Instr 'cmpq (list (Var 'tmp7035) (Var 'tmp7033)))
     (JmpIf 'l 'block7037)
     (Jmp 'block7038))))
  (cons
   'block7038
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7036))))
  (cons
   'block7037
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_7029))) (Jmp 'block7036))))
  (cons
   'block7036
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7022)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7023) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7028)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7024) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7027)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7025) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7026)))
     (Instr 'movq (list (Var 'alloc7022) (Var 'w7013)))
     (Instr 'movq (list (Var 'w7013) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit7015)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit7016)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit7017)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7031)))
     (Instr 'movq (list (Var 'tmp7031) (Var 'tmp7030)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7030)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7032)))
     (Instr 'cmpq (list (Var 'tmp7032) (Var 'tmp7030)))
     (JmpIf 'l 'block7040)
     (Jmp 'block7041))))
  (cons
   'block7041
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7039))))
  (cons
   'block7040
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_7021))) (Jmp 'block7039))))
  (cons
   'block7039
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7014)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7015) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7020)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7016) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7019)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7017) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7018)))
     (Instr 'movq (list (Var 'alloc7014) (Var 'v7012)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit7023)))
     (Instr 'movq (list (Var 'v7012) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 24) (Var 'vecinit7024)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit7025)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7034)))
     (Instr 'movq (list (Var 'tmp7034) (Var 'tmp7033)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7033)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7035)))
     (Instr 'cmpq (list (Var 'tmp7035) (Var 'tmp7033)))
     (JmpIf 'l 'block7037)
     (Jmp 'block7038))))
  (cons
   'block7038
   (Block
    '()
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7036))))
  (cons
   'block7037
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var '_7029))) (Jmp 'block7036))))
  (cons
   'block7036
   (Block
    '()
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7022)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7023) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7028)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7024) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7027)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7025) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7026)))
     (Instr 'movq (list (Var 'alloc7022) (Var 'w7013)))
     (Instr 'movq (list (Var 'w7013) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void)))
 (list
  (cons
   'block7036
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r11) (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022))
      (set (Var 'alloc7022))
      (set (Var 'w7013))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7022)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7023) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7028)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7024) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7027)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7025) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7026)))
     (Instr 'movq (list (Var 'alloc7022) (Var 'w7013)))
     (Instr 'movq (list (Var 'w7013) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7037
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list (Instr 'movq (list (Imm 0) (Var '_7029))) (Jmp 'block7036))))
  (cons
   'block7038
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'rdi) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Reg 'rsi)
       (Var 'vecinit7024)
       (Reg 'rdi)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7036))))
  (cons
   'block7039
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15) (Var 'vecinit7023))
      (set (Reg 'r15) (Reg 'r11) (Var 'vecinit7023))
      (set (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'tmp7034)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'tmp7035)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7014)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7015) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7020)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7016) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7019)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7017) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7018)))
     (Instr 'movq (list (Var 'alloc7014) (Var 'v7012)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit7023)))
     (Instr 'movq (list (Var 'v7012) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 24) (Var 'vecinit7024)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit7025)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7034)))
     (Instr 'movq (list (Var 'tmp7034) (Var 'tmp7033)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7033)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7035)))
     (Instr 'cmpq (list (Var 'tmp7035) (Var 'tmp7033)))
     (JmpIf 'l 'block7037)
     (Jmp 'block7038))))
  (cons
   'block7041
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set
       (Reg 'rsi)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7039))))
  (cons
   'block7040
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list (Instr 'movq (list (Imm 0) (Var '_7021))) (Jmp 'block7039))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7015) (Reg 'r15))
      (set (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'tmp7031)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'tmp7032)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit7015)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit7016)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit7017)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7031)))
     (Instr 'movq (list (Var 'tmp7031) (Var 'tmp7030)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7030)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7032)))
     (Instr 'cmpq (list (Var 'tmp7032) (Var 'tmp7030)))
     (JmpIf 'l 'block7040)
     (Jmp 'block7041))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void)))
 (list
  (cons
   'block7036
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r11) (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022))
      (set (Var 'alloc7022))
      (set (Var 'w7013))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7022)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7023) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7028)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7024) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7027)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7025) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7026)))
     (Instr 'movq (list (Var 'alloc7022) (Var 'w7013)))
     (Instr 'movq (list (Var 'w7013) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7037
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list (Instr 'movq (list (Imm 0) (Var '_7029))) (Jmp 'block7036))))
  (cons
   'block7038
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'rdi) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Reg 'rsi)
       (Var 'vecinit7024)
       (Reg 'rdi)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7036))))
  (cons
   'block7039
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15) (Var 'vecinit7023))
      (set (Reg 'r15) (Reg 'r11) (Var 'vecinit7023))
      (set (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'tmp7034)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'tmp7035)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7014)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7015) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7020)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7016) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7019)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7017) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7018)))
     (Instr 'movq (list (Var 'alloc7014) (Var 'v7012)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit7023)))
     (Instr 'movq (list (Var 'v7012) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 24) (Var 'vecinit7024)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit7025)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7034)))
     (Instr 'movq (list (Var 'tmp7034) (Var 'tmp7033)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7033)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7035)))
     (Instr 'cmpq (list (Var 'tmp7035) (Var 'tmp7033)))
     (JmpIf 'l 'block7037)
     (Jmp 'block7038))))
  (cons
   'block7041
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set
       (Reg 'rsi)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7039))))
  (cons
   'block7040
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list (Instr 'movq (list (Imm 0) (Var '_7021))) (Jmp 'block7039))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7015) (Reg 'r15))
      (set (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'tmp7031)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'tmp7032)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit7015)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit7016)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit7017)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7031)))
     (Instr 'movq (list (Var 'tmp7031) (Var 'tmp7030)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7030)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7032)))
     (Instr 'cmpq (list (Var 'tmp7032) (Var 'tmp7030)))
     (JmpIf 'l 'block7040)
     (Jmp 'block7041))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2027

1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Imm: 7> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: r11> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc7022>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Var: alloc7022> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Var: vecinit7023> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025> #<Var: vecinit7024>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7028>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025> #<Var: vecinit7024>>
1 instruction: #<Instr: movq (#<Var: alloc7022> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025> #<Var: vecinit7024>>
1 instruction: #<Instr: movq (#<Var: vecinit7024> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7027>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025>>
1 instruction: #<Instr: movq (#<Var: alloc7022> #<Reg: r11>)>
2 live-set: #<set: #<Var: alloc7022> #<Var: vecinit7025>>
1 instruction: #<Instr: movq (#<Var: vecinit7025> #<Deref: r11 24>)>
2 live-set: #<set: #<Var: alloc7022>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7026>)>
2 live-set: #<set: #<Var: alloc7022>>
1 instruction: #<Instr: movq (#<Var: alloc7022> #<Var: w7013>)>
2 live-set: #<set: #<Var: w7013>>
1 instruction: #<Instr: movq (#<Var: w7013> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r11>>
1 instruction: #<Instr: movq (#<Deref: r11 16> #<Reg: rax>)>
2 live-set: #<set:>
1 instruction: #<Jmp: conclusion>
2 live-set: #<set:>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7029>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Jmp: block7036>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: rdi> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Imm: 32> #<Reg: rsi>)>
2 live-set: #<set: #<Var: vecinit7025> #<Reg: rsi> #<Var: vecinit7024> #<Reg: rdi> #<Var: vecinit7023>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Jmp: block7036>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Global: free_ptr>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Imm: 7> #<Deref: r11 0>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Reg: r11> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Reg: r11> #<Var: alloc7014>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Var: alloc7014> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Var: vecinit7015> #<Deref: r11 8>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7020>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Var: alloc7014> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Var: vecinit7016> #<Deref: r11 16>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7019>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: alloc7014> #<Reg: r11>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: alloc7014> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: vecinit7017> #<Deref: r11 24>)>
2 live-set: #<set: #<Var: alloc7014> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7018>)>
2 live-set: #<set: #<Var: alloc7014> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Var: alloc7014> #<Var: v7012>)>
2 live-set: #<set: #<Var: v7012> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit7023>)>
2 live-set: #<set: #<Var: v7012> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Var: v7012> #<Reg: r11>)>
2 live-set: #<set: #<Reg: r15> #<Reg: r11> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Deref: r11 24> #<Var: vecinit7024>)>
2 live-set: #<set: #<Var: vecinit7024> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Imm: 3> #<Var: vecinit7025>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp7034>)>
2 live-set: #<set: #<Var: tmp7034> #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Var: tmp7034> #<Var: tmp7033>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: tmp7033> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Var: tmp7033>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Var: tmp7033> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp7035>)>
2 live-set: #<set: #<Var: tmp7035> #<Var: vecinit7025> #<Var: vecinit7024> #<Var: tmp7033> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: cmpq (#<Var: tmp7035> #<Var: tmp7033>)>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<JmpIf: l block7037>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Jmp: block7038>
2 live-set: #<set: #<Var: vecinit7025> #<Var: vecinit7024> #<Reg: r15> #<Var: vecinit7023>>
1 instruction: #<Instr: movq (#<Reg: r15> #<Reg: rdi>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016> #<Reg: rdi>>
1 instruction: #<Instr: movq (#<Imm: 32> #<Reg: rsi>)>
2 live-set: #<set: #<Reg: rsi> #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016> #<Reg: rdi>>
1 instruction: #<Callq: collect 2>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Jmp: block7039>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Imm: 0> #<Var: _7021>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Jmp: block7039>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Imm: 1> #<Var: vecinit7015>)>
2 live-set: #<set: #<Var: vecinit7015> #<Reg: r15>>
1 instruction: #<Instr: movq (#<Imm: 2> #<Var: vecinit7016>)>
2 live-set: #<set: #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Imm: 42> #<Var: vecinit7017>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Global: free_ptr> #<Var: tmp7031>)>
2 live-set: #<set: #<Var: tmp7031> #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Var: tmp7031> #<Var: tmp7030>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Var: tmp7030> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: addq (#<Imm: 32> #<Var: tmp7030>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Var: tmp7030> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: movq (#<Global: fromspace_end> #<Var: tmp7032>)>
2 live-set: #<set: #<Var: tmp7032> #<Var: vecinit7017> #<Var: vecinit7015> #<Var: tmp7030> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Instr: cmpq (#<Var: tmp7032> #<Var: tmp7030>)>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<JmpIf: l block7040>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
1 instruction: #<Jmp: block7041>
2 live-set: #<set: #<Var: vecinit7017> #<Var: vecinit7015> #<Reg: r15> #<Var: vecinit7016>>
#<Var: tmp7031> -> #<Var: vecinit7017>;
#<Var: tmp7031> -> #<Var: vecinit7015>;
#<Var: tmp7031> -> #<Reg: r15>;
#<Var: tmp7031> -> #<Var: vecinit7016>;
#<Var: vecinit7025> -> #<Var: tmp7034>;
#<Var: vecinit7025> -> #<Var: tmp7035>;
#<Var: vecinit7025> -> #<Var: alloc7022>;
#<Var: vecinit7025> -> #<Reg: rcx>;
#<Var: vecinit7025> -> #<Reg: rsi>;
#<Var: vecinit7025> -> #<Var: vecinit7024>;
#<Var: vecinit7025> -> #<Var: _7029>;
#<Var: vecinit7025> -> #<Var: _7027>;
#<Var: vecinit7025> -> #<Reg: rdx>;
#<Var: vecinit7025> -> #<Reg: r8>;
#<Var: vecinit7025> -> #<Var: tmp7033>;
#<Var: vecinit7025> -> #<Reg: r15>;
#<Var: vecinit7025> -> #<Reg: r9>;
#<Var: vecinit7025> -> #<Reg: r11>;
#<Var: vecinit7025> -> #<Reg: rax>;
#<Var: vecinit7025> -> #<Reg: rdi>;
#<Var: vecinit7025> -> #<Var: vecinit7023>;
#<Var: vecinit7025> -> #<Var: _7028>;
#<Var: vecinit7025> -> #<Reg: r10>;
#<Reg: rsi> -> #<Var: vecinit7025>;
#<Reg: rsi> -> #<Var: vecinit7024>;
#<Reg: rsi> -> #<Var: vecinit7017>;
#<Reg: rsi> -> #<Var: vecinit7015>;
#<Reg: rsi> -> #<Reg: r15>;
#<Reg: rsi> -> #<Var: vecinit7016>;
#<Reg: rsi> -> #<Reg: rdi>;
#<Reg: rsi> -> #<Var: vecinit7023>;
#<Var: alloc7022> -> #<Var: vecinit7025>;
#<Var: alloc7022> -> #<Var: vecinit7024>;
#<Var: alloc7022> -> #<Var: _7027>;
#<Var: alloc7022> -> #<Reg: r11>;
#<Var: alloc7022> -> #<Var: _7026>;
#<Var: alloc7022> -> #<Var: vecinit7023>;
#<Var: alloc7022> -> #<Var: _7028>;
#<Var: _7029> -> #<Var: vecinit7025>;
#<Var: _7029> -> #<Var: vecinit7024>;
#<Var: _7029> -> #<Var: vecinit7023>;
#<Var: tmp7035> -> #<Var: vecinit7025>;
#<Var: tmp7035> -> #<Var: vecinit7024>;
#<Var: tmp7035> -> #<Var: tmp7033>;
#<Var: tmp7035> -> #<Reg: r15>;
#<Var: tmp7035> -> #<Var: vecinit7023>;
#<Var: tmp7030> -> #<Var: tmp7032>;
#<Var: tmp7030> -> #<Var: vecinit7017>;
#<Var: tmp7030> -> #<Var: vecinit7015>;
#<Var: tmp7030> -> #<Reg: r15>;
#<Var: tmp7030> -> #<Var: vecinit7016>;
#<Reg: rcx> -> #<Var: vecinit7025>;
#<Reg: rcx> -> #<Var: vecinit7024>;
#<Reg: rcx> -> #<Var: vecinit7017>;
#<Reg: rcx> -> #<Var: vecinit7015>;
#<Reg: rcx> -> #<Reg: r15>;
#<Reg: rcx> -> #<Var: vecinit7016>;
#<Reg: rcx> -> #<Var: vecinit7023>;
#<Reg: r11> -> #<Var: alloc7022>;
#<Reg: r11> -> #<Var: vecinit7025>;
#<Reg: r11> -> #<Var: vecinit7024>;
#<Reg: r11> -> #<Var: vecinit7017>;
#<Reg: r11> -> #<Var: alloc7014>;
#<Reg: r11> -> #<Var: vecinit7015>;
#<Reg: r11> -> #<Reg: r15>;
#<Reg: r11> -> #<Var: vecinit7016>;
#<Reg: r11> -> #<Var: vecinit7023>;
#<Var: v7012> -> #<Reg: r15>;
#<Var: v7012> -> #<Var: vecinit7023>;
#<Reg: r15> -> #<Var: tmp7031>;
#<Reg: r15> -> #<Var: tmp7034>;
#<Reg: r15> -> #<Var: tmp7035>;
#<Reg: r15> -> #<Var: tmp7032>;
#<Reg: r15> -> #<Reg: rcx>;
#<Reg: r15> -> #<Var: vecinit7025>;
#<Reg: r15> -> #<Reg: rsi>;
#<Reg: r15> -> #<Var: vecinit7024>;
#<Reg: r15> -> #<Var: _7019>;
#<Reg: r15> -> #<Var: vecinit7017>;
#<Reg: r15> -> #<Var: alloc7014>;
#<Reg: r15> -> #<Var: vecinit7015>;
#<Reg: r15> -> #<Reg: rdx>;
#<Reg: r15> -> #<Var: tmp7030>;
#<Reg: r15> -> #<Reg: r8>;
#<Reg: r15> -> #<Var: v7012>;
#<Reg: r15> -> #<Var: tmp7033>;
#<Reg: r15> -> #<Reg: r9>;
#<Reg: r15> -> #<Reg: r11>;
#<Reg: r15> -> #<Reg: rax>;
#<Reg: r15> -> #<Var: _7021>;
#<Reg: r15> -> #<Var: vecinit7016>;
#<Reg: r15> -> #<Reg: rdi>;
#<Reg: r15> -> #<Var: vecinit7023>;
#<Reg: r15> -> #<Reg: r10>;
#<Reg: r15> -> #<Var: _7020>;
#<Reg: r15> -> #<Var: _7018>;
#<Var: _7026> -> #<Var: alloc7022>;
#<Var: vecinit7023> -> #<Var: tmp7034>;
#<Var: vecinit7023> -> #<Var: tmp7035>;
#<Var: vecinit7023> -> #<Var: alloc7022>;
#<Var: vecinit7023> -> #<Reg: rcx>;
#<Var: vecinit7023> -> #<Var: vecinit7025>;
#<Var: vecinit7023> -> #<Reg: rsi>;
#<Var: vecinit7023> -> #<Var: vecinit7024>;
#<Var: vecinit7023> -> #<Var: _7029>;
#<Var: vecinit7023> -> #<Reg: rdx>;
#<Var: vecinit7023> -> #<Reg: r8>;
#<Var: vecinit7023> -> #<Var: v7012>;
#<Var: vecinit7023> -> #<Var: tmp7033>;
#<Var: vecinit7023> -> #<Reg: r15>;
#<Var: vecinit7023> -> #<Reg: r9>;
#<Var: vecinit7023> -> #<Reg: r11>;
#<Var: vecinit7023> -> #<Reg: rax>;
#<Var: vecinit7023> -> #<Reg: rdi>;
#<Var: vecinit7023> -> #<Reg: r10>;
#<Reg: rax> -> #<Var: vecinit7025>;
#<Reg: rax> -> #<Var: vecinit7024>;
#<Reg: rax> -> #<Var: vecinit7017>;
#<Reg: rax> -> #<Var: vecinit7015>;
#<Reg: rax> -> #<Reg: r15>;
#<Reg: rax> -> #<Var: vecinit7016>;
#<Reg: rax> -> #<Var: vecinit7023>;
#<Reg: r8> -> #<Var: vecinit7025>;
#<Reg: r8> -> #<Var: vecinit7024>;
#<Reg: r8> -> #<Var: vecinit7017>;
#<Reg: r8> -> #<Var: vecinit7015>;
#<Reg: r8> -> #<Reg: r15>;
#<Reg: r8> -> #<Var: vecinit7016>;
#<Reg: r8> -> #<Var: vecinit7023>;
#<Reg: r10> -> #<Var: vecinit7025>;
#<Reg: r10> -> #<Var: vecinit7024>;
#<Reg: r10> -> #<Var: vecinit7017>;
#<Reg: r10> -> #<Var: vecinit7015>;
#<Reg: r10> -> #<Reg: r15>;
#<Reg: r10> -> #<Var: vecinit7016>;
#<Reg: r10> -> #<Var: vecinit7023>;
#<Var: _7018> -> #<Var: alloc7014>;
#<Var: _7018> -> #<Reg: r15>;
#<Var: _7027> -> #<Var: alloc7022>;
#<Var: _7027> -> #<Var: vecinit7025>;
#<Var: vecinit7015> -> #<Var: tmp7031>;
#<Var: vecinit7015> -> #<Var: tmp7032>;
#<Var: vecinit7015> -> #<Reg: rcx>;
#<Var: vecinit7015> -> #<Reg: rsi>;
#<Var: vecinit7015> -> #<Var: vecinit7017>;
#<Var: vecinit7015> -> #<Var: alloc7014>;
#<Var: vecinit7015> -> #<Reg: rdx>;
#<Var: vecinit7015> -> #<Var: tmp7030>;
#<Var: vecinit7015> -> #<Reg: r8>;
#<Var: vecinit7015> -> #<Reg: r15>;
#<Var: vecinit7015> -> #<Reg: r9>;
#<Var: vecinit7015> -> #<Reg: r11>;
#<Var: vecinit7015> -> #<Reg: rax>;
#<Var: vecinit7015> -> #<Var: _7021>;
#<Var: vecinit7015> -> #<Var: vecinit7016>;
#<Var: vecinit7015> -> #<Reg: rdi>;
#<Var: vecinit7015> -> #<Reg: r10>;
#<Reg: rdx> -> #<Var: vecinit7025>;
#<Reg: rdx> -> #<Var: vecinit7024>;
#<Reg: rdx> -> #<Var: vecinit7017>;
#<Reg: rdx> -> #<Var: vecinit7015>;
#<Reg: rdx> -> #<Reg: r15>;
#<Reg: rdx> -> #<Var: vecinit7016>;
#<Reg: rdx> -> #<Var: vecinit7023>;
#<Var: vecinit7024> -> #<Var: tmp7034>;
#<Var: vecinit7024> -> #<Var: tmp7035>;
#<Var: vecinit7024> -> #<Var: alloc7022>;
#<Var: vecinit7024> -> #<Reg: rcx>;
#<Var: vecinit7024> -> #<Var: vecinit7025>;
#<Var: vecinit7024> -> #<Reg: rsi>;
#<Var: vecinit7024> -> #<Var: _7029>;
#<Var: vecinit7024> -> #<Reg: rdx>;
#<Var: vecinit7024> -> #<Reg: r8>;
#<Var: vecinit7024> -> #<Var: tmp7033>;
#<Var: vecinit7024> -> #<Reg: r15>;
#<Var: vecinit7024> -> #<Reg: r9>;
#<Var: vecinit7024> -> #<Reg: r11>;
#<Var: vecinit7024> -> #<Reg: rax>;
#<Var: vecinit7024> -> #<Reg: rdi>;
#<Var: vecinit7024> -> #<Var: vecinit7023>;
#<Var: vecinit7024> -> #<Var: _7028>;
#<Var: vecinit7024> -> #<Reg: r10>;
#<Var: _7019> -> #<Var: vecinit7017>;
#<Var: _7019> -> #<Var: alloc7014>;
#<Var: _7019> -> #<Reg: r15>;
#<Var: tmp7033> -> #<Var: tmp7035>;
#<Var: tmp7033> -> #<Var: vecinit7025>;
#<Var: tmp7033> -> #<Var: vecinit7024>;
#<Var: tmp7033> -> #<Reg: r15>;
#<Var: tmp7033> -> #<Var: vecinit7023>;
#<Var: vecinit7016> -> #<Var: tmp7031>;
#<Var: vecinit7016> -> #<Var: tmp7032>;
#<Var: vecinit7016> -> #<Reg: rcx>;
#<Var: vecinit7016> -> #<Reg: rsi>;
#<Var: vecinit7016> -> #<Var: vecinit7017>;
#<Var: vecinit7016> -> #<Var: alloc7014>;
#<Var: vecinit7016> -> #<Var: vecinit7015>;
#<Var: vecinit7016> -> #<Reg: rdx>;
#<Var: vecinit7016> -> #<Var: tmp7030>;
#<Var: vecinit7016> -> #<Reg: r8>;
#<Var: vecinit7016> -> #<Reg: r15>;
#<Var: vecinit7016> -> #<Reg: r9>;
#<Var: vecinit7016> -> #<Reg: r11>;
#<Var: vecinit7016> -> #<Reg: rax>;
#<Var: vecinit7016> -> #<Var: _7021>;
#<Var: vecinit7016> -> #<Reg: rdi>;
#<Var: vecinit7016> -> #<Reg: r10>;
#<Var: vecinit7016> -> #<Var: _7020>;
#<Var: _7028> -> #<Var: alloc7022>;
#<Var: _7028> -> #<Var: vecinit7025>;
#<Var: _7028> -> #<Var: vecinit7024>;
#<Var: _7020> -> #<Var: vecinit7017>;
#<Var: _7020> -> #<Var: alloc7014>;
#<Var: _7020> -> #<Reg: r15>;
#<Var: _7020> -> #<Var: vecinit7016>;
#<Var: _7021> -> #<Var: vecinit7017>;
#<Var: _7021> -> #<Var: vecinit7015>;
#<Var: _7021> -> #<Reg: r15>;
#<Var: _7021> -> #<Var: vecinit7016>;
#<Reg: rdi> -> #<Var: vecinit7025>;
#<Reg: rdi> -> #<Reg: rsi>;
#<Reg: rdi> -> #<Var: vecinit7024>;
#<Reg: rdi> -> #<Var: vecinit7017>;
#<Reg: rdi> -> #<Var: vecinit7015>;
#<Reg: rdi> -> #<Reg: r15>;
#<Reg: rdi> -> #<Var: vecinit7016>;
#<Reg: rdi> -> #<Var: vecinit7023>;
#<Var: vecinit7017> -> #<Var: tmp7031>;
#<Var: vecinit7017> -> #<Var: tmp7032>;
#<Var: vecinit7017> -> #<Reg: rcx>;
#<Var: vecinit7017> -> #<Reg: rsi>;
#<Var: vecinit7017> -> #<Var: _7019>;
#<Var: vecinit7017> -> #<Var: alloc7014>;
#<Var: vecinit7017> -> #<Var: vecinit7015>;
#<Var: vecinit7017> -> #<Reg: rdx>;
#<Var: vecinit7017> -> #<Var: tmp7030>;
#<Var: vecinit7017> -> #<Reg: r8>;
#<Var: vecinit7017> -> #<Reg: r15>;
#<Var: vecinit7017> -> #<Reg: r9>;
#<Var: vecinit7017> -> #<Reg: r11>;
#<Var: vecinit7017> -> #<Reg: rax>;
#<Var: vecinit7017> -> #<Var: _7021>;
#<Var: vecinit7017> -> #<Var: vecinit7016>;
#<Var: vecinit7017> -> #<Reg: rdi>;
#<Var: vecinit7017> -> #<Reg: r10>;
#<Var: vecinit7017> -> #<Var: _7020>;
#<Var: tmp7032> -> #<Var: vecinit7017>;
#<Var: tmp7032> -> #<Var: vecinit7015>;
#<Var: tmp7032> -> #<Var: tmp7030>;
#<Var: tmp7032> -> #<Reg: r15>;
#<Var: tmp7032> -> #<Var: vecinit7016>;
#<Reg: r9> -> #<Var: vecinit7025>;
#<Reg: r9> -> #<Var: vecinit7024>;
#<Reg: r9> -> #<Var: vecinit7017>;
#<Reg: r9> -> #<Var: vecinit7015>;
#<Reg: r9> -> #<Reg: r15>;
#<Reg: r9> -> #<Var: vecinit7016>;
#<Reg: r9> -> #<Var: vecinit7023>;
#<Var: tmp7034> -> #<Var: vecinit7025>;
#<Var: tmp7034> -> #<Var: vecinit7024>;
#<Var: tmp7034> -> #<Reg: r15>;
#<Var: tmp7034> -> #<Var: vecinit7023>;
#<Var: alloc7014> -> #<Var: _7019>;
#<Var: alloc7014> -> #<Var: vecinit7017>;
#<Var: alloc7014> -> #<Var: vecinit7015>;
#<Var: alloc7014> -> #<Reg: r15>;
#<Var: alloc7014> -> #<Reg: r11>;
#<Var: alloc7014> -> #<Var: vecinit7016>;
#<Var: alloc7014> -> #<Var: _7020>;
#<Var: alloc7014> -> #<Var: _7018>;
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(X86Program
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block7036
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r11) (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022))
      (set (Var 'alloc7022))
      (set (Var 'w7013))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7022)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7023) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7028)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7024) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7027)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7025) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7026)))
     (Instr 'movq (list (Var 'alloc7022) (Var 'w7013)))
     (Instr 'movq (list (Var 'w7013) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7037
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list (Instr 'movq (list (Imm 0) (Var '_7029))) (Jmp 'block7036))))
  (cons
   'block7038
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'rdi) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Reg 'rsi)
       (Var 'vecinit7024)
       (Reg 'rdi)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7036))))
  (cons
   'block7039
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15) (Var 'vecinit7023))
      (set (Reg 'r15) (Reg 'r11) (Var 'vecinit7023))
      (set (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'tmp7034)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'tmp7035)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7014)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7015) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7020)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7016) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7019)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7017) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7018)))
     (Instr 'movq (list (Var 'alloc7014) (Var 'v7012)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit7023)))
     (Instr 'movq (list (Var 'v7012) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 24) (Var 'vecinit7024)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit7025)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7034)))
     (Instr 'movq (list (Var 'tmp7034) (Var 'tmp7033)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7033)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7035)))
     (Instr 'cmpq (list (Var 'tmp7035) (Var 'tmp7033)))
     (JmpIf 'l 'block7037)
     (Jmp 'block7038))))
  (cons
   'block7041
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set
       (Reg 'rsi)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7039))))
  (cons
   'block7040
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list (Instr 'movq (list (Imm 0) (Var '_7021))) (Jmp 'block7039))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7015) (Reg 'r15))
      (set (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'tmp7031)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'tmp7032)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit7015)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit7016)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit7017)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7031)))
     (Instr 'movq (list (Var 'tmp7031) (Var 'tmp7030)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7030)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7032)))
     (Instr 'cmpq (list (Var 'tmp7032) (Var 'tmp7030)))
     (JmpIf 'l 'block7040)
     (Jmp 'block7041))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(X86Program
 '((locals-types
    (w7013 Vector Boolean Integer Integer)
    (vecinit7025 . Integer)
    (vecinit7015 . Integer)
    (_7026 . Void)
    (_7020 . Void)
    (tmp7030 . Integer)
    (tmp7031 . Integer)
    (tmp7032 . Integer)
    (vecinit7024 . Integer)
    (v7012 Vector Integer Integer Integer)
    (_7027 . Void)
    (tmp7033 . Integer)
    (vecinit7023 . Boolean)
    (tmp7035 . Integer)
    (_7028 . Void)
    (alloc7014 Vector Integer Integer Integer)
    (_7021 . Void)
    (tmp7034 . Integer)
    (vecinit7017 . Integer)
    (_7018 . Void)
    (vecinit7016 . Integer)
    (alloc7022 Vector Boolean Integer Integer)
    (_7019 . Void)
    (_7029 . Void))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block7036
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r11) (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set
       (Var 'alloc7022)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'vecinit7023))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025) (Var 'vecinit7024))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022) (Var 'vecinit7025))
      (set (Var 'alloc7022))
      (set (Var 'alloc7022))
      (set (Var 'w7013))
      (set (Reg 'r11))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7022)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7023) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7028)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7024) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7027)))
     (Instr 'movq (list (Var 'alloc7022) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7025) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7026)))
     (Instr 'movq (list (Var 'alloc7022) (Var 'w7013)))
     (Instr 'movq (list (Var 'w7013) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block7037
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list (Instr 'movq (list (Imm 0) (Var '_7029))) (Jmp 'block7036))))
  (cons
   'block7038
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'rdi) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Reg 'rsi)
       (Var 'vecinit7024)
       (Reg 'rdi)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7036))))
  (cons
   'block7039
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Reg 'r11)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'alloc7014)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'vecinit7017) (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'alloc7014) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15))
      (set (Var 'v7012) (Reg 'r15) (Var 'vecinit7023))
      (set (Reg 'r15) (Reg 'r11) (Var 'vecinit7023))
      (set (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'tmp7034)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set
       (Var 'tmp7035)
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Var 'tmp7033)
       (Reg 'r15)
       (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set (Var 'vecinit7025) (Var 'vecinit7024) (Reg 'r15) (Var 'vecinit7023))
      (set
       (Var 'vecinit7025)
       (Var 'vecinit7024)
       (Reg 'r15)
       (Var 'vecinit7023))))
    (list
     (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
     (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
     (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
     (Instr 'movq (list (Reg 'r11) (Var 'alloc7014)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7015) (Deref 'r11 8)))
     (Instr 'movq (list (Imm 0) (Var '_7020)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7016) (Deref 'r11 16)))
     (Instr 'movq (list (Imm 0) (Var '_7019)))
     (Instr 'movq (list (Var 'alloc7014) (Reg 'r11)))
     (Instr 'movq (list (Var 'vecinit7017) (Deref 'r11 24)))
     (Instr 'movq (list (Imm 0) (Var '_7018)))
     (Instr 'movq (list (Var 'alloc7014) (Var 'v7012)))
     (Instr 'movq (list (Imm 1) (Var 'vecinit7023)))
     (Instr 'movq (list (Var 'v7012) (Reg 'r11)))
     (Instr 'movq (list (Deref 'r11 24) (Var 'vecinit7024)))
     (Instr 'movq (list (Imm 3) (Var 'vecinit7025)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7034)))
     (Instr 'movq (list (Var 'tmp7034) (Var 'tmp7033)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7033)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7035)))
     (Instr 'cmpq (list (Var 'tmp7035) (Var 'tmp7033)))
     (JmpIf 'l 'block7037)
     (Jmp 'block7038))))
  (cons
   'block7041
   (Block
    (list
     (list
      'live-sets
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set
       (Reg 'rsi)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016)
       (Reg 'rdi))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
     (Instr 'movq (list (Imm 32) (Reg 'rsi)))
     (Callq 'collect 2)
     (Jmp 'block7039))))
  (cons
   'block7040
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list (Instr 'movq (list (Imm 0) (Var '_7021))) (Jmp 'block7039))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'vecinit7015) (Reg 'r15))
      (set (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'tmp7031)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set
       (Var 'tmp7032)
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Var 'tmp7030)
       (Reg 'r15)
       (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set (Var 'vecinit7017) (Var 'vecinit7015) (Reg 'r15) (Var 'vecinit7016))
      (set
       (Var 'vecinit7017)
       (Var 'vecinit7015)
       (Reg 'r15)
       (Var 'vecinit7016))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'vecinit7015)))
     (Instr 'movq (list (Imm 2) (Var 'vecinit7016)))
     (Instr 'movq (list (Imm 42) (Var 'vecinit7017)))
     (Instr 'movq (list (Global 'free_ptr) (Var 'tmp7031)))
     (Instr 'movq (list (Var 'tmp7031) (Var 'tmp7030)))
     (Instr 'addq (list (Imm 32) (Var 'tmp7030)))
     (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp7032)))
     (Instr 'cmpq (list (Var 'tmp7032) (Var 'tmp7030)))
     (JmpIf 'l 'block7040)
     (Jmp 'block7041))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"vectors_test_6"

expected-result:
42


162 success(es) 0 failure(s) 0 error(s) 162 test(s) run
0
