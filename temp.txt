type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (Let 'x (Bool #t) (Int 42)))


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Let 'x (Bool #t) (Int 42)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Let 'x (Bool #t) (Int 42)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Let 'x20680 (Bool #t) (Int 42)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Let 'x20680 (Bool #t) (Int 42)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Let 'x20680 (Bool #t) (Int 42)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Let 'x20680 (Bool #t) (Int 42)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Seq (Assign (Var 'x20680) (Bool #t)) (Return (Int 42))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (x20680 . Boolean)))
 (list (cons 'start (Seq (Assign (Var 'x20680) (Bool #t)) (Return (Int 42))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20680 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20680)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20680 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20680)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20680 . Boolean)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20680)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20680 . Boolean)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20680)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20680 . Boolean)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20680)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20680 . Boolean)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20680)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_1"

expected-result:
42


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (Let 'x (Bool #f) (Int 42)))


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Let 'x (Bool #f) (Int 42)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Let 'x (Bool #f) (Int 42)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Let 'x20692 (Bool #f) (Int 42)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Let 'x20692 (Bool #f) (Int 42)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Let 'x20692 (Bool #f) (Int 42)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Let 'x20692 (Bool #f) (Int 42)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list (cons 'start (Seq (Assign (Var 'x20692) (Bool #f)) (Return (Int 42))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (x20692 . Boolean)))
 (list (cons 'start (Seq (Assign (Var 'x20692) (Bool #f)) (Return (Int 42))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20692 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'x20692)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20692 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 0) (Var 'x20692)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20692 . Boolean)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x20692)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20692 . Boolean)))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x20692)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20692 . Boolean)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x20692)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20692 . Boolean)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'movq (list (Imm 0) (Var 'x20692)))
     (Instr 'movq (list (Imm 42) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_2"

expected-result:
42


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (If (Bool #t) (Int 42) (Int 0)))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram '() (list (cons 'start (Return (Int 42)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram '((locals-types)) (list (cons 'start (Return (Int 42)))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 42) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
42


testing @ utilities.rkt:2037
test-name:
"cond_test_3"

expected-result:
42


type-check: Integer != Boolean
in (If (Int 10) (Int 15) (Int 20))

type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (If (Var 'x) (Var 'x) (Int 10))

type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
#f


type-check: Integer != Boolean
in (If (Prim 'read '()) (Int 1) (Int 2))

type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
#f


type-check: Boolean != Integer
in (Prim '+ (list (Bool #t) (Int 1)))

type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
#f


type-check: Integer != Boolean
in (Prim 'not (list (Int 10)))

type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
#f


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (If (Bool #f) (Int 15) (Int 20)))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram '() (list (cons 'start (Return (Int 20)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram '((locals-types)) (list (cons 'start (Return (Int 20)))))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 20) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 20) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 20) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
20


testing @ utilities.rkt:2037
test-name:
"cond_test_9"

expected-result:
20


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (If
   (Let 'x (Bool #t) (If (Var 'x) (Var 'x) (Prim 'not (list (Var 'x)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x) (Int 10) (Prim '- (list (Int 10))))))


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (If
   (Let 'x (Bool #t) (If (Var 'x) (Var 'x) (Prim 'not (list (Var 'x)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x) (Int 10) (Prim '- (list (Int 10))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (If
   (Let 'x (Bool #t) (If (Var 'x) (Var 'x) (Prim 'not (list (Var 'x)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x) (Int 10) (Prim '- (list (Int 10))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20727
  (If
   (Let
    'x20726
    (Bool #t)
    (If (Var 'x20726) (Var 'x20726) (Prim 'not (list (Var 'x20726)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x20727) (Int 10) (Prim '- (list (Int 10))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20727
  (If
   (Let
    'x20726
    (Bool #t)
    (If (Var 'x20726) (Var 'x20726) (Prim 'not (list (Var 'x20726)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x20727) (Int 10) (Prim '- (list (Int 10))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20727
  (If
   (Let
    'x20726
    (Bool #t)
    (If (Var 'x20726) (Var 'x20726) (Prim 'not (list (Var 'x20726)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x20727) (Int 10) (Prim '- (list (Int 10))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20727
  (If
   (Let
    'x20726
    (Bool #t)
    (If (Var 'x20726) (Var 'x20726) (Prim 'not (list (Var 'x20726)))))
   (Bool #t)
   (Bool #f))
  (If (Var 'x20727) (Int 10) (Prim '- (list (Int 10))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x20726) (Bool #t))
    (IfStmt
     (Prim 'eq? (list (Var 'x20726) (Bool #t)))
     (Goto 'block20733)
     (Goto 'block20734))))
  (cons
   'block20734
   (IfStmt
    (Prim 'eq? (list (Var 'x20726) (Bool #f)))
    (Goto 'block20731)
    (Goto 'block20732)))
  (cons
   'block20733
   (IfStmt
    (Prim 'eq? (list (Var 'x20726) (Bool #t)))
    (Goto 'block20731)
    (Goto 'block20732)))
  (cons 'block20732 (Seq (Assign (Var 'x20727) (Bool #f)) (Goto 'block20730)))
  (cons 'block20731 (Seq (Assign (Var 'x20727) (Bool #t)) (Goto 'block20730)))
  (cons
   'block20730
   (IfStmt
    (Prim 'eq? (list (Var 'x20727) (Bool #t)))
    (Goto 'block20728)
    (Goto 'block20729)))
  (cons 'block20729 (Return (Prim '- (list (Int 10)))))
  (cons 'block20728 (Return (Int 10)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (x20727 . Boolean) (x20726 . Boolean)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x20726) (Bool #t))
    (IfStmt
     (Prim 'eq? (list (Var 'x20726) (Bool #t)))
     (Goto 'block20733)
     (Goto 'block20734))))
  (cons
   'block20734
   (IfStmt
    (Prim 'eq? (list (Var 'x20726) (Bool #f)))
    (Goto 'block20731)
    (Goto 'block20732)))
  (cons
   'block20733
   (IfStmt
    (Prim 'eq? (list (Var 'x20726) (Bool #t)))
    (Goto 'block20731)
    (Goto 'block20732)))
  (cons 'block20732 (Seq (Assign (Var 'x20727) (Bool #f)) (Goto 'block20730)))
  (cons 'block20731 (Seq (Assign (Var 'x20727) (Bool #t)) (Goto 'block20730)))
  (cons
   'block20730
   (IfStmt
    (Prim 'eq? (list (Var 'x20727) (Bool #t)))
    (Goto 'block20728)
    (Goto 'block20729)))
  (cons 'block20729 (Return (Prim '- (list (Int 10)))))
  (cons 'block20728 (Return (Int 10)))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20727 . Boolean) (x20726 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20726)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20733)
     (Jmp 'block20734))))
  (cons
   'block20734
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20733
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20732
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20731
   (Block
    '()
    (list (Instr 'movq (list (Imm 1) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20730
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20727)))
     (JmpIf 'e 'block20728)
     (Jmp 'block20729))))
  (cons
   'block20729
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20728
   (Block
    '()
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20727 . Boolean) (x20726 . Boolean)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20726)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20733)
     (Jmp 'block20734))))
  (cons
   'block20734
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20733
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20732
   (Block
    '()
    (list (Instr 'movq (list (Imm 0) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20731
   (Block
    '()
    (list (Instr 'movq (list (Imm 1) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20730
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20727)))
     (JmpIf 'e 'block20728)
     (Jmp 'block20729))))
  (cons
   'block20729
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20728
   (Block
    '()
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set:>)
(#<set:>)
(#<set: #<Var: x20727>>)
(#<set: #<Var: x20727>>)
(#<set:>)
(#<set:>)
(#<set: #<Var: x20726>>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20727 . Boolean) (x20726 . Boolean)))
 (list
  (cons
   'block20728
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block20729
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20730
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20727)))
     (JmpIf 'e 'block20728)
     (Jmp 'block20729))))
  (cons
   'block20732
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 0) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20731
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 1) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20734
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20733
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20726)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20733)
     (Jmp 'block20734))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20727 . Boolean) (x20726 . Boolean)))
 (list
  (cons
   'block20728
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block20729
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20730
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20727)))
     (JmpIf 'e 'block20728)
     (Jmp 'block20729))))
  (cons
   'block20732
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 0) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20731
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 1) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20734
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20733
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20726)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20733)
     (Jmp 'block20734))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20727 . Boolean) (x20726 . Boolean))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20728
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block20729
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20730
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20727)))
     (JmpIf 'e 'block20728)
     (Jmp 'block20729))))
  (cons
   'block20732
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 0) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20731
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 1) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20734
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20733
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20726)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20733)
     (Jmp 'block20734))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20727 . Boolean) (x20726 . Boolean))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20728
   (Block
    (list (list 'live-sets (set) (set)))
    (list (Instr 'movq (list (Imm 10) (Reg 'rax))) (Jmp 'conclusion))))
  (cons
   'block20729
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20730
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20727)))
     (JmpIf 'e 'block20728)
     (Jmp 'block20729))))
  (cons
   'block20732
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 0) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20731
   (Block
    (list (list 'live-sets (set (Var 'x20727)) (set (Var 'x20727))))
    (list (Instr 'movq (list (Imm 1) (Var 'x20727))) (Jmp 'block20730))))
  (cons
   'block20734
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'block20733
   (Block
    (list (list 'live-sets (set) (set) (set)))
    (list
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20731)
     (Jmp 'block20732))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))
      (set (Var 'x20726))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20726)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20726)))
     (JmpIf 'e 'block20733)
     (Jmp 'block20734))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_90"

expected-result:
10


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program
 '()
 (If
  (Prim 'and (list (Bool #t) (Prim 'or (list (Bool #f) (Bool #t)))))
  (Prim '+ (list (Int 1) (Int 2)))
  (Prim '- (list (Int 10) (Int 5)))))


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (If
  (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
  (Prim '+ (list (Int 1) (Int 2)))
  (Prim '+ (list (Int 10) (Prim '- (list (Int 5)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (If
  (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
  (Prim '+ (list (Int 1) (Int 2)))
  (Prim '+ (list (Int 10) (Prim '- (list (Int 5)))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (If
  (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
  (Prim '+ (list (Int 1) (Int 2)))
  (Prim '+ (list (Int 10) (Prim '- (list (Int 5)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (If
  (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
  (Prim '+ (list (Int 1) (Int 2)))
  (Prim '+ (list (Int 10) (Prim '- (list (Int 5)))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (If
  (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
  (Prim '+ (list (Int 1) (Int 2)))
  (Let
   'tmp20746
   (Prim '- (list (Int 5)))
   (Prim '+ (list (Int 10) (Var 'tmp20746))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (If
  (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
  (Prim '+ (list (Int 1) (Int 2)))
  (Let
   'tmp20746
   (Prim '- (list (Int 5)))
   (Prim '+ (list (Int 10) (Var 'tmp20746))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block20747))
  (cons
   'block20748
   (Seq
    (Assign (Var 'tmp20746) (Prim '- (list (Int 5))))
    (Return (Prim '+ (list (Int 10) (Var 'tmp20746))))))
  (cons 'block20747 (Return (Prim '+ (list (Int 1) (Int 2)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list
  (cons 'start (Goto 'block20747))
  (cons
   'block20748
   (Seq
    (Assign (Var 'tmp20746) (Prim '- (list (Int 5))))
    (Return (Prim '+ (list (Int 10) (Var 'tmp20746))))))
  (cons 'block20747 (Return (Prim '+ (list (Int 1) (Int 2)))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block20747))))
  (cons
   'block20748
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 5) (Var 'tmp20746)))
     (Instr 'negq (list (Var 'tmp20746)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20746) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20747
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons 'start (Block '() (list (Jmp 'block20747))))
  (cons
   'block20748
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 5) (Var 'tmp20746)))
     (Instr 'negq (list (Var 'tmp20746)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20746) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20747
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set:>)
(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'block20747
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20748
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20746))
      (set (Var 'tmp20746))
      (set (Reg 'rax) (Var 'tmp20746))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'tmp20746)))
     (Instr 'negq (list (Var 'tmp20746)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20746) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20747))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'block20747
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20748
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20746))
      (set (Var 'tmp20746))
      (set (Reg 'rax) (Var 'tmp20746))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'tmp20746)))
     (Instr 'negq (list (Var 'tmp20746)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20746) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20747))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


running pass: build interference graph @ utilities.rkt:2048

#<Reg: rax> -> #<Var: tmp20746>;
#<Var: tmp20746> -> #<Reg: rax>;
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20747
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20748
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20746))
      (set (Var 'tmp20746))
      (set (Reg 'rax) (Var 'tmp20746))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'tmp20746)))
     (Instr 'negq (list (Var 'tmp20746)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20746) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20747))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20747
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 1) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20748
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20746))
      (set (Var 'tmp20746))
      (set (Reg 'rax) (Var 'tmp20746))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 5) (Var 'tmp20746)))
     (Instr 'negq (list (Var 'tmp20746)))
     (Instr 'movq (list (Imm 10) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20746) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20747))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_91"

expected-result:
3


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 2) (Int 1))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram '() (list (cons 'start (Return (Prim '+ (list (Int 2) (Int 1)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types))
 (list (cons 'start (Return (Prim '+ (list (Int 2) (Int 1)))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Imm 1) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
3


testing @ utilities.rkt:2037
test-name:
"cond_test_92"

expected-result:
3


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (Prim '+ (list (Int 2) (If (Bool #t) (Int 10) (Int 5)))))


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 2) (If (Bool #t) (Int 10) (Int 5)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 2) (If (Bool #t) (Int 10) (Int 5)))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (Int 2) (If (Bool #t) (Int 10) (Int 5)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (Int 2) (If (Bool #t) (Int 10) (Int 5)))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'tmp20771
  (If (Bool #t) (Int 10) (Int 5))
  (Prim '+ (list (Int 2) (Var 'tmp20771)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'tmp20771
  (If (Bool #t) (Int 10) (Int 5))
  (Prim '+ (list (Int 2) (Var 'tmp20771)))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Seq (Assign (Var 'tmp20771) (Int 10)) (Goto 'block20772)))
  (cons 'block20772 (Return (Prim '+ (list (Int 2) (Var 'tmp20771)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (tmp20771 . Integer)))
 (list
  (cons 'start (Seq (Assign (Var 'tmp20771) (Int 10)) (Goto 'block20772)))
  (cons 'block20772 (Return (Prim '+ (list (Int 2) (Var 'tmp20771)))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20771 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 10) (Var 'tmp20771))) (Jmp 'block20772))))
  (cons
   'block20772
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20771) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20771 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 10) (Var 'tmp20771))) (Jmp 'block20772))))
  (cons
   'block20772
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20771) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set: #<Var: tmp20771>>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20771 . Integer)))
 (list
  (cons
   'block20772
   (Block
    (list (list 'live-sets (set (Reg 'rax) (Var 'tmp20771)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20771) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20771)) (set (Var 'tmp20771))))
    (list (Instr 'movq (list (Imm 10) (Var 'tmp20771))) (Jmp 'block20772))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20771 . Integer)))
 (list
  (cons
   'block20772
   (Block
    (list (list 'live-sets (set (Reg 'rax) (Var 'tmp20771)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20771) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20771)) (set (Var 'tmp20771))))
    (list (Instr 'movq (list (Imm 10) (Var 'tmp20771))) (Jmp 'block20772))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


running pass: build interference graph @ utilities.rkt:2048

#<Var: tmp20771> -> #<Reg: rax>;
#<Reg: rax> -> #<Var: tmp20771>;
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20771 . Integer)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20772
   (Block
    (list (list 'live-sets (set (Reg 'rax) (Var 'tmp20771)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20771) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20771)) (set (Var 'tmp20771))))
    (list (Instr 'movq (list (Imm 10) (Var 'tmp20771))) (Jmp 'block20772))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20771 . Integer)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20772
   (Block
    (list (list 'live-sets (set (Reg 'rax) (Var 'tmp20771)) (set) (set)))
    (list
     (Instr 'movq (list (Imm 2) (Reg 'rax)))
     (Instr 'addq (list (Var 'tmp20771) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20771)) (set (Var 'tmp20771))))
    (list (Instr 'movq (list (Imm 10) (Var 'tmp20771))) (Jmp 'block20772))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_93"

expected-result:
12


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (If
   (Prim 'and (list (Bool #t) (Prim 'or (list (Bool #f) (Bool #t)))))
   (Prim '- (list (Int 9) (Int 6)))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 10))))))


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 9) (Prim '- (list (Int 6)))))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 10))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 9) (Prim '- (list (Int 6)))))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x
   (Prim '+ (list (Var 'x) (Var 'x)))
   (Prim '+ (list (Var 'x) (Int 10))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20784
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 9) (Prim '- (list (Int 6)))))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x20785
   (Prim '+ (list (Var 'x20784) (Var 'x20784)))
   (Prim '+ (list (Var 'x20785) (Int 10))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20784
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Prim '+ (list (Int 9) (Prim '- (list (Int 6)))))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x20785
   (Prim '+ (list (Var 'x20784) (Var 'x20784)))
   (Prim '+ (list (Var 'x20785) (Int 10))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20784
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Let
    'tmp20786
    (Prim '- (list (Int 6)))
    (Prim '+ (list (Int 9) (Var 'tmp20786))))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x20785
   (Prim '+ (list (Var 'x20784) (Var 'x20784)))
   (Prim '+ (list (Var 'x20785) (Int 10))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20784
  (If
   (If (Bool #t) (If (Bool #f) (Bool #t) (Bool #t)) (Bool #f))
   (Let
    'tmp20786
    (Prim '- (list (Int 6)))
    (Prim '+ (list (Int 9) (Var 'tmp20786))))
   (Prim '+ (list (Int 4) (Int 2))))
  (Let
   'x20785
   (Prim '+ (list (Var 'x20784) (Var 'x20784)))
   (Prim '+ (list (Var 'x20785) (Int 10))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block20788))
  (cons
   'block20789
   (Seq
    (Assign (Var 'x20784) (Prim '+ (list (Int 4) (Int 2))))
    (Goto 'block20787)))
  (cons
   'block20788
   (Seq
    (Assign (Var 'tmp20786) (Prim '- (list (Int 6))))
    (Seq
     (Assign (Var 'x20784) (Prim '+ (list (Int 9) (Var 'tmp20786))))
     (Goto 'block20787))))
  (cons
   'block20787
   (Seq
    (Assign (Var 'x20785) (Prim '+ (list (Var 'x20784) (Var 'x20784))))
    (Return (Prim '+ (list (Var 'x20785) (Int 10))))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer)))
 (list
  (cons 'start (Goto 'block20788))
  (cons
   'block20789
   (Seq
    (Assign (Var 'x20784) (Prim '+ (list (Int 4) (Int 2))))
    (Goto 'block20787)))
  (cons
   'block20788
   (Seq
    (Assign (Var 'tmp20786) (Prim '- (list (Int 6))))
    (Seq
     (Assign (Var 'x20784) (Prim '+ (list (Int 9) (Var 'tmp20786))))
     (Goto 'block20787))))
  (cons
   'block20787
   (Seq
    (Assign (Var 'x20785) (Prim '+ (list (Var 'x20784) (Var 'x20784))))
    (Return (Prim '+ (list (Var 'x20785) (Int 10))))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block20788))))
  (cons
   'block20789
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 4) (Var 'x20784)))
     (Instr 'addq (list (Imm 2) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20788
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 6) (Var 'tmp20786)))
     (Instr 'negq (list (Var 'tmp20786)))
     (Instr 'movq (list (Imm 9) (Var 'x20784)))
     (Instr 'addq (list (Var 'tmp20786) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20787
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'addq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'movq (list (Var 'x20785) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block20788))))
  (cons
   'block20789
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 4) (Var 'x20784)))
     (Instr 'addq (list (Imm 2) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20788
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 6) (Var 'tmp20786)))
     (Instr 'negq (list (Var 'tmp20786)))
     (Instr 'movq (list (Imm 9) (Var 'x20784)))
     (Instr 'addq (list (Var 'tmp20786) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20787
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'addq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'movq (list (Var 'x20785) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set: #<Var: x20784>>)
(#<set: #<Var: x20784>>)
(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer)))
 (list
  (cons
   'block20787
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784) (Var 'x20785))
      (set (Var 'x20785))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'addq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'movq (list (Var 'x20785) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20789
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 4) (Var 'x20784)))
     (Instr 'addq (list (Imm 2) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20788
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20786))
      (set (Var 'tmp20786))
      (set (Var 'x20784) (Var 'tmp20786))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 6) (Var 'tmp20786)))
     (Instr 'negq (list (Var 'tmp20786)))
     (Instr 'movq (list (Imm 9) (Var 'x20784)))
     (Instr 'addq (list (Var 'tmp20786) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20788))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer)))
 (list
  (cons
   'block20787
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784) (Var 'x20785))
      (set (Var 'x20785))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'addq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'movq (list (Var 'x20785) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20789
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 4) (Var 'x20784)))
     (Instr 'addq (list (Imm 2) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20788
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20786))
      (set (Var 'tmp20786))
      (set (Var 'x20784) (Var 'tmp20786))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 6) (Var 'tmp20786)))
     (Instr 'negq (list (Var 'tmp20786)))
     (Instr 'movq (list (Imm 9) (Var 'x20784)))
     (Instr 'addq (list (Var 'tmp20786) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20788))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


running pass: build interference graph @ utilities.rkt:2048

#<Var: x20784> -> #<Var: tmp20786>;
#<Var: tmp20786> -> #<Var: x20784>;
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20787
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784) (Var 'x20785))
      (set (Var 'x20785))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'addq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'movq (list (Var 'x20785) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20789
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 4) (Var 'x20784)))
     (Instr 'addq (list (Imm 2) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20788
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20786))
      (set (Var 'tmp20786))
      (set (Var 'x20784) (Var 'tmp20786))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 6) (Var 'tmp20786)))
     (Instr 'negq (list (Var 'tmp20786)))
     (Instr 'movq (list (Imm 9) (Var 'x20784)))
     (Instr 'addq (list (Var 'tmp20786) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20788))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20784 . Integer) (x20785 . Integer) (tmp20786 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20787
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784) (Var 'x20785))
      (set (Var 'x20785))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'addq (list (Var 'x20784) (Var 'x20785)))
     (Instr 'movq (list (Var 'x20785) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20789
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20784))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 4) (Var 'x20784)))
     (Instr 'addq (list (Imm 2) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'block20788
   (Block
    (list
     (list
      'live-sets
      (set (Var 'tmp20786))
      (set (Var 'tmp20786))
      (set (Var 'x20784) (Var 'tmp20786))
      (set (Var 'x20784))
      (set (Var 'x20784))))
    (list
     (Instr 'movq (list (Imm 6) (Var 'tmp20786)))
     (Instr 'negq (list (Var 'tmp20786)))
     (Instr 'movq (list (Imm 9) (Var 'x20784)))
     (Instr 'addq (list (Var 'tmp20786) (Var 'x20784)))
     (Jmp 'block20787))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20788))))))


output:  @ utilities.rkt:2063
result:
16


testing @ utilities.rkt:2037
test-name:
"cond_test_94"

expected-result:
16


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Int 10)
  (Let 'x (Int 5) (Let 'x (Prim '- (list (Int 9))) (Prim '- (list (Var 'x)))))))


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Int 10)
  (Let 'x (Int 5) (Let 'x (Prim '- (list (Int 9))) (Prim '- (list (Var 'x)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Int 10)
  (Let 'x (Int 5) (Let 'x (Prim '- (list (Int 9))) (Prim '- (list (Var 'x)))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20801
  (Int 10)
  (Let
   'x20802
   (Int 5)
   (Let 'x20803 (Prim '- (list (Int 9))) (Prim '- (list (Var 'x20803)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20801
  (Int 10)
  (Let
   'x20802
   (Int 5)
   (Let 'x20803 (Prim '- (list (Int 9))) (Prim '- (list (Var 'x20803)))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20801
  (Int 10)
  (Let
   'x20802
   (Int 5)
   (Let 'x20803 (Prim '- (list (Int 9))) (Prim '- (list (Var 'x20803)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20801
  (Int 10)
  (Let
   'x20802
   (Int 5)
   (Let 'x20803 (Prim '- (list (Int 9))) (Prim '- (list (Var 'x20803)))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x20801) (Int 10))
    (Seq
     (Assign (Var 'x20802) (Int 5))
     (Seq
      (Assign (Var 'x20803) (Prim '- (list (Int 9))))
      (Return (Prim '- (list (Var 'x20803))))))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x20801) (Int 10))
    (Seq
     (Assign (Var 'x20802) (Int 5))
     (Seq
      (Assign (Var 'x20803) (Prim '- (list (Int 9))))
      (Return (Prim '- (list (Var 'x20803))))))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x20801)))
     (Instr 'movq (list (Imm 5) (Var 'x20802)))
     (Instr 'movq (list (Imm 9) (Var 'x20803)))
     (Instr 'negq (list (Var 'x20803)))
     (Instr 'movq (list (Var 'x20803) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 10) (Var 'x20801)))
     (Instr 'movq (list (Imm 5) (Var 'x20802)))
     (Instr 'movq (list (Imm 9) (Var 'x20803)))
     (Instr 'negq (list (Var 'x20803)))
     (Instr 'movq (list (Var 'x20803) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set)
      (set)
      (set (Var 'x20803))
      (set (Var 'x20803))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x20801)))
     (Instr 'movq (list (Imm 5) (Var 'x20802)))
     (Instr 'movq (list (Imm 9) (Var 'x20803)))
     (Instr 'negq (list (Var 'x20803)))
     (Instr 'movq (list (Var 'x20803) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer)))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set)
      (set)
      (set (Var 'x20803))
      (set (Var 'x20803))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x20801)))
     (Instr 'movq (list (Imm 5) (Var 'x20802)))
     (Instr 'movq (list (Imm 9) (Var 'x20803)))
     (Instr 'negq (list (Var 'x20803)))
     (Instr 'movq (list (Var 'x20803) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set)
      (set)
      (set (Var 'x20803))
      (set (Var 'x20803))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x20801)))
     (Instr 'movq (list (Imm 5) (Var 'x20802)))
     (Instr 'movq (list (Imm 9) (Var 'x20803)))
     (Instr 'negq (list (Var 'x20803)))
     (Instr 'movq (list (Var 'x20803) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20803 . Integer) (x20801 . Integer) (x20802 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set)
      (set)
      (set (Var 'x20803))
      (set (Var 'x20803))
      (set (Reg 'rax))
      (set)
      (set)))
    (list
     (Instr 'movq (list (Imm 10) (Var 'x20801)))
     (Instr 'movq (list (Imm 5) (Var 'x20802)))
     (Instr 'movq (list (Imm 9) (Var 'x20803)))
     (Instr 'negq (list (Var 'x20803)))
     (Instr 'movq (list (Var 'x20803) (Reg 'rax)))
     (Instr 'negq (list (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
9


testing @ utilities.rkt:2037
test-name:
"cond_test_95"

expected-result:
9


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program '() (Prim '+ (list (If (Bool #t) (Int 6) (Int 9)) (Int 4))))


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (If (Bool #t) (Int 6) (Int 9)) (Int 4))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (If (Bool #t) (Int 6) (Int 9)) (Int 4))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program '() (Prim '+ (list (If (Bool #t) (Int 6) (Int 9)) (Int 4))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program '() (Prim '+ (list (If (Bool #t) (Int 6) (Int 9)) (Int 4))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'tmp20815
  (If (Bool #t) (Int 6) (Int 9))
  (Prim '+ (list (Var 'tmp20815) (Int 4)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'tmp20815
  (If (Bool #t) (Int 6) (Int 9))
  (Prim '+ (list (Var 'tmp20815) (Int 4)))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Seq (Assign (Var 'tmp20815) (Int 6)) (Goto 'block20816)))
  (cons 'block20816 (Return (Prim '+ (list (Var 'tmp20815) (Int 4)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (tmp20815 . Integer)))
 (list
  (cons 'start (Seq (Assign (Var 'tmp20815) (Int 6)) (Goto 'block20816)))
  (cons 'block20816 (Return (Prim '+ (list (Var 'tmp20815) (Int 4)))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20815 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20815))) (Jmp 'block20816))))
  (cons
   'block20816
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'tmp20815) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20815 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20815))) (Jmp 'block20816))))
  (cons
   'block20816
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'tmp20815) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set: #<Var: tmp20815>>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20815 . Integer)))
 (list
  (cons
   'block20816
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20815) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20815)) (set (Var 'tmp20815))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20815))) (Jmp 'block20816))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20815 . Integer)))
 (list
  (cons
   'block20816
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20815) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20815)) (set (Var 'tmp20815))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20815))) (Jmp 'block20816))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20815 . Integer)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20816
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20815) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20815)) (set (Var 'tmp20815))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20815))) (Jmp 'block20816))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20815 . Integer)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20816
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20815) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'start
   (Block
    (list (list 'live-sets (set (Var 'tmp20815)) (set (Var 'tmp20815))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20815))) (Jmp 'block20816))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_96"

expected-result:
10


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (Prim 'or (list (Bool #f) (Prim 'and (list (Bool #t) (Bool #t)))))
    (Int 6)
    (Int 9))
   (Int 4))))


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #f) (Bool #t) (If (Bool #t) (Bool #t) (Bool #f)))
    (Int 6)
    (Int 9))
   (Int 4))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #f) (Bool #t) (If (Bool #t) (Bool #t) (Bool #f)))
    (Int 6)
    (Int 9))
   (Int 4))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #f) (Bool #t) (If (Bool #t) (Bool #t) (Bool #f)))
    (Int 6)
    (Int 9))
   (Int 4))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Prim
  '+
  (list
   (If
    (If (Bool #f) (Bool #t) (If (Bool #t) (Bool #t) (Bool #f)))
    (Int 6)
    (Int 9))
   (Int 4))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'tmp20828
  (If
   (If (Bool #f) (Bool #t) (If (Bool #t) (Bool #t) (Bool #f)))
   (Int 6)
   (Int 9))
  (Prim '+ (list (Var 'tmp20828) (Int 4)))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'tmp20828
  (If
   (If (Bool #f) (Bool #t) (If (Bool #t) (Bool #t) (Bool #f)))
   (Int 6)
   (Int 9))
  (Prim '+ (list (Var 'tmp20828) (Int 4)))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons 'start (Goto 'block20830))
  (cons 'block20831 (Seq (Assign (Var 'tmp20828) (Int 9)) (Goto 'block20829)))
  (cons 'block20830 (Seq (Assign (Var 'tmp20828) (Int 6)) (Goto 'block20829)))
  (cons 'block20829 (Return (Prim '+ (list (Var 'tmp20828) (Int 4)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (tmp20828 . Integer)))
 (list
  (cons 'start (Goto 'block20830))
  (cons 'block20831 (Seq (Assign (Var 'tmp20828) (Int 9)) (Goto 'block20829)))
  (cons 'block20830 (Seq (Assign (Var 'tmp20828) (Int 6)) (Goto 'block20829)))
  (cons 'block20829 (Return (Prim '+ (list (Var 'tmp20828) (Int 4)))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20828 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block20830))))
  (cons
   'block20831
   (Block
    '()
    (list (Instr 'movq (list (Imm 9) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20830
   (Block
    '()
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20829
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'tmp20828) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20828 . Integer)))
 (list
  (cons 'start (Block '() (list (Jmp 'block20830))))
  (cons
   'block20831
   (Block
    '()
    (list (Instr 'movq (list (Imm 9) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20830
   (Block
    '()
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20829
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'tmp20828) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set: #<Var: tmp20828>>)
(#<set: #<Var: tmp20828>>)
(#<set:>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20828 . Integer)))
 (list
  (cons
   'block20829
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20828) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20831
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 9) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20830
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20830))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20828 . Integer)))
 (list
  (cons
   'block20829
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20828) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20831
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 9) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20830
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20830))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


running pass: build interference graph @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (tmp20828 . Integer)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20829
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20828) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20831
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 9) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20830
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20830))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (tmp20828 . Integer)) (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20829
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'tmp20828) (Reg 'rax)))
     (Instr 'addq (list (Imm 4) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20831
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 9) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'block20830
   (Block
    (list (list 'live-sets (set (Var 'tmp20828)) (set (Var 'tmp20828))))
    (list (Instr 'movq (list (Imm 6) (Var 'tmp20828))) (Jmp 'block20829))))
  (cons
   'start
   (Block (list (list 'live-sets (set))) (list (Jmp 'block20830))))))


output:  @ utilities.rkt:2063
result:
10


testing @ utilities.rkt:2037
test-name:
"cond_test_97"

expected-result:
10


type checker output: @ utilities.rkt:2020
(strip-has-type tsexp):
(Program
 '()
 (Let
  'x
  (Int 1)
  (Let
   'y
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x) (Int 1)))
     (Prim 'eq? (list (Var 'x) (Int 0)))
     (Prim 'eq? (list (Var 'x) (Int 2))))
    (Prim '+ (list (Var 'y) (Int 2)))
    (Prim '+ (list (Var 'y) (Int 10)))))))


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: shrink @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x
  (Int 1)
  (Let
   'y
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x) (Int 1)))
     (Prim 'eq? (list (Var 'x) (Int 0)))
     (Prim 'eq? (list (Var 'x) (Int 2))))
    (Prim '+ (list (Var 'y) (Int 2)))
    (Prim '+ (list (Var 'y) (Int 10)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x
  (Int 1)
  (Let
   'y
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x) (Int 1)))
     (Prim 'eq? (list (Var 'x) (Int 0)))
     (Prim 'eq? (list (Var 'x) (Int 2))))
    (Prim '+ (list (Var 'y) (Int 2)))
    (Prim '+ (list (Var 'y) (Int 10)))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: uniquify @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20843
  (Int 1)
  (Let
   'y20844
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x20843) (Int 1)))
     (Prim 'eq? (list (Var 'x20843) (Int 0)))
     (Prim 'eq? (list (Var 'x20843) (Int 2))))
    (Prim '+ (list (Var 'y20844) (Int 2)))
    (Prim '+ (list (Var 'y20844) (Int 10)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20843
  (Int 1)
  (Let
   'y20844
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x20843) (Int 1)))
     (Prim 'eq? (list (Var 'x20843) (Int 0)))
     (Prim 'eq? (list (Var 'x20843) (Int 2))))
    (Prim '+ (list (Var 'y20844) (Int 2)))
    (Prim '+ (list (Var 'y20844) (Int 10)))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: remove complex opera* @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(Program
 '()
 (Let
  'x20843
  (Int 1)
  (Let
   'y20844
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x20843) (Int 1)))
     (Prim 'eq? (list (Var 'x20843) (Int 0)))
     (Prim 'eq? (list (Var 'x20843) (Int 2))))
    (Prim '+ (list (Var 'y20844) (Int 2)))
    (Prim '+ (list (Var 'y20844) (Int 10)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(Program
 '()
 (Let
  'x20843
  (Int 1)
  (Let
   'y20844
   (Int 2)
   (If
    (If
     (Prim '< (list (Var 'x20843) (Int 1)))
     (Prim 'eq? (list (Var 'x20843) (Int 0)))
     (Prim 'eq? (list (Var 'x20843) (Int 2))))
    (Prim '+ (list (Var 'y20844) (Int 2)))
    (Prim '+ (list (Var 'y20844) (Int 10)))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: explicate control @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(CProgram
 '()
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x20843) (Int 1))
    (Seq
     (Assign (Var 'y20844) (Int 2))
     (IfStmt
      (Prim '< (list (Var 'x20843) (Int 1)))
      (Goto 'block20847)
      (Goto 'block20848)))))
  (cons
   'block20848
   (IfStmt
    (Prim 'eq? (list (Var 'x20843) (Int 2)))
    (Goto 'block20845)
    (Goto 'block20846)))
  (cons
   'block20847
   (IfStmt
    (Prim 'eq? (list (Var 'x20843) (Int 0)))
    (Goto 'block20845)
    (Goto 'block20846)))
  (cons 'block20846 (Return (Prim '+ (list (Var 'y20844) (Int 10)))))
  (cons 'block20845 (Return (Prim '+ (list (Var 'y20844) (Int 2)))))))


type checking... @ utilities.rkt:2053

type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(CProgram
 '((locals-types (x20843 . Integer) (y20844 . Integer)))
 (list
  (cons
   'start
   (Seq
    (Assign (Var 'x20843) (Int 1))
    (Seq
     (Assign (Var 'y20844) (Int 2))
     (IfStmt
      (Prim '< (list (Var 'x20843) (Int 1)))
      (Goto 'block20847)
      (Goto 'block20848)))))
  (cons
   'block20848
   (IfStmt
    (Prim 'eq? (list (Var 'x20843) (Int 2)))
    (Goto 'block20845)
    (Goto 'block20846)))
  (cons
   'block20847
   (IfStmt
    (Prim 'eq? (list (Var 'x20843) (Int 0)))
    (Goto 'block20845)
    (Goto 'block20846)))
  (cons 'block20846 (Return (Prim '+ (list (Var 'y20844) (Int 10)))))
  (cons 'block20845 (Return (Prim '+ (list (Var 'y20844) (Int 2)))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: instruction selection @ utilities.rkt:2048

pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20843 . Integer) (y20844 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20843)))
     (Instr 'movq (list (Imm 2) (Var 'y20844)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20843)))
     (JmpIf 'l 'block20847)
     (Jmp 'block20848))))
  (cons
   'block20848
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 2) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20847
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20846
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20845
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20843 . Integer) (y20844 . Integer)))
 (list
  (cons
   'start
   (Block
    '()
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20843)))
     (Instr 'movq (list (Imm 2) (Var 'y20844)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20843)))
     (JmpIf 'l 'block20847)
     (Jmp 'block20848))))
  (cons
   'block20848
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 2) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20847
   (Block
    '()
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20846
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20845
   (Block
    '()
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: liveness analysis @ utilities.rkt:2048

(#<set:>)
(#<set:>)
(#<set: #<Var: y20844>>)
(#<set: #<Var: y20844>>)
(#<set: #<Var: x20843> #<Var: y20844>>)
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20843 . Integer) (y20844 . Integer)))
 (list
  (cons
   'block20846
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20845
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20848
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 2) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20847
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20843))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20843)))
     (Instr 'movq (list (Imm 2) (Var 'y20844)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20843)))
     (JmpIf 'l 'block20847)
     (Jmp 'block20848))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20843 . Integer) (y20844 . Integer)))
 (list
  (cons
   'block20846
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20845
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20848
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 2) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20847
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20843))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20843)))
     (Instr 'movq (list (Imm 2) (Var 'y20844)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20843)))
     (JmpIf 'l 'block20847)
     (Jmp 'block20848))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


running pass: build interference graph @ utilities.rkt:2048

#<Var: x20843> -> #<Var: y20844>;
#<Var: y20844> -> #<Var: x20843>;
pass output:  @ utilities.rkt:2051
(strip-has-type new-p^):
(X86Program
 '((locals-types (x20843 . Integer) (y20844 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20846
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20845
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20848
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 2) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20847
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20843))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20843)))
     (Instr 'movq (list (Imm 2) (Var 'y20844)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20843)))
     (JmpIf 'l 'block20847)
     (Jmp 'block20848))))))


type-check output:  @ utilities.rkt:2056
(strip-has-type new-p):
(X86Program
 '((locals-types (x20843 . Integer) (y20844 . Integer))
   (conflicts . #<unweighted-graph>))
 (list
  (cons
   'block20846
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 10) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20845
   (Block
    (list (list 'live-sets (set (Reg 'rax)) (set) (set)))
    (list
     (Instr 'movq (list (Var 'y20844) (Reg 'rax)))
     (Instr 'addq (list (Imm 2) (Reg 'rax)))
     (Jmp 'conclusion))))
  (cons
   'block20848
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 2) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'block20847
   (Block
    (list
     (list
      'live-sets
      (set (Var 'y20844))
      (set (Var 'y20844))
      (set (Var 'y20844))))
    (list
     (Instr 'cmpq (list (Imm 0) (Var 'x20843)))
     (JmpIf 'e 'block20845)
     (Jmp 'block20846))))
  (cons
   'start
   (Block
    (list
     (list
      'live-sets
      (set (Var 'x20843))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))
      (set (Var 'x20843) (Var 'y20844))))
    (list
     (Instr 'movq (list (Imm 1) (Var 'x20843)))
     (Instr 'movq (list (Imm 2) (Var 'y20844)))
     (Instr 'cmpq (list (Imm 1) (Var 'x20843)))
     (JmpIf 'l 'block20847)
     (Jmp 'block20848))))))


output:  @ utilities.rkt:2063
result:
12


testing @ utilities.rkt:2037
test-name:
"cond_test_98"

expected-result:
12


317 success(es) 0 failure(s) 0 error(s) 317 test(s) run
0
