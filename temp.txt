type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1)))))
 (Prim
  'vector-ref
  (list
   (Apply
    (Var 'map)
    (list
     (Var 'inc)
     (HasType
      (Prim 'vector (list (Int 0) (Int 41)))
      '(Vector Integer Integer))))
   (Int 1))))


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map)
      (list
       (Var 'inc)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map)
      (list
       (Var 'inc)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map8360)
      (list
       (Var 'inc8361)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map8360)
      (list
       (Var 'inc8361)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
map8360
COMING HERE !!!!!
inc8361
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
      (Apply
       (Var 'f8362)
       (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8366
    (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
    (Let
     'vecinit8367
     (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))
     (Let
      '_8370
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8365
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8369
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366)))
        (Let
         '_8368
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367)))
         (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (Let
        'vecinit8372
        (Int 0)
        (Let
         'vecinit8373
         (Int 41)
         (Let
          '_8376
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8371
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8375
            (Prim
             'vector-set!
             (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372)))
            (Let
             '_8374
             (Prim
              'vector-set!
              (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373)))
             (Var 'alloc8371)))))))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8366
    (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
    (Let
     'vecinit8367
     (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))
     (Let
      '_8370
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8365
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8369
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366)))
        (Let
         '_8368
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367)))
         (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (Let
        'vecinit8372
        (Int 0)
        (Let
         'vecinit8373
         (Int 41)
         (Let
          '_8376
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8371
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8375
            (Prim
             'vector-set!
             (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372)))
            (Let
             '_8374
             (Prim
              'vector-set!
              (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373)))
             (Var 'alloc8371)))))))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8366
    (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
    (Let
     'vecinit8367
     (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))
     (Let
      '_8370
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8365
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8369
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366)))
        (Let
         '_8368
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367)))
         (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (Let
        'vecinit8372
        (Int 0)
        (Let
         'vecinit8373
         (Int 41)
         (Let
          '_8376
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8371
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8375
            (Prim
             'vector-set!
             (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372)))
            (Let
             '_8374
             (Prim
              'vector-set!
              (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373)))
             (Var 'alloc8371)))))))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8366
    (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 0)))))
    (Let
     'vecinit8367
     (Apply (Var 'f8362) (list (Prim 'vector-ref (list (Var 'v8363) (Int 1)))))
     (Let
      '_8370
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8365
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8369
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366)))
        (Let
         '_8368
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367)))
         (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8360 2)
      (list
       (FunRef 'inc8361 1)
       (Let
        'vecinit8372
        (Int 0)
        (Let
         'vecinit8373
         (Int 41)
         (Let
          '_8376
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8371
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8375
            (Prim
             'vector-set!
             (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372)))
            (Let
             '_8374
             (Prim
              'vector-set!
              (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373)))
             (Var 'alloc8371)))))))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8366
    (Let
     'tmp8377
     (Prim 'vector-ref (list (Var 'v8363) (Int 0)))
     (Apply (Var 'f8362) (list (Var 'tmp8377))))
    (Let
     'vecinit8367
     (Let
      'tmp8378
      (Prim 'vector-ref (list (Var 'v8363) (Int 1)))
      (Apply (Var 'f8362) (list (Var 'tmp8378))))
     (Let
      '_8370
      (If
       (Let
        'tmp8379
        (Let
         'tmp8380
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp8380) (Int 24))))
        (Let
         'tmp8381
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp8379) (Var 'tmp8381)))))
       (Void)
       (collect 24))
      (Let
       'alloc8365
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8369
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366)))
        (Let
         '_8368
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367)))
         (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8382
    (Let
     'tmp8383
     (FunRef 'map8360 2)
     (Let
      'tmp8384
      (FunRef 'inc8361 1)
      (Let
       'tmp8385
       (Let
        'vecinit8372
        (Int 0)
        (Let
         'vecinit8373
         (Int 41)
         (Let
          '_8376
          (If
           (Let
            'tmp8386
            (Let
             'tmp8387
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8387) (Int 24))))
            (Let
             'tmp8388
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8386) (Var 'tmp8388)))))
           (Void)
           (collect 24))
          (Let
           'alloc8371
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8375
            (Prim
             'vector-set!
             (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372)))
            (Let
             '_8374
             (Prim
              'vector-set!
              (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373)))
             (Var 'alloc8371)))))))
       (Apply (Var 'tmp8383) (list (Var 'tmp8384) (Var 'tmp8385))))))
    (Prim 'vector-ref (list (Var 'tmp8382) (Int 1)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8366
    (Let
     'tmp8377
     (Prim 'vector-ref (list (Var 'v8363) (Int 0)))
     (Apply (Var 'f8362) (list (Var 'tmp8377))))
    (Let
     'vecinit8367
     (Let
      'tmp8378
      (Prim 'vector-ref (list (Var 'v8363) (Int 1)))
      (Apply (Var 'f8362) (list (Var 'tmp8378))))
     (Let
      '_8370
      (If
       (Let
        'tmp8379
        (Let
         'tmp8380
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp8380) (Int 24))))
        (Let
         'tmp8381
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp8379) (Var 'tmp8381)))))
       (Void)
       (collect 24))
      (Let
       'alloc8365
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8369
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366)))
        (Let
         '_8368
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367)))
         (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8364) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8382
    (Let
     'tmp8383
     (FunRef 'map8360 2)
     (Let
      'tmp8384
      (FunRef 'inc8361 1)
      (Let
       'tmp8385
       (Let
        'vecinit8372
        (Int 0)
        (Let
         'vecinit8373
         (Int 41)
         (Let
          '_8376
          (If
           (Let
            'tmp8386
            (Let
             'tmp8387
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8387) (Int 24))))
            (Let
             'tmp8388
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8386) (Var 'tmp8388)))))
           (Void)
           (collect 24))
          (Let
           'alloc8371
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8375
            (Prim
             'vector-set!
             (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372)))
            (Let
             '_8374
             (Prim
              'vector-set!
              (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373)))
             (Var 'alloc8371)))))))
       (Apply (Var 'tmp8383) (list (Var 'tmp8384) (Var 'tmp8385))))))
    (Prim 'vector-ref (list (Var 'tmp8382) (Int 1)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (list
    (cons
     'map8360start
     (Seq
      (Assign (Var 'tmp8377) (Prim 'vector-ref (list (Var 'v8363) (Int 0))))
      (Seq
       (Assign (Var 'vecinit8366) (Call (Var 'f8362) (list (Var 'tmp8377))))
       (Seq
        (Assign (Var 'tmp8378) (Prim 'vector-ref (list (Var 'v8363) (Int 1))))
        (Seq
         (Assign (Var 'vecinit8367) (Call (Var 'f8362) (list (Var 'tmp8378))))
         (Seq
          (Assign (Var 'tmp8380) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8379) (Prim '+ (list (Var 'tmp8380) (Int 24))))
           (Seq
            (Assign (Var 'tmp8381) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8379) (Var 'tmp8381)))
             (Goto 'block8390)
             (Goto 'block8391))))))))))
    (cons 'block8391 (Seq (collect 24) (Goto 'block8389)))
    (cons 'block8390 (Seq (Assign (Var '_8370) (Void)) (Goto 'block8389)))
    (cons
     'block8389
     (Seq
      (Assign (Var 'alloc8365) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8369)
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366))))
       (Seq
        (Assign
         (Var '_8368)
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367))))
        (Return (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '()
   (list (cons 'inc8361start (Return (Prim '+ (list (Var 'x8364) (Int 1)))))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8383) (FunRef 'map8360 2))
      (Seq
       (Assign (Var 'tmp8384) (FunRef 'inc8361 1))
       (Seq
        (Assign (Var 'vecinit8372) (Int 0))
        (Seq
         (Assign (Var 'vecinit8373) (Int 41))
         (Seq
          (Assign (Var 'tmp8387) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8386) (Prim '+ (list (Var 'tmp8387) (Int 24))))
           (Seq
            (Assign (Var 'tmp8388) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8386) (Var 'tmp8388)))
             (Goto 'block8393)
             (Goto 'block8394))))))))))
    (cons 'block8394 (Seq (collect 24) (Goto 'block8392)))
    (cons 'block8393 (Seq (Assign (Var '_8376) (Void)) (Goto 'block8392)))
    (cons
     'block8392
     (Seq
      (Assign (Var 'alloc8371) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8375)
        (Prim 'vector-set! (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372))))
       (Seq
        (Assign
         (Var '_8374)
         (Prim 'vector-set! (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373))))
        (Seq
         (Assign (Var 'tmp8385) (Var 'alloc8371))
         (Seq
          (Assign
           (Var 'tmp8382)
           (Call (Var 'tmp8383) (list (Var 'tmp8384) (Var 'tmp8385))))
          (Return (Prim 'vector-ref (list (Var 'tmp8382) (Int 1))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '((f8362 : (Integer -> Integer)) (v8363 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '((locals-types
      (f8362 Integer -> Integer)
      (vecinit8367 . Integer)
      (tmp8377 . Integer)
      (alloc8365 Vector Integer Integer)
      (_8368 . Void)
      (tmp8379 . Integer)
      (_8370 . Void)
      (tmp8381 . Integer)
      (tmp8378 . Integer)
      (vecinit8366 . Integer)
      (v8363 Vector Integer Integer)
      (tmp8380 . Integer)
      (_8369 . Void)))
   (list
    (cons
     'map8360start
     (Seq
      (Assign (Var 'tmp8377) (Prim 'vector-ref (list (Var 'v8363) (Int 0))))
      (Seq
       (Assign (Var 'vecinit8366) (Call (Var 'f8362) (list (Var 'tmp8377))))
       (Seq
        (Assign (Var 'tmp8378) (Prim 'vector-ref (list (Var 'v8363) (Int 1))))
        (Seq
         (Assign (Var 'vecinit8367) (Call (Var 'f8362) (list (Var 'tmp8378))))
         (Seq
          (Assign (Var 'tmp8380) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8379) (Prim '+ (list (Var 'tmp8380) (Int 24))))
           (Seq
            (Assign (Var 'tmp8381) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8379) (Var 'tmp8381)))
             (Goto 'block8390)
             (Goto 'block8391))))))))))
    (cons 'block8391 (Seq (collect 24) (Goto 'block8389)))
    (cons 'block8390 (Seq (Assign (Var '_8370) (Void)) (Goto 'block8389)))
    (cons
     'block8389
     (Seq
      (Assign (Var 'alloc8365) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8369)
        (Prim 'vector-set! (list (Var 'alloc8365) (Int 0) (Var 'vecinit8366))))
       (Seq
        (Assign
         (Var '_8368)
         (Prim 'vector-set! (list (Var 'alloc8365) (Int 1) (Var 'vecinit8367))))
        (Return (Var 'alloc8365))))))))
  (Def
   'inc8361
   '((x8364 : Integer))
   'Integer
   '((locals-types (x8364 . Integer)))
   (list (cons 'inc8361start (Return (Prim '+ (list (Var 'x8364) (Int 1)))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (tmp8383
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (tmp8385 Vector Integer Integer)
      (_8374 . Void)
      (tmp8387 . Integer)
      (_8376 . Void)
      (vecinit8372 . Integer)
      (_8375 . Void)
      (tmp8382 Vector Integer Integer)
      (alloc8371 Vector Integer Integer)
      (tmp8386 . Integer)
      (tmp8384 Integer -> Integer)
      (tmp8388 . Integer)
      (vecinit8373 . Integer)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8383) (FunRef 'map8360 2))
      (Seq
       (Assign (Var 'tmp8384) (FunRef 'inc8361 1))
       (Seq
        (Assign (Var 'vecinit8372) (Int 0))
        (Seq
         (Assign (Var 'vecinit8373) (Int 41))
         (Seq
          (Assign (Var 'tmp8387) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8386) (Prim '+ (list (Var 'tmp8387) (Int 24))))
           (Seq
            (Assign (Var 'tmp8388) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8386) (Var 'tmp8388)))
             (Goto 'block8393)
             (Goto 'block8394))))))))))
    (cons 'block8394 (Seq (collect 24) (Goto 'block8392)))
    (cons 'block8393 (Seq (Assign (Var '_8376) (Void)) (Goto 'block8392)))
    (cons
     'block8392
     (Seq
      (Assign (Var 'alloc8371) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8375)
        (Prim 'vector-set! (list (Var 'alloc8371) (Int 0) (Var 'vecinit8372))))
       (Seq
        (Assign
         (Var '_8374)
         (Prim 'vector-set! (list (Var 'alloc8371) (Int 1) (Var 'vecinit8373))))
        (Seq
         (Assign (Var 'tmp8385) (Var 'alloc8371))
         (Seq
          (Assign
           (Var 'tmp8382)
           (Call (Var 'tmp8383) (list (Var 'tmp8384) (Var 'tmp8385))))
          (Return (Prim 'vector-ref (list (Var 'tmp8382) (Int 1))))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '()
   '(Vector Integer Integer)
   '((locals-types
      (f8362 Integer -> Integer)
      (v8363 Vector Integer Integer)
      (f8362 Integer -> Integer)
      (vecinit8367 . Integer)
      (tmp8377 . Integer)
      (alloc8365 Vector Integer Integer)
      (_8368 . Void)
      (tmp8379 . Integer)
      (_8370 . Void)
      (tmp8381 . Integer)
      (tmp8378 . Integer)
      (vecinit8366 . Integer)
      (v8363 Vector Integer Integer)
      (tmp8380 . Integer)
      (_8369 . Void))
     (num-params . 2))
   (list
    (cons
     'map8360start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'f8362)))
       (Instr 'movq (list (Reg 'rsi) (Var 'v8363)))
       (Instr 'movq (list (Var 'v8363) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8377)))
       (Instr 'movq (list (Var 'tmp8377) (Reg 'rdi)))
       (IndirectCallq (Var 'f8362) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8366)))
       (Instr 'movq (list (Var 'v8363) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8378)))
       (Instr 'movq (list (Var 'tmp8378) (Reg 'rdi)))
       (IndirectCallq (Var 'f8362) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8367)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8380)))
       (Instr 'movq (list (Var 'tmp8380) (Var 'tmp8379)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8379)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8381)))
       (Instr 'cmpq (list (Var 'tmp8381) (Var 'tmp8379)))
       (JmpIf 'l 'block8390)
       (Jmp 'block8391))))
    (cons
     'block8391
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8389))))
    (cons
     'block8390
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8370))) (Jmp 'block8389))))
    (cons
     'block8389
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8365)))
       (Instr 'movq (list (Var 'alloc8365) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8366) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8369)))
       (Instr 'movq (list (Var 'alloc8365) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8367) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8368)))
       (Instr 'movq (list (Var 'alloc8365) (Reg 'rax)))
       (Jmp 'map8360conclusion))))))
  (Def
   'inc8361
   '()
   'Integer
   '((locals-types (x8364 . Integer) (x8364 . Integer)) (num-params . 1))
   (list
    (cons
     'inc8361start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8364)))
       (Instr 'movq (list (Var 'x8364) (Reg 'rax)))
       (Instr 'addq (list (Imm 1) (Reg 'rax)))
       (Jmp 'inc8361conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (tmp8383
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (tmp8385 Vector Integer Integer)
      (_8374 . Void)
      (tmp8387 . Integer)
      (_8376 . Void)
      (vecinit8372 . Integer)
      (_8375 . Void)
      (tmp8382 Vector Integer Integer)
      (alloc8371 Vector Integer Integer)
      (tmp8386 . Integer)
      (tmp8384 Integer -> Integer)
      (tmp8388 . Integer)
      (vecinit8373 . Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'map8360) (Var 'tmp8383)))
       (Instr 'leaq (list (Global 'inc8361) (Var 'tmp8384)))
       (Instr 'movq (list (Imm 0) (Var 'vecinit8372)))
       (Instr 'movq (list (Imm 41) (Var 'vecinit8373)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8387)))
       (Instr 'movq (list (Var 'tmp8387) (Var 'tmp8386)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8386)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8388)))
       (Instr 'cmpq (list (Var 'tmp8388) (Var 'tmp8386)))
       (JmpIf 'l 'block8393)
       (Jmp 'block8394))))
    (cons
     'block8394
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8392))))
    (cons
     'block8393
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8376))) (Jmp 'block8392))))
    (cons
     'block8392
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8371)))
       (Instr 'movq (list (Var 'alloc8371) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8372) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8375)))
       (Instr 'movq (list (Var 'alloc8371) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8373) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8374)))
       (Instr 'movq (list (Var 'alloc8371) (Var 'tmp8385)))
       (Instr 'movq (list (Var 'tmp8384) (Reg 'rdi)))
       (Instr 'movq (list (Var 'tmp8385) (Reg 'rsi)))
       (IndirectCallq (Var 'tmp8383) 2)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8382)))
       (Instr 'movq (list (Var 'tmp8382) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8360
   '()
   '(Vector Integer Integer)
   '((locals-types
      (f8362 Integer -> Integer)
      (v8363 Vector Integer Integer)
      (f8362 Integer -> Integer)
      (vecinit8367 . Integer)
      (tmp8377 . Integer)
      (alloc8365 Vector Integer Integer)
      (_8368 . Void)
      (tmp8379 . Integer)
      (_8370 . Void)
      (tmp8381 . Integer)
      (tmp8378 . Integer)
      (vecinit8366 . Integer)
      (v8363 Vector Integer Integer)
      (tmp8380 . Integer)
      (_8369 . Void))
     (num-params . 2))
   (list
    (cons
     'map8360start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'f8362)))
       (Instr 'movq (list (Reg 'rsi) (Var 'v8363)))
       (Instr 'movq (list (Var 'v8363) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8377)))
       (Instr 'movq (list (Var 'tmp8377) (Reg 'rdi)))
       (IndirectCallq (Var 'f8362) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8366)))
       (Instr 'movq (list (Var 'v8363) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8378)))
       (Instr 'movq (list (Var 'tmp8378) (Reg 'rdi)))
       (IndirectCallq (Var 'f8362) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8367)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8380)))
       (Instr 'movq (list (Var 'tmp8380) (Var 'tmp8379)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8379)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8381)))
       (Instr 'cmpq (list (Var 'tmp8381) (Var 'tmp8379)))
       (JmpIf 'l 'block8390)
       (Jmp 'block8391))))
    (cons
     'block8391
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8389))))
    (cons
     'block8390
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8370))) (Jmp 'block8389))))
    (cons
     'block8389
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8365)))
       (Instr 'movq (list (Var 'alloc8365) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8366) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8369)))
       (Instr 'movq (list (Var 'alloc8365) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8367) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8368)))
       (Instr 'movq (list (Var 'alloc8365) (Reg 'rax)))
       (Jmp 'map8360conclusion))))))
  (Def
   'inc8361
   '()
   'Integer
   '((locals-types (x8364 . Integer) (x8364 . Integer)) (num-params . 1))
   (list
    (cons
     'inc8361start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8364)))
       (Instr 'movq (list (Var 'x8364) (Reg 'rax)))
       (Instr 'addq (list (Imm 1) (Reg 'rax)))
       (Jmp 'inc8361conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (tmp8383
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (tmp8385 Vector Integer Integer)
      (_8374 . Void)
      (tmp8387 . Integer)
      (_8376 . Void)
      (vecinit8372 . Integer)
      (_8375 . Void)
      (tmp8382 Vector Integer Integer)
      (alloc8371 Vector Integer Integer)
      (tmp8386 . Integer)
      (tmp8384 Integer -> Integer)
      (tmp8388 . Integer)
      (vecinit8373 . Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'map8360) (Var 'tmp8383)))
       (Instr 'leaq (list (Global 'inc8361) (Var 'tmp8384)))
       (Instr 'movq (list (Imm 0) (Var 'vecinit8372)))
       (Instr 'movq (list (Imm 41) (Var 'vecinit8373)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8387)))
       (Instr 'movq (list (Var 'tmp8387) (Var 'tmp8386)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8386)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8388)))
       (Instr 'cmpq (list (Var 'tmp8388) (Var 'tmp8386)))
       (JmpIf 'l 'block8393)
       (Jmp 'block8394))))
    (cons
     'block8394
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8392))))
    (cons
     'block8393
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8376))) (Jmp 'block8392))))
    (cons
     'block8392
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8371)))
       (Instr 'movq (list (Var 'alloc8371) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8372) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8375)))
       (Instr 'movq (list (Var 'alloc8371) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8373) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8374)))
       (Instr 'movq (list (Var 'alloc8371) (Var 'tmp8385)))
       (Instr 'movq (list (Var 'tmp8384) (Reg 'rdi)))
       (Instr 'movq (list (Var 'tmp8385) (Reg 'rsi)))
       (IndirectCallq (Var 'tmp8383) 2)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8382)))
       (Instr 'movq (list (Var 'tmp8382) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_1"

expected-result:
42


type-check: Boolean != Integer
in (Apply (Var 'id) (list (Bool #f)))

type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
#f


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp '() '() (Let 'x (Int 42) (Var 'x)))


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x (Int 42) (Var 'x)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x (Int 42) (Var 'x)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list (Def 'main '() 'Integer '() (Let 'x8396 (Int 42) (Var 'x8396)))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq (Assign (Var 'x8396) (Int 42)) (Return (Var 'x8396))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'main
   '()
   'Integer
   '((locals-types (x8396 . Integer)))
   (list
    (cons
     'mainstart
     (Seq (Assign (Var 'x8396) (Int 42)) (Return (Var 'x8396))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'main
   '()
   'Integer
   '((locals-types (x8396 . Integer)) (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'movq (list (Imm 42) (Var 'x8396)))
       (Instr 'movq (list (Var 'x8396) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'main
   '()
   'Integer
   '((locals-types (x8396 . Integer)) (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'movq (list (Imm 42) (Var 'x8396)))
       (Instr 'movq (list (Var 'x8396) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_3"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list (Def 'id '((x : Integer)) 'Integer '() (Var 'x)))
 (Apply (Var 'id) (list (Int 42))))


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id '((x : Integer)) 'Integer '() (Var 'x))
  (Def 'main '() 'Integer '() (Apply (Var 'id) (list (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id '((x : Integer)) 'Integer '() (Var 'x))
  (Def 'main '() 'Integer '() (Apply (Var 'id) (list (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (Var 'id8398) (list (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (Var 'id8398) (list (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
id8398
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def 'main '() 'Integer '() (Apply (FunRef 'id8398 1) (list (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def
   'main
   '()
   'Integer
   '()
   (Let 'tmp8400 (FunRef 'id8398 1) (Apply (Var 'tmp8400) (list (Int 42)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def 'id8398 '((x8399 : Integer)) 'Integer '() (Var 'x8399))
  (Def
   'main
   '()
   'Integer
   '()
   (Let 'tmp8400 (FunRef 'id8398 1) (Apply (Var 'tmp8400) (list (Int 42)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'id8398
   '((x8399 : Integer))
   'Integer
   '()
   (list (cons 'id8398start (Return (Var 'x8399)))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8400) (FunRef 'id8398 1))
      (TailCall (Var 'tmp8400) (list (Int 42)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'id8398
   '((x8399 : Integer))
   'Integer
   '((locals-types (x8399 . Integer)))
   (list (cons 'id8398start (Return (Var 'x8399)))))
  (Def
   'main
   '()
   'Integer
   '((locals-types (tmp8400 Integer -> Integer)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8400) (FunRef 'id8398 1))
      (TailCall (Var 'tmp8400) (list (Int 42)))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

(#<Int: 42>)
(#<Reg: rdi> #<Reg: rsi> #<Reg: rdx> #<Reg: rcx> #<Reg: r8> #<Reg: r9>)
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'id8398
   '()
   'Integer
   '((locals-types (x8399 . Integer) (x8399 . Integer)) (num-params . 1))
   (list
    (cons
     'id8398start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8399)))
       (Instr 'movq (list (Var 'x8399) (Reg 'rax)))
       (Jmp 'id8398conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types (tmp8400 Integer -> Integer)) (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'id8398) (Var 'tmp8400)))
       (Instr 'movq (list (Imm 42) (Reg 'rdi)))
       (TailJmp (Var 'tmp8400) 1))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'id8398
   '()
   'Integer
   '((locals-types (x8399 . Integer) (x8399 . Integer)) (num-params . 1))
   (list
    (cons
     'id8398start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8399)))
       (Instr 'movq (list (Var 'x8399) (Reg 'rax)))
       (Jmp 'id8398conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types (tmp8400 Integer -> Integer)) (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'id8398) (Var 'tmp8400)))
       (Instr 'movq (list (Imm 42) (Reg 'rdi)))
       (TailJmp (Var 'tmp8400) 1))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_4"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1)))))
 (Prim
  'vector-ref
  (list
   (Apply
    (Var 'map)
    (list
     (Var 'inc)
     (HasType
      (Prim 'vector (list (Int 0) (Int 41)))
      '(Vector Integer Integer))))
   (Int 1))))


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map)
      (list
       (Var 'inc)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map)
      (list
       (Var 'inc)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map8402)
      (list
       (Var 'inc8403)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map8402)
      (list
       (Var 'inc8403)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
map8402
COMING HERE !!!!!
inc8403
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
      (Apply
       (Var 'f8404)
       (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8408
    (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
    (Let
     'vecinit8409
     (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))
     (Let
      '_8412
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8407
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8411
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408)))
        (Let
         '_8410
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409)))
         (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (Let
        'vecinit8414
        (Int 0)
        (Let
         'vecinit8415
         (Int 41)
         (Let
          '_8418
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8413
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8417
            (Prim
             'vector-set!
             (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414)))
            (Let
             '_8416
             (Prim
              'vector-set!
              (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415)))
             (Var 'alloc8413)))))))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8408
    (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
    (Let
     'vecinit8409
     (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))
     (Let
      '_8412
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8407
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8411
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408)))
        (Let
         '_8410
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409)))
         (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (Let
        'vecinit8414
        (Int 0)
        (Let
         'vecinit8415
         (Int 41)
         (Let
          '_8418
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8413
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8417
            (Prim
             'vector-set!
             (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414)))
            (Let
             '_8416
             (Prim
              'vector-set!
              (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415)))
             (Var 'alloc8413)))))))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8408
    (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
    (Let
     'vecinit8409
     (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))
     (Let
      '_8412
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8407
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8411
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408)))
        (Let
         '_8410
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409)))
         (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (Let
        'vecinit8414
        (Int 0)
        (Let
         'vecinit8415
         (Int 41)
         (Let
          '_8418
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8413
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8417
            (Prim
             'vector-set!
             (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414)))
            (Let
             '_8416
             (Prim
              'vector-set!
              (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415)))
             (Var 'alloc8413)))))))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8408
    (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 0)))))
    (Let
     'vecinit8409
     (Apply (Var 'f8404) (list (Prim 'vector-ref (list (Var 'v8405) (Int 1)))))
     (Let
      '_8412
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8407
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8411
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408)))
        (Let
         '_8410
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409)))
         (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8402 2)
      (list
       (FunRef 'inc8403 1)
       (Let
        'vecinit8414
        (Int 0)
        (Let
         'vecinit8415
         (Int 41)
         (Let
          '_8418
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8413
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8417
            (Prim
             'vector-set!
             (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414)))
            (Let
             '_8416
             (Prim
              'vector-set!
              (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415)))
             (Var 'alloc8413)))))))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8408
    (Let
     'tmp8419
     (Prim 'vector-ref (list (Var 'v8405) (Int 0)))
     (Apply (Var 'f8404) (list (Var 'tmp8419))))
    (Let
     'vecinit8409
     (Let
      'tmp8420
      (Prim 'vector-ref (list (Var 'v8405) (Int 1)))
      (Apply (Var 'f8404) (list (Var 'tmp8420))))
     (Let
      '_8412
      (If
       (Let
        'tmp8421
        (Let
         'tmp8422
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp8422) (Int 24))))
        (Let
         'tmp8423
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp8421) (Var 'tmp8423)))))
       (Void)
       (collect 24))
      (Let
       'alloc8407
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8411
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408)))
        (Let
         '_8410
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409)))
         (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8424
    (Let
     'tmp8425
     (FunRef 'map8402 2)
     (Let
      'tmp8426
      (FunRef 'inc8403 1)
      (Let
       'tmp8427
       (Let
        'vecinit8414
        (Int 0)
        (Let
         'vecinit8415
         (Int 41)
         (Let
          '_8418
          (If
           (Let
            'tmp8428
            (Let
             'tmp8429
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8429) (Int 24))))
            (Let
             'tmp8430
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8428) (Var 'tmp8430)))))
           (Void)
           (collect 24))
          (Let
           'alloc8413
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8417
            (Prim
             'vector-set!
             (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414)))
            (Let
             '_8416
             (Prim
              'vector-set!
              (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415)))
             (Var 'alloc8413)))))))
       (Apply (Var 'tmp8425) (list (Var 'tmp8426) (Var 'tmp8427))))))
    (Prim 'vector-ref (list (Var 'tmp8424) (Int 1)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8408
    (Let
     'tmp8419
     (Prim 'vector-ref (list (Var 'v8405) (Int 0)))
     (Apply (Var 'f8404) (list (Var 'tmp8419))))
    (Let
     'vecinit8409
     (Let
      'tmp8420
      (Prim 'vector-ref (list (Var 'v8405) (Int 1)))
      (Apply (Var 'f8404) (list (Var 'tmp8420))))
     (Let
      '_8412
      (If
       (Let
        'tmp8421
        (Let
         'tmp8422
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp8422) (Int 24))))
        (Let
         'tmp8423
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp8421) (Var 'tmp8423)))))
       (Void)
       (collect 24))
      (Let
       'alloc8407
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8411
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408)))
        (Let
         '_8410
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409)))
         (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8406) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8424
    (Let
     'tmp8425
     (FunRef 'map8402 2)
     (Let
      'tmp8426
      (FunRef 'inc8403 1)
      (Let
       'tmp8427
       (Let
        'vecinit8414
        (Int 0)
        (Let
         'vecinit8415
         (Int 41)
         (Let
          '_8418
          (If
           (Let
            'tmp8428
            (Let
             'tmp8429
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8429) (Int 24))))
            (Let
             'tmp8430
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8428) (Var 'tmp8430)))))
           (Void)
           (collect 24))
          (Let
           'alloc8413
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8417
            (Prim
             'vector-set!
             (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414)))
            (Let
             '_8416
             (Prim
              'vector-set!
              (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415)))
             (Var 'alloc8413)))))))
       (Apply (Var 'tmp8425) (list (Var 'tmp8426) (Var 'tmp8427))))))
    (Prim 'vector-ref (list (Var 'tmp8424) (Int 1)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (list
    (cons
     'map8402start
     (Seq
      (Assign (Var 'tmp8419) (Prim 'vector-ref (list (Var 'v8405) (Int 0))))
      (Seq
       (Assign (Var 'vecinit8408) (Call (Var 'f8404) (list (Var 'tmp8419))))
       (Seq
        (Assign (Var 'tmp8420) (Prim 'vector-ref (list (Var 'v8405) (Int 1))))
        (Seq
         (Assign (Var 'vecinit8409) (Call (Var 'f8404) (list (Var 'tmp8420))))
         (Seq
          (Assign (Var 'tmp8422) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8421) (Prim '+ (list (Var 'tmp8422) (Int 24))))
           (Seq
            (Assign (Var 'tmp8423) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8421) (Var 'tmp8423)))
             (Goto 'block8432)
             (Goto 'block8433))))))))))
    (cons 'block8433 (Seq (collect 24) (Goto 'block8431)))
    (cons 'block8432 (Seq (Assign (Var '_8412) (Void)) (Goto 'block8431)))
    (cons
     'block8431
     (Seq
      (Assign (Var 'alloc8407) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8411)
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408))))
       (Seq
        (Assign
         (Var '_8410)
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409))))
        (Return (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '()
   (list (cons 'inc8403start (Return (Prim '+ (list (Var 'x8406) (Int 1)))))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8425) (FunRef 'map8402 2))
      (Seq
       (Assign (Var 'tmp8426) (FunRef 'inc8403 1))
       (Seq
        (Assign (Var 'vecinit8414) (Int 0))
        (Seq
         (Assign (Var 'vecinit8415) (Int 41))
         (Seq
          (Assign (Var 'tmp8429) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8428) (Prim '+ (list (Var 'tmp8429) (Int 24))))
           (Seq
            (Assign (Var 'tmp8430) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8428) (Var 'tmp8430)))
             (Goto 'block8435)
             (Goto 'block8436))))))))))
    (cons 'block8436 (Seq (collect 24) (Goto 'block8434)))
    (cons 'block8435 (Seq (Assign (Var '_8418) (Void)) (Goto 'block8434)))
    (cons
     'block8434
     (Seq
      (Assign (Var 'alloc8413) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8417)
        (Prim 'vector-set! (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414))))
       (Seq
        (Assign
         (Var '_8416)
         (Prim 'vector-set! (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415))))
        (Seq
         (Assign (Var 'tmp8427) (Var 'alloc8413))
         (Seq
          (Assign
           (Var 'tmp8424)
           (Call (Var 'tmp8425) (list (Var 'tmp8426) (Var 'tmp8427))))
          (Return (Prim 'vector-ref (list (Var 'tmp8424) (Int 1))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '((f8404 : (Integer -> Integer)) (v8405 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '((locals-types
      (tmp8420 . Integer)
      (_8412 . Void)
      (vecinit8408 . Integer)
      (v8405 Vector Integer Integer)
      (alloc8407 Vector Integer Integer)
      (_8411 . Void)
      (tmp8422 . Integer)
      (f8404 Integer -> Integer)
      (vecinit8409 . Integer)
      (tmp8419 . Integer)
      (_8410 . Void)
      (tmp8421 . Integer)
      (tmp8423 . Integer)))
   (list
    (cons
     'map8402start
     (Seq
      (Assign (Var 'tmp8419) (Prim 'vector-ref (list (Var 'v8405) (Int 0))))
      (Seq
       (Assign (Var 'vecinit8408) (Call (Var 'f8404) (list (Var 'tmp8419))))
       (Seq
        (Assign (Var 'tmp8420) (Prim 'vector-ref (list (Var 'v8405) (Int 1))))
        (Seq
         (Assign (Var 'vecinit8409) (Call (Var 'f8404) (list (Var 'tmp8420))))
         (Seq
          (Assign (Var 'tmp8422) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8421) (Prim '+ (list (Var 'tmp8422) (Int 24))))
           (Seq
            (Assign (Var 'tmp8423) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8421) (Var 'tmp8423)))
             (Goto 'block8432)
             (Goto 'block8433))))))))))
    (cons 'block8433 (Seq (collect 24) (Goto 'block8431)))
    (cons 'block8432 (Seq (Assign (Var '_8412) (Void)) (Goto 'block8431)))
    (cons
     'block8431
     (Seq
      (Assign (Var 'alloc8407) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8411)
        (Prim 'vector-set! (list (Var 'alloc8407) (Int 0) (Var 'vecinit8408))))
       (Seq
        (Assign
         (Var '_8410)
         (Prim 'vector-set! (list (Var 'alloc8407) (Int 1) (Var 'vecinit8409))))
        (Return (Var 'alloc8407))))))))
  (Def
   'inc8403
   '((x8406 : Integer))
   'Integer
   '((locals-types (x8406 . Integer)))
   (list (cons 'inc8403start (Return (Prim '+ (list (Var 'x8406) (Int 1)))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (alloc8413 Vector Integer Integer)
      (tmp8428 . Integer)
      (tmp8426 Integer -> Integer)
      (tmp8430 . Integer)
      (vecinit8415 . Integer)
      (tmp8427 Vector Integer Integer)
      (tmp8429 . Integer)
      (_8416 . Void)
      (tmp8425
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (_8418 . Void)
      (vecinit8414 . Integer)
      (_8417 . Void)
      (tmp8424 Vector Integer Integer)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8425) (FunRef 'map8402 2))
      (Seq
       (Assign (Var 'tmp8426) (FunRef 'inc8403 1))
       (Seq
        (Assign (Var 'vecinit8414) (Int 0))
        (Seq
         (Assign (Var 'vecinit8415) (Int 41))
         (Seq
          (Assign (Var 'tmp8429) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8428) (Prim '+ (list (Var 'tmp8429) (Int 24))))
           (Seq
            (Assign (Var 'tmp8430) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8428) (Var 'tmp8430)))
             (Goto 'block8435)
             (Goto 'block8436))))))))))
    (cons 'block8436 (Seq (collect 24) (Goto 'block8434)))
    (cons 'block8435 (Seq (Assign (Var '_8418) (Void)) (Goto 'block8434)))
    (cons
     'block8434
     (Seq
      (Assign (Var 'alloc8413) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8417)
        (Prim 'vector-set! (list (Var 'alloc8413) (Int 0) (Var 'vecinit8414))))
       (Seq
        (Assign
         (Var '_8416)
         (Prim 'vector-set! (list (Var 'alloc8413) (Int 1) (Var 'vecinit8415))))
        (Seq
         (Assign (Var 'tmp8427) (Var 'alloc8413))
         (Seq
          (Assign
           (Var 'tmp8424)
           (Call (Var 'tmp8425) (list (Var 'tmp8426) (Var 'tmp8427))))
          (Return (Prim 'vector-ref (list (Var 'tmp8424) (Int 1))))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '()
   '(Vector Integer Integer)
   '((locals-types
      (f8404 Integer -> Integer)
      (v8405 Vector Integer Integer)
      (tmp8420 . Integer)
      (_8412 . Void)
      (vecinit8408 . Integer)
      (v8405 Vector Integer Integer)
      (alloc8407 Vector Integer Integer)
      (_8411 . Void)
      (tmp8422 . Integer)
      (f8404 Integer -> Integer)
      (vecinit8409 . Integer)
      (tmp8419 . Integer)
      (_8410 . Void)
      (tmp8421 . Integer)
      (tmp8423 . Integer))
     (num-params . 2))
   (list
    (cons
     'map8402start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'f8404)))
       (Instr 'movq (list (Reg 'rsi) (Var 'v8405)))
       (Instr 'movq (list (Var 'v8405) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8419)))
       (Instr 'movq (list (Var 'tmp8419) (Reg 'rdi)))
       (IndirectCallq (Var 'f8404) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8408)))
       (Instr 'movq (list (Var 'v8405) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8420)))
       (Instr 'movq (list (Var 'tmp8420) (Reg 'rdi)))
       (IndirectCallq (Var 'f8404) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8409)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8422)))
       (Instr 'movq (list (Var 'tmp8422) (Var 'tmp8421)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8421)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8423)))
       (Instr 'cmpq (list (Var 'tmp8423) (Var 'tmp8421)))
       (JmpIf 'l 'block8432)
       (Jmp 'block8433))))
    (cons
     'block8433
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8431))))
    (cons
     'block8432
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8412))) (Jmp 'block8431))))
    (cons
     'block8431
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8407)))
       (Instr 'movq (list (Var 'alloc8407) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8408) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8411)))
       (Instr 'movq (list (Var 'alloc8407) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8409) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8410)))
       (Instr 'movq (list (Var 'alloc8407) (Reg 'rax)))
       (Jmp 'map8402conclusion))))))
  (Def
   'inc8403
   '()
   'Integer
   '((locals-types (x8406 . Integer) (x8406 . Integer)) (num-params . 1))
   (list
    (cons
     'inc8403start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8406)))
       (Instr 'movq (list (Var 'x8406) (Reg 'rax)))
       (Instr 'addq (list (Imm 1) (Reg 'rax)))
       (Jmp 'inc8403conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (alloc8413 Vector Integer Integer)
      (tmp8428 . Integer)
      (tmp8426 Integer -> Integer)
      (tmp8430 . Integer)
      (vecinit8415 . Integer)
      (tmp8427 Vector Integer Integer)
      (tmp8429 . Integer)
      (_8416 . Void)
      (tmp8425
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (_8418 . Void)
      (vecinit8414 . Integer)
      (_8417 . Void)
      (tmp8424 Vector Integer Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'map8402) (Var 'tmp8425)))
       (Instr 'leaq (list (Global 'inc8403) (Var 'tmp8426)))
       (Instr 'movq (list (Imm 0) (Var 'vecinit8414)))
       (Instr 'movq (list (Imm 41) (Var 'vecinit8415)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8429)))
       (Instr 'movq (list (Var 'tmp8429) (Var 'tmp8428)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8428)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8430)))
       (Instr 'cmpq (list (Var 'tmp8430) (Var 'tmp8428)))
       (JmpIf 'l 'block8435)
       (Jmp 'block8436))))
    (cons
     'block8436
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8434))))
    (cons
     'block8435
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8418))) (Jmp 'block8434))))
    (cons
     'block8434
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8413)))
       (Instr 'movq (list (Var 'alloc8413) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8414) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8417)))
       (Instr 'movq (list (Var 'alloc8413) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8415) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8416)))
       (Instr 'movq (list (Var 'alloc8413) (Var 'tmp8427)))
       (Instr 'movq (list (Var 'tmp8426) (Reg 'rdi)))
       (Instr 'movq (list (Var 'tmp8427) (Reg 'rsi)))
       (IndirectCallq (Var 'tmp8425) 2)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8424)))
       (Instr 'movq (list (Var 'tmp8424) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8402
   '()
   '(Vector Integer Integer)
   '((locals-types
      (f8404 Integer -> Integer)
      (v8405 Vector Integer Integer)
      (tmp8420 . Integer)
      (_8412 . Void)
      (vecinit8408 . Integer)
      (v8405 Vector Integer Integer)
      (alloc8407 Vector Integer Integer)
      (_8411 . Void)
      (tmp8422 . Integer)
      (f8404 Integer -> Integer)
      (vecinit8409 . Integer)
      (tmp8419 . Integer)
      (_8410 . Void)
      (tmp8421 . Integer)
      (tmp8423 . Integer))
     (num-params . 2))
   (list
    (cons
     'map8402start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'f8404)))
       (Instr 'movq (list (Reg 'rsi) (Var 'v8405)))
       (Instr 'movq (list (Var 'v8405) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8419)))
       (Instr 'movq (list (Var 'tmp8419) (Reg 'rdi)))
       (IndirectCallq (Var 'f8404) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8408)))
       (Instr 'movq (list (Var 'v8405) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8420)))
       (Instr 'movq (list (Var 'tmp8420) (Reg 'rdi)))
       (IndirectCallq (Var 'f8404) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8409)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8422)))
       (Instr 'movq (list (Var 'tmp8422) (Var 'tmp8421)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8421)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8423)))
       (Instr 'cmpq (list (Var 'tmp8423) (Var 'tmp8421)))
       (JmpIf 'l 'block8432)
       (Jmp 'block8433))))
    (cons
     'block8433
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8431))))
    (cons
     'block8432
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8412))) (Jmp 'block8431))))
    (cons
     'block8431
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8407)))
       (Instr 'movq (list (Var 'alloc8407) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8408) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8411)))
       (Instr 'movq (list (Var 'alloc8407) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8409) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8410)))
       (Instr 'movq (list (Var 'alloc8407) (Reg 'rax)))
       (Jmp 'map8402conclusion))))))
  (Def
   'inc8403
   '()
   'Integer
   '((locals-types (x8406 . Integer) (x8406 . Integer)) (num-params . 1))
   (list
    (cons
     'inc8403start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8406)))
       (Instr 'movq (list (Var 'x8406) (Reg 'rax)))
       (Instr 'addq (list (Imm 1) (Reg 'rax)))
       (Jmp 'inc8403conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (alloc8413 Vector Integer Integer)
      (tmp8428 . Integer)
      (tmp8426 Integer -> Integer)
      (tmp8430 . Integer)
      (vecinit8415 . Integer)
      (tmp8427 Vector Integer Integer)
      (tmp8429 . Integer)
      (_8416 . Void)
      (tmp8425
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (_8418 . Void)
      (vecinit8414 . Integer)
      (_8417 . Void)
      (tmp8424 Vector Integer Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'map8402) (Var 'tmp8425)))
       (Instr 'leaq (list (Global 'inc8403) (Var 'tmp8426)))
       (Instr 'movq (list (Imm 0) (Var 'vecinit8414)))
       (Instr 'movq (list (Imm 41) (Var 'vecinit8415)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8429)))
       (Instr 'movq (list (Var 'tmp8429) (Var 'tmp8428)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8428)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8430)))
       (Instr 'cmpq (list (Var 'tmp8430) (Var 'tmp8428)))
       (JmpIf 'l 'block8435)
       (Jmp 'block8436))))
    (cons
     'block8436
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8434))))
    (cons
     'block8435
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8418))) (Jmp 'block8434))))
    (cons
     'block8434
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8413)))
       (Instr 'movq (list (Var 'alloc8413) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8414) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8417)))
       (Instr 'movq (list (Var 'alloc8413) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8415) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8416)))
       (Instr 'movq (list (Var 'alloc8413) (Var 'tmp8427)))
       (Instr 'movq (list (Var 'tmp8426) (Reg 'rdi)))
       (Instr 'movq (list (Var 'tmp8427) (Reg 'rsi)))
       (IndirectCallq (Var 'tmp8425) 2)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8424)))
       (Instr 'movq (list (Var 'tmp8424) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_5"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'mult
   '((x : Integer)
     (y : Integer)
     (a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x)))
    (Int 0)
    (Prim '+ (list (Var 'x) (Var 'y))))))
 (Apply
  (Var 'mult)
  (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult
   '((x : Integer)
     (y : Integer)
     (a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x)))
    (Int 0)
    (Prim '+ (list (Var 'x) (Var 'y)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'mult)
    (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult
   '((x : Integer)
     (y : Integer)
     (a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x)))
    (Int 0)
    (Prim '+ (list (Var 'x) (Var 'y)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'mult)
    (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (d8444 : Integer)
     (e8445 : Integer)
     (f8446 : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'mult8438)
    (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (d8444 : Integer)
     (e8445 : Integer)
     (f8446 : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'mult8438)
    (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
mult8438
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (d8444 : Integer)
     (e8445 : Integer)
     (f8446 : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (d8444 : Integer)
     (e8445 : Integer)
     (f8446 : Integer))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: limit functions @ utilities.rkt:2027

writing rem-ps
(Integer Integer Integer)
(Integer Integer Integer Integer Integer (Vector Integer Integer Integer))
((x8439 : Integer) (y8440 : Integer) (a8441 : Integer) (b8442 : Integer) (c8443 : Integer) (tup8447 : (Vector Integer Integer Integer)))

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list
     (Int 6)
     (Int 7)
     (Int 1)
     (Int 2)
     (Int 3)
     (Prim 'vector (list (Int 4) (Int 5) (Int 6))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list
     (Int 6)
     (Int 7)
     (Int 1)
     (Int 2)
     (Int 3)
     (HasType
      (Prim 'vector (list (Int 4) (Int 5) (Int 6)))
      '(Vector Integer Integer Integer)))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list
     (Int 6)
     (Int 7)
     (Int 1)
     (Int 2)
     (Int 3)
     (Let
      'vecinit8449
      (Int 4)
      (Let
       'vecinit8450
       (Int 5)
       (Let
        'vecinit8451
        (Int 6)
        (Let
         '_8455
         (If
          (Prim
           '<
           (list
            (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
            (GlobalValue 'fromspace_end)))
          (Void)
          (collect 32))
         (Let
          'alloc8448
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_8454
           (Prim
            'vector-set!
            (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449)))
           (Let
            '_8453
            (Prim
             'vector-set!
             (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450)))
            (Let
             '_8452
             (Prim
              'vector-set!
              (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451)))
             (Var 'alloc8448))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list
     (Int 6)
     (Int 7)
     (Int 1)
     (Int 2)
     (Int 3)
     (Let
      'vecinit8449
      (Int 4)
      (Let
       'vecinit8450
       (Int 5)
       (Let
        'vecinit8451
        (Int 6)
        (Let
         '_8455
         (If
          (Prim
           '<
           (list
            (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
            (GlobalValue 'fromspace_end)))
          (Void)
          (collect 32))
         (Let
          'alloc8448
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_8454
           (Prim
            'vector-set!
            (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449)))
           (Let
            '_8453
            (Prim
             'vector-set!
             (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450)))
            (Let
             '_8452
             (Prim
              'vector-set!
              (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451)))
             (Var 'alloc8448))))))))))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list
     (Int 6)
     (Int 7)
     (Int 1)
     (Int 2)
     (Int 3)
     (Let
      'vecinit8449
      (Int 4)
      (Let
       'vecinit8450
       (Int 5)
       (Let
        'vecinit8451
        (Int 6)
        (Let
         '_8455
         (If
          (Prim
           '<
           (list
            (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
            (GlobalValue 'fromspace_end)))
          (Void)
          (collect 32))
         (Let
          'alloc8448
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_8454
           (Prim
            'vector-set!
            (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449)))
           (Let
            '_8453
            (Prim
             'vector-set!
             (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450)))
            (Let
             '_8452
             (Prim
              'vector-set!
              (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451)))
             (Var 'alloc8448))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'mult8438 8)
    (list
     (Int 6)
     (Int 7)
     (Int 1)
     (Int 2)
     (Int 3)
     (Let
      'vecinit8449
      (Int 4)
      (Let
       'vecinit8450
       (Int 5)
       (Let
        'vecinit8451
        (Int 6)
        (Let
         '_8455
         (If
          (Prim
           '<
           (list
            (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
            (GlobalValue 'fromspace_end)))
          (Void)
          (collect 32))
         (Let
          'alloc8448
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_8454
           (Prim
            'vector-set!
            (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449)))
           (Let
            '_8453
            (Prim
             'vector-set!
             (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450)))
            (Let
             '_8452
             (Prim
              'vector-set!
              (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451)))
             (Var 'alloc8448))))))))))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8456
    (FunRef 'mult8438 8)
    (Let
     'tmp8457
     (Let
      'vecinit8449
      (Int 4)
      (Let
       'vecinit8450
       (Int 5)
       (Let
        'vecinit8451
        (Int 6)
        (Let
         '_8455
         (If
          (Let
           'tmp8458
           (Let
            'tmp8459
            (GlobalValue 'free_ptr)
            (Prim '+ (list (Var 'tmp8459) (Int 32))))
           (Let
            'tmp8460
            (GlobalValue 'fromspace_end)
            (Prim '< (list (Var 'tmp8458) (Var 'tmp8460)))))
          (Void)
          (collect 32))
         (Let
          'alloc8448
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_8454
           (Prim
            'vector-set!
            (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449)))
           (Let
            '_8453
            (Prim
             'vector-set!
             (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450)))
            (Let
             '_8452
             (Prim
              'vector-set!
              (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451)))
             (Var 'alloc8448)))))))))
     (Apply
      (Var 'tmp8456)
      (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Var 'tmp8457))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (If
    (Prim 'eq? (list (Int 0) (Var 'x8439)))
    (Int 0)
    (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8456
    (FunRef 'mult8438 8)
    (Let
     'tmp8457
     (Let
      'vecinit8449
      (Int 4)
      (Let
       'vecinit8450
       (Int 5)
       (Let
        'vecinit8451
        (Int 6)
        (Let
         '_8455
         (If
          (Let
           'tmp8458
           (Let
            'tmp8459
            (GlobalValue 'free_ptr)
            (Prim '+ (list (Var 'tmp8459) (Int 32))))
           (Let
            'tmp8460
            (GlobalValue 'fromspace_end)
            (Prim '< (list (Var 'tmp8458) (Var 'tmp8460)))))
          (Void)
          (collect 32))
         (Let
          'alloc8448
          (allocate 3 (Vector Integer Integer Integer))
          (Let
           '_8454
           (Prim
            'vector-set!
            (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449)))
           (Let
            '_8453
            (Prim
             'vector-set!
             (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450)))
            (Let
             '_8452
             (Prim
              'vector-set!
              (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451)))
             (Var 'alloc8448)))))))))
     (Apply
      (Var 'tmp8456)
      (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Var 'tmp8457))))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '()
   (list
    (cons
     'mult8438start
     (IfStmt
      (Prim 'eq? (list (Int 0) (Var 'x8439)))
      (Goto 'block8461)
      (Goto 'block8462)))
    (cons 'block8462 (Return (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
    (cons 'block8461 (Return (Int 0)))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8456) (FunRef 'mult8438 8))
      (Seq
       (Assign (Var 'vecinit8449) (Int 4))
       (Seq
        (Assign (Var 'vecinit8450) (Int 5))
        (Seq
         (Assign (Var 'vecinit8451) (Int 6))
         (Seq
          (Assign (Var 'tmp8459) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8458) (Prim '+ (list (Var 'tmp8459) (Int 32))))
           (Seq
            (Assign (Var 'tmp8460) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8458) (Var 'tmp8460)))
             (Goto 'block8464)
             (Goto 'block8465))))))))))
    (cons 'block8465 (Seq (collect 32) (Goto 'block8463)))
    (cons 'block8464 (Seq (Assign (Var '_8455) (Void)) (Goto 'block8463)))
    (cons
     'block8463
     (Seq
      (Assign (Var 'alloc8448) (allocate 3 (Vector Integer Integer Integer)))
      (Seq
       (Assign
        (Var '_8454)
        (Prim 'vector-set! (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449))))
       (Seq
        (Assign
         (Var '_8453)
         (Prim 'vector-set! (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450))))
        (Seq
         (Assign
          (Var '_8452)
          (Prim
           'vector-set!
           (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451))))
         (Seq
          (Assign (Var 'tmp8457) (Var 'alloc8448))
          (TailCall
           (Var 'tmp8456)
           (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Var 'tmp8457)))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '((x8439 : Integer)
     (y8440 : Integer)
     (a8441 : Integer)
     (b8442 : Integer)
     (c8443 : Integer)
     (tup8447 : (Vector Integer Integer Integer)))
   'Integer
   '((locals-types
      (a8441 . Integer)
      (b8442 . Integer)
      (c8443 . Integer)
      (tup8447 Vector Integer Integer Integer)
      (x8439 . Integer)
      (y8440 . Integer)))
   (list
    (cons
     'mult8438start
     (IfStmt
      (Prim 'eq? (list (Int 0) (Var 'x8439)))
      (Goto 'block8461)
      (Goto 'block8462)))
    (cons 'block8462 (Return (Prim '+ (list (Var 'x8439) (Var 'y8440)))))
    (cons 'block8461 (Return (Int 0)))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (vecinit8450 . Integer)
      (tmp8458 . Integer)
      (tmp8457 Vector Integer Integer Integer)
      (_8453 . Void)
      (tmp8460 . Integer)
      (tmp8456
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer Integer)
       ->
       Integer)
      (alloc8448 Vector Integer Integer Integer)
      (_8455 . Void)
      (vecinit8449 . Integer)
      (vecinit8451 . Integer)
      (_8454 . Void)
      (_8452 . Void)
      (tmp8459 . Integer)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8456) (FunRef 'mult8438 8))
      (Seq
       (Assign (Var 'vecinit8449) (Int 4))
       (Seq
        (Assign (Var 'vecinit8450) (Int 5))
        (Seq
         (Assign (Var 'vecinit8451) (Int 6))
         (Seq
          (Assign (Var 'tmp8459) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8458) (Prim '+ (list (Var 'tmp8459) (Int 32))))
           (Seq
            (Assign (Var 'tmp8460) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8458) (Var 'tmp8460)))
             (Goto 'block8464)
             (Goto 'block8465))))))))))
    (cons 'block8465 (Seq (collect 32) (Goto 'block8463)))
    (cons 'block8464 (Seq (Assign (Var '_8455) (Void)) (Goto 'block8463)))
    (cons
     'block8463
     (Seq
      (Assign (Var 'alloc8448) (allocate 3 (Vector Integer Integer Integer)))
      (Seq
       (Assign
        (Var '_8454)
        (Prim 'vector-set! (list (Var 'alloc8448) (Int 0) (Var 'vecinit8449))))
       (Seq
        (Assign
         (Var '_8453)
         (Prim 'vector-set! (list (Var 'alloc8448) (Int 1) (Var 'vecinit8450))))
        (Seq
         (Assign
          (Var '_8452)
          (Prim
           'vector-set!
           (list (Var 'alloc8448) (Int 2) (Var 'vecinit8451))))
         (Seq
          (Assign (Var 'tmp8457) (Var 'alloc8448))
          (TailCall
           (Var 'tmp8456)
           (list (Int 6) (Int 7) (Int 1) (Int 2) (Int 3) (Var 'tmp8457)))))))))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


running pass: instruction selection @ utilities.rkt:2027

(#<Int: 6> #<Int: 7> #<Int: 1> #<Int: 2> #<Int: 3> #<Var: tmp8457>)
(#<Reg: rdi> #<Reg: rsi> #<Reg: rdx> #<Reg: rcx> #<Reg: r8> #<Reg: r9>)
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '()
   'Integer
   '((locals-types
      (x8439 . Integer)
      (y8440 . Integer)
      (a8441 . Integer)
      (b8442 . Integer)
      (c8443 . Integer)
      (tup8447 Vector Integer Integer Integer)
      (a8441 . Integer)
      (b8442 . Integer)
      (c8443 . Integer)
      (tup8447 Vector Integer Integer Integer)
      (x8439 . Integer)
      (y8440 . Integer))
     (num-params . 6))
   (list
    (cons
     'mult8438start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8439)))
       (Instr 'movq (list (Reg 'rsi) (Var 'y8440)))
       (Instr 'movq (list (Reg 'rdx) (Var 'a8441)))
       (Instr 'movq (list (Reg 'rcx) (Var 'b8442)))
       (Instr 'movq (list (Reg 'r8) (Var 'c8443)))
       (Instr 'movq (list (Reg 'r9) (Var 'tup8447)))
       (Instr 'cmpq (list (Var 'x8439) (Imm 0)))
       (JmpIf 'e 'block8461)
       (Jmp 'block8462))))
    (cons
     'block8462
     (Block
      '()
      (list
       (Instr 'movq (list (Var 'x8439) (Reg 'rax)))
       (Instr 'addq (list (Var 'y8440) (Reg 'rax)))
       (Jmp 'mult8438conclusion))))
    (cons
     'block8461
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Reg 'rax))) (Jmp 'mult8438conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (vecinit8450 . Integer)
      (tmp8458 . Integer)
      (tmp8457 Vector Integer Integer Integer)
      (_8453 . Void)
      (tmp8460 . Integer)
      (tmp8456
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer Integer)
       ->
       Integer)
      (alloc8448 Vector Integer Integer Integer)
      (_8455 . Void)
      (vecinit8449 . Integer)
      (vecinit8451 . Integer)
      (_8454 . Void)
      (_8452 . Void)
      (tmp8459 . Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'mult8438) (Var 'tmp8456)))
       (Instr 'movq (list (Imm 4) (Var 'vecinit8449)))
       (Instr 'movq (list (Imm 5) (Var 'vecinit8450)))
       (Instr 'movq (list (Imm 6) (Var 'vecinit8451)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8459)))
       (Instr 'movq (list (Var 'tmp8459) (Var 'tmp8458)))
       (Instr 'addq (list (Imm 32) (Var 'tmp8458)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8460)))
       (Instr 'cmpq (list (Var 'tmp8460) (Var 'tmp8458)))
       (JmpIf 'l 'block8464)
       (Jmp 'block8465))))
    (cons
     'block8465
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 32) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8463))))
    (cons
     'block8464
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8455))) (Jmp 'block8463))))
    (cons
     'block8463
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8448)))
       (Instr 'movq (list (Var 'alloc8448) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8449) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8454)))
       (Instr 'movq (list (Var 'alloc8448) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8450) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8453)))
       (Instr 'movq (list (Var 'alloc8448) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8451) (Deref 'r11 24)))
       (Instr 'movq (list (Imm 0) (Var '_8452)))
       (Instr 'movq (list (Var 'alloc8448) (Var 'tmp8457)))
       (Instr 'movq (list (Imm 6) (Reg 'rdi)))
       (Instr 'movq (list (Imm 7) (Reg 'rsi)))
       (Instr 'movq (list (Imm 1) (Reg 'rdx)))
       (Instr 'movq (list (Imm 2) (Reg 'rcx)))
       (Instr 'movq (list (Imm 3) (Reg 'r8)))
       (Instr 'movq (list (Var 'tmp8457) (Reg 'r9)))
       (TailJmp (Var 'tmp8456) 6))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'mult8438
   '()
   'Integer
   '((locals-types
      (x8439 . Integer)
      (y8440 . Integer)
      (a8441 . Integer)
      (b8442 . Integer)
      (c8443 . Integer)
      (tup8447 Vector Integer Integer Integer)
      (a8441 . Integer)
      (b8442 . Integer)
      (c8443 . Integer)
      (tup8447 Vector Integer Integer Integer)
      (x8439 . Integer)
      (y8440 . Integer))
     (num-params . 6))
   (list
    (cons
     'mult8438start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8439)))
       (Instr 'movq (list (Reg 'rsi) (Var 'y8440)))
       (Instr 'movq (list (Reg 'rdx) (Var 'a8441)))
       (Instr 'movq (list (Reg 'rcx) (Var 'b8442)))
       (Instr 'movq (list (Reg 'r8) (Var 'c8443)))
       (Instr 'movq (list (Reg 'r9) (Var 'tup8447)))
       (Instr 'cmpq (list (Var 'x8439) (Imm 0)))
       (JmpIf 'e 'block8461)
       (Jmp 'block8462))))
    (cons
     'block8462
     (Block
      '()
      (list
       (Instr 'movq (list (Var 'x8439) (Reg 'rax)))
       (Instr 'addq (list (Var 'y8440) (Reg 'rax)))
       (Jmp 'mult8438conclusion))))
    (cons
     'block8461
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Reg 'rax))) (Jmp 'mult8438conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (vecinit8450 . Integer)
      (tmp8458 . Integer)
      (tmp8457 Vector Integer Integer Integer)
      (_8453 . Void)
      (tmp8460 . Integer)
      (tmp8456
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer Integer)
       ->
       Integer)
      (alloc8448 Vector Integer Integer Integer)
      (_8455 . Void)
      (vecinit8449 . Integer)
      (vecinit8451 . Integer)
      (_8454 . Void)
      (_8452 . Void)
      (tmp8459 . Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'mult8438) (Var 'tmp8456)))
       (Instr 'movq (list (Imm 4) (Var 'vecinit8449)))
       (Instr 'movq (list (Imm 5) (Var 'vecinit8450)))
       (Instr 'movq (list (Imm 6) (Var 'vecinit8451)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8459)))
       (Instr 'movq (list (Var 'tmp8459) (Var 'tmp8458)))
       (Instr 'addq (list (Imm 32) (Var 'tmp8458)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8460)))
       (Instr 'cmpq (list (Var 'tmp8460) (Var 'tmp8458)))
       (JmpIf 'l 'block8464)
       (Jmp 'block8465))))
    (cons
     'block8465
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 32) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8463))))
    (cons
     'block8464
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8455))) (Jmp 'block8463))))
    (cons
     'block8463
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8448)))
       (Instr 'movq (list (Var 'alloc8448) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8449) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8454)))
       (Instr 'movq (list (Var 'alloc8448) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8450) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8453)))
       (Instr 'movq (list (Var 'alloc8448) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8451) (Deref 'r11 24)))
       (Instr 'movq (list (Imm 0) (Var '_8452)))
       (Instr 'movq (list (Var 'alloc8448) (Var 'tmp8457)))
       (Instr 'movq (list (Imm 6) (Reg 'rdi)))
       (Instr 'movq (list (Imm 7) (Reg 'rsi)))
       (Instr 'movq (list (Imm 1) (Reg 'rdx)))
       (Instr 'movq (list (Imm 2) (Reg 'rcx)))
       (Instr 'movq (list (Imm 3) (Reg 'r8)))
       (Instr 'movq (list (Var 'tmp8457) (Reg 'r9)))
       (TailJmp (Var 'tmp8456) 6))))))))


output:  @ utilities.rkt:2042
result:
13


testing @ utilities.rkt:2016
test-name:
"functions_test_6"

expected-result:
13


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'add
   '((x : Integer) (y : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x) (Var 'y)))))
 (Apply (Var 'add) (list (Int 40) (Int 2))))


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add
   '((x : Integer) (y : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x) (Var 'y))))
  (Def 'main '() 'Integer '() (Apply (Var 'add) (list (Int 40) (Int 2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add
   '((x : Integer) (y : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x) (Var 'y))))
  (Def 'main '() 'Integer '() (Apply (Var 'add) (list (Int 40) (Int 2))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def 'main '() 'Integer '() (Apply (Var 'add8467) (list (Int 40) (Int 2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def 'main '() 'Integer '() (Apply (Var 'add8467) (list (Int 40) (Int 2))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
add8467
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply (FunRef 'add8467 2) (list (Int 40) (Int 2))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8470
    (FunRef 'add8467 2)
    (Apply (Var 'tmp8470) (list (Int 40) (Int 2)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8468) (Var 'y8469))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8470
    (FunRef 'add8467 2)
    (Apply (Var 'tmp8470) (list (Int 40) (Int 2)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '()
   (list
    (cons 'add8467start (Return (Prim '+ (list (Var 'x8468) (Var 'y8469)))))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8470) (FunRef 'add8467 2))
      (TailCall (Var 'tmp8470) (list (Int 40) (Int 2)))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '((x8468 : Integer) (y8469 : Integer))
   'Integer
   '((locals-types (y8469 . Integer) (x8468 . Integer)))
   (list
    (cons 'add8467start (Return (Prim '+ (list (Var 'x8468) (Var 'y8469)))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types (tmp8470 Integer Integer -> Integer)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8470) (FunRef 'add8467 2))
      (TailCall (Var 'tmp8470) (list (Int 40) (Int 2)))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

(#<Int: 40> #<Int: 2>)
(#<Reg: rdi> #<Reg: rsi> #<Reg: rdx> #<Reg: rcx> #<Reg: r8> #<Reg: r9>)
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '()
   'Integer
   '((locals-types
      (x8468 . Integer)
      (y8469 . Integer)
      (y8469 . Integer)
      (x8468 . Integer))
     (num-params . 2))
   (list
    (cons
     'add8467start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8468)))
       (Instr 'movq (list (Reg 'rsi) (Var 'y8469)))
       (Instr 'movq (list (Var 'x8468) (Reg 'rax)))
       (Instr 'addq (list (Var 'y8469) (Reg 'rax)))
       (Jmp 'add8467conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types (tmp8470 Integer Integer -> Integer)) (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'add8467) (Var 'tmp8470)))
       (Instr 'movq (list (Imm 40) (Reg 'rdi)))
       (Instr 'movq (list (Imm 2) (Reg 'rsi)))
       (TailJmp (Var 'tmp8470) 2))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'add8467
   '()
   'Integer
   '((locals-types
      (x8468 . Integer)
      (y8469 . Integer)
      (y8469 . Integer)
      (x8468 . Integer))
     (num-params . 2))
   (list
    (cons
     'add8467start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8468)))
       (Instr 'movq (list (Reg 'rsi) (Var 'y8469)))
       (Instr 'movq (list (Var 'x8468) (Reg 'rax)))
       (Instr 'addq (list (Var 'y8469) (Reg 'rax)))
       (Jmp 'add8467conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types (tmp8470 Integer Integer -> Integer)) (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'add8467) (Var 'tmp8470)))
       (Instr 'movq (list (Imm 40) (Reg 'rdi)))
       (Instr 'movq (list (Imm 2) (Reg 'rsi)))
       (TailJmp (Var 'tmp8470) 2))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_7"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'm
   '((a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer)
     (g : Integer)
     (h : Integer)
     (i : Integer))
   'Integer
   '()
   (Var 'i)))
 (Apply
  (Var 'm)
  (list
   (Int 777)
   (Int 776)
   (Int 775)
   (Int 774)
   (Int 773)
   (Int 772)
   (Int 771)
   (Int 770)
   (Int 42))))


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm
   '((a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer)
     (g : Integer)
     (h : Integer)
     (i : Integer))
   'Integer
   '()
   (Var 'i))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'm)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Int 772)
     (Int 771)
     (Int 770)
     (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm
   '((a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer)
     (g : Integer)
     (h : Integer)
     (i : Integer))
   'Integer
   '()
   (Var 'i))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'm)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Int 772)
     (Int 771)
     (Int 770)
     (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (f8478 : Integer)
     (g8479 : Integer)
     (h8480 : Integer)
     (i8481 : Integer))
   'Integer
   '()
   (Var 'i8481))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'm8472)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Int 772)
     (Int 771)
     (Int 770)
     (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (f8478 : Integer)
     (g8479 : Integer)
     (h8480 : Integer)
     (i8481 : Integer))
   'Integer
   '()
   (Var 'i8481))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (Var 'm8472)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Int 772)
     (Int 771)
     (Int 770)
     (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
m8472
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (f8478 : Integer)
     (g8479 : Integer)
     (h8480 : Integer)
     (i8481 : Integer))
   'Integer
   '()
   (Var 'i8481))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Int 772)
     (Int 771)
     (Int 770)
     (Int 42))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (f8478 : Integer)
     (g8479 : Integer)
     (h8480 : Integer)
     (i8481 : Integer))
   'Integer
   '()
   (Var 'i8481))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Int 772)
     (Int 771)
     (Int 770)
     (Int 42))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

writing rem-ps
(Integer Integer Integer Integer)
(Integer Integer Integer Integer Integer (Vector Integer Integer Integer Integer))
((a8473 : Integer) (b8474 : Integer) (c8475 : Integer) (d8476 : Integer) (e8477 : Integer) (tup8482 : (Vector Integer Integer Integer Integer)))

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Prim 'vector (list (Int 772) (Int 771) (Int 770) (Int 42))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (HasType
      (Prim 'vector (list (Int 772) (Int 771) (Int 770) (Int 42)))
      '(Vector Integer Integer Integer Integer)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Let
      'vecinit8484
      (Int 772)
      (Let
       'vecinit8485
       (Int 771)
       (Let
        'vecinit8486
        (Int 770)
        (Let
         'vecinit8487
         (Int 42)
         (Let
          '_8492
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 40)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 40))
          (Let
           'alloc8483
           (allocate 4 (Vector Integer Integer Integer Integer))
           (Let
            '_8491
            (Prim
             'vector-set!
             (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484)))
            (Let
             '_8490
             (Prim
              'vector-set!
              (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485)))
             (Let
              '_8489
              (Prim
               'vector-set!
               (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486)))
              (Let
               '_8488
               (Prim
                'vector-set!
                (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487)))
               (Var 'alloc8483))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Let
      'vecinit8484
      (Int 772)
      (Let
       'vecinit8485
       (Int 771)
       (Let
        'vecinit8486
        (Int 770)
        (Let
         'vecinit8487
         (Int 42)
         (Let
          '_8492
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 40)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 40))
          (Let
           'alloc8483
           (allocate 4 (Vector Integer Integer Integer Integer))
           (Let
            '_8491
            (Prim
             'vector-set!
             (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484)))
            (Let
             '_8490
             (Prim
              'vector-set!
              (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485)))
             (Let
              '_8489
              (Prim
               'vector-set!
               (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486)))
              (Let
               '_8488
               (Prim
                'vector-set!
                (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487)))
               (Var 'alloc8483))))))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Let
      'vecinit8484
      (Int 772)
      (Let
       'vecinit8485
       (Int 771)
       (Let
        'vecinit8486
        (Int 770)
        (Let
         'vecinit8487
         (Int 42)
         (Let
          '_8492
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 40)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 40))
          (Let
           'alloc8483
           (allocate 4 (Vector Integer Integer Integer Integer))
           (Let
            '_8491
            (Prim
             'vector-set!
             (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484)))
            (Let
             '_8490
             (Prim
              'vector-set!
              (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485)))
             (Let
              '_8489
              (Prim
               'vector-set!
               (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486)))
              (Let
               '_8488
               (Prim
                'vector-set!
                (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487)))
               (Var 'alloc8483))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Apply
    (FunRef 'm8472 9)
    (list
     (Int 777)
     (Int 776)
     (Int 775)
     (Int 774)
     (Int 773)
     (Let
      'vecinit8484
      (Int 772)
      (Let
       'vecinit8485
       (Int 771)
       (Let
        'vecinit8486
        (Int 770)
        (Let
         'vecinit8487
         (Int 42)
         (Let
          '_8492
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 40)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 40))
          (Let
           'alloc8483
           (allocate 4 (Vector Integer Integer Integer Integer))
           (Let
            '_8491
            (Prim
             'vector-set!
             (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484)))
            (Let
             '_8490
             (Prim
              'vector-set!
              (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485)))
             (Let
              '_8489
              (Prim
               'vector-set!
               (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486)))
              (Let
               '_8488
               (Prim
                'vector-set!
                (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487)))
               (Var 'alloc8483))))))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8493
    (FunRef 'm8472 9)
    (Let
     'tmp8494
     (Let
      'vecinit8484
      (Int 772)
      (Let
       'vecinit8485
       (Int 771)
       (Let
        'vecinit8486
        (Int 770)
        (Let
         'vecinit8487
         (Int 42)
         (Let
          '_8492
          (If
           (Let
            'tmp8495
            (Let
             'tmp8496
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8496) (Int 40))))
            (Let
             'tmp8497
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8495) (Var 'tmp8497)))))
           (Void)
           (collect 40))
          (Let
           'alloc8483
           (allocate 4 (Vector Integer Integer Integer Integer))
           (Let
            '_8491
            (Prim
             'vector-set!
             (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484)))
            (Let
             '_8490
             (Prim
              'vector-set!
              (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485)))
             (Let
              '_8489
              (Prim
               'vector-set!
               (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486)))
              (Let
               '_8488
               (Prim
                'vector-set!
                (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487)))
               (Var 'alloc8483)))))))))))
     (Apply
      (Var 'tmp8493)
      (list (Int 777) (Int 776) (Int 775) (Int 774) (Int 773) (Var 'tmp8494))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (Prim 'vector-ref (list (Var 'tup8482) (Int 3))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8493
    (FunRef 'm8472 9)
    (Let
     'tmp8494
     (Let
      'vecinit8484
      (Int 772)
      (Let
       'vecinit8485
       (Int 771)
       (Let
        'vecinit8486
        (Int 770)
        (Let
         'vecinit8487
         (Int 42)
         (Let
          '_8492
          (If
           (Let
            'tmp8495
            (Let
             'tmp8496
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8496) (Int 40))))
            (Let
             'tmp8497
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8495) (Var 'tmp8497)))))
           (Void)
           (collect 40))
          (Let
           'alloc8483
           (allocate 4 (Vector Integer Integer Integer Integer))
           (Let
            '_8491
            (Prim
             'vector-set!
             (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484)))
            (Let
             '_8490
             (Prim
              'vector-set!
              (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485)))
             (Let
              '_8489
              (Prim
               'vector-set!
               (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486)))
              (Let
               '_8488
               (Prim
                'vector-set!
                (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487)))
               (Var 'alloc8483)))))))))))
     (Apply
      (Var 'tmp8493)
      (list (Int 777) (Int 776) (Int 775) (Int 774) (Int 773) (Var 'tmp8494))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '()
   (list
    (cons
     'm8472start
     (Return (Prim 'vector-ref (list (Var 'tup8482) (Int 3)))))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8493) (FunRef 'm8472 9))
      (Seq
       (Assign (Var 'vecinit8484) (Int 772))
       (Seq
        (Assign (Var 'vecinit8485) (Int 771))
        (Seq
         (Assign (Var 'vecinit8486) (Int 770))
         (Seq
          (Assign (Var 'vecinit8487) (Int 42))
          (Seq
           (Assign (Var 'tmp8496) (GlobalValue 'free_ptr))
           (Seq
            (Assign (Var 'tmp8495) (Prim '+ (list (Var 'tmp8496) (Int 40))))
            (Seq
             (Assign (Var 'tmp8497) (GlobalValue 'fromspace_end))
             (IfStmt
              (Prim '< (list (Var 'tmp8495) (Var 'tmp8497)))
              (Goto 'block8499)
              (Goto 'block8500)))))))))))
    (cons 'block8500 (Seq (collect 40) (Goto 'block8498)))
    (cons 'block8499 (Seq (Assign (Var '_8492) (Void)) (Goto 'block8498)))
    (cons
     'block8498
     (Seq
      (Assign
       (Var 'alloc8483)
       (allocate 4 (Vector Integer Integer Integer Integer)))
      (Seq
       (Assign
        (Var '_8491)
        (Prim 'vector-set! (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484))))
       (Seq
        (Assign
         (Var '_8490)
         (Prim 'vector-set! (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485))))
        (Seq
         (Assign
          (Var '_8489)
          (Prim
           'vector-set!
           (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486))))
         (Seq
          (Assign
           (Var '_8488)
           (Prim
            'vector-set!
            (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487))))
          (Seq
           (Assign (Var 'tmp8494) (Var 'alloc8483))
           (TailCall
            (Var 'tmp8493)
            (list
             (Int 777)
             (Int 776)
             (Int 775)
             (Int 774)
             (Int 773)
             (Var 'tmp8494))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '((a8473 : Integer)
     (b8474 : Integer)
     (c8475 : Integer)
     (d8476 : Integer)
     (e8477 : Integer)
     (tup8482 : (Vector Integer Integer Integer Integer)))
   'Integer
   '((locals-types
      (tup8482 Vector Integer Integer Integer Integer)
      (a8473 . Integer)
      (b8474 . Integer)
      (c8475 . Integer)
      (d8476 . Integer)
      (e8477 . Integer)))
   (list
    (cons
     'm8472start
     (Return (Prim 'vector-ref (list (Var 'tup8482) (Int 3)))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (_8490 . Void)
      (_8489 . Void)
      (alloc8483 Vector Integer Integer Integer Integer)
      (tmp8494 Vector Integer Integer Integer Integer)
      (tmp8496 . Integer)
      (vecinit8485 . Integer)
      (tmp8493
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer Integer Integer)
       ->
       Integer)
      (vecinit8487 . Integer)
      (vecinit8486 . Integer)
      (_8488 . Void)
      (_8492 . Void)
      (vecinit8484 . Integer)
      (tmp8495 . Integer)
      (tmp8497 . Integer)
      (_8491 . Void)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8493) (FunRef 'm8472 9))
      (Seq
       (Assign (Var 'vecinit8484) (Int 772))
       (Seq
        (Assign (Var 'vecinit8485) (Int 771))
        (Seq
         (Assign (Var 'vecinit8486) (Int 770))
         (Seq
          (Assign (Var 'vecinit8487) (Int 42))
          (Seq
           (Assign (Var 'tmp8496) (GlobalValue 'free_ptr))
           (Seq
            (Assign (Var 'tmp8495) (Prim '+ (list (Var 'tmp8496) (Int 40))))
            (Seq
             (Assign (Var 'tmp8497) (GlobalValue 'fromspace_end))
             (IfStmt
              (Prim '< (list (Var 'tmp8495) (Var 'tmp8497)))
              (Goto 'block8499)
              (Goto 'block8500)))))))))))
    (cons 'block8500 (Seq (collect 40) (Goto 'block8498)))
    (cons 'block8499 (Seq (Assign (Var '_8492) (Void)) (Goto 'block8498)))
    (cons
     'block8498
     (Seq
      (Assign
       (Var 'alloc8483)
       (allocate 4 (Vector Integer Integer Integer Integer)))
      (Seq
       (Assign
        (Var '_8491)
        (Prim 'vector-set! (list (Var 'alloc8483) (Int 0) (Var 'vecinit8484))))
       (Seq
        (Assign
         (Var '_8490)
         (Prim 'vector-set! (list (Var 'alloc8483) (Int 1) (Var 'vecinit8485))))
        (Seq
         (Assign
          (Var '_8489)
          (Prim
           'vector-set!
           (list (Var 'alloc8483) (Int 2) (Var 'vecinit8486))))
         (Seq
          (Assign
           (Var '_8488)
           (Prim
            'vector-set!
            (list (Var 'alloc8483) (Int 3) (Var 'vecinit8487))))
          (Seq
           (Assign (Var 'tmp8494) (Var 'alloc8483))
           (TailCall
            (Var 'tmp8493)
            (list
             (Int 777)
             (Int 776)
             (Int 775)
             (Int 774)
             (Int 773)
             (Var 'tmp8494))))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

(#<Int: 777> #<Int: 776> #<Int: 775> #<Int: 774> #<Int: 773> #<Var: tmp8494>)
(#<Reg: rdi> #<Reg: rsi> #<Reg: rdx> #<Reg: rcx> #<Reg: r8> #<Reg: r9>)
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '()
   'Integer
   '((locals-types
      (a8473 . Integer)
      (b8474 . Integer)
      (c8475 . Integer)
      (d8476 . Integer)
      (e8477 . Integer)
      (tup8482 Vector Integer Integer Integer Integer)
      (tup8482 Vector Integer Integer Integer Integer)
      (a8473 . Integer)
      (b8474 . Integer)
      (c8475 . Integer)
      (d8476 . Integer)
      (e8477 . Integer))
     (num-params . 6))
   (list
    (cons
     'm8472start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'a8473)))
       (Instr 'movq (list (Reg 'rsi) (Var 'b8474)))
       (Instr 'movq (list (Reg 'rdx) (Var 'c8475)))
       (Instr 'movq (list (Reg 'rcx) (Var 'd8476)))
       (Instr 'movq (list (Reg 'r8) (Var 'e8477)))
       (Instr 'movq (list (Reg 'r9) (Var 'tup8482)))
       (Instr 'movq (list (Var 'tup8482) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 32) (Reg 'rax)))
       (Jmp 'm8472conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (_8490 . Void)
      (_8489 . Void)
      (alloc8483 Vector Integer Integer Integer Integer)
      (tmp8494 Vector Integer Integer Integer Integer)
      (tmp8496 . Integer)
      (vecinit8485 . Integer)
      (tmp8493
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer Integer Integer)
       ->
       Integer)
      (vecinit8487 . Integer)
      (vecinit8486 . Integer)
      (_8488 . Void)
      (_8492 . Void)
      (vecinit8484 . Integer)
      (tmp8495 . Integer)
      (tmp8497 . Integer)
      (_8491 . Void))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'm8472) (Var 'tmp8493)))
       (Instr 'movq (list (Imm 772) (Var 'vecinit8484)))
       (Instr 'movq (list (Imm 771) (Var 'vecinit8485)))
       (Instr 'movq (list (Imm 770) (Var 'vecinit8486)))
       (Instr 'movq (list (Imm 42) (Var 'vecinit8487)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8496)))
       (Instr 'movq (list (Var 'tmp8496) (Var 'tmp8495)))
       (Instr 'addq (list (Imm 40) (Var 'tmp8495)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8497)))
       (Instr 'cmpq (list (Var 'tmp8497) (Var 'tmp8495)))
       (JmpIf 'l 'block8499)
       (Jmp 'block8500))))
    (cons
     'block8500
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 40) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8498))))
    (cons
     'block8499
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8492))) (Jmp 'block8498))))
    (cons
     'block8498
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 9) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8483)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8484) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8491)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8485) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8490)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8486) (Deref 'r11 24)))
       (Instr 'movq (list (Imm 0) (Var '_8489)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8487) (Deref 'r11 32)))
       (Instr 'movq (list (Imm 0) (Var '_8488)))
       (Instr 'movq (list (Var 'alloc8483) (Var 'tmp8494)))
       (Instr 'movq (list (Imm 777) (Reg 'rdi)))
       (Instr 'movq (list (Imm 776) (Reg 'rsi)))
       (Instr 'movq (list (Imm 775) (Reg 'rdx)))
       (Instr 'movq (list (Imm 774) (Reg 'rcx)))
       (Instr 'movq (list (Imm 773) (Reg 'r8)))
       (Instr 'movq (list (Var 'tmp8494) (Reg 'r9)))
       (TailJmp (Var 'tmp8493) 6))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'm8472
   '()
   'Integer
   '((locals-types
      (a8473 . Integer)
      (b8474 . Integer)
      (c8475 . Integer)
      (d8476 . Integer)
      (e8477 . Integer)
      (tup8482 Vector Integer Integer Integer Integer)
      (tup8482 Vector Integer Integer Integer Integer)
      (a8473 . Integer)
      (b8474 . Integer)
      (c8475 . Integer)
      (d8476 . Integer)
      (e8477 . Integer))
     (num-params . 6))
   (list
    (cons
     'm8472start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'a8473)))
       (Instr 'movq (list (Reg 'rsi) (Var 'b8474)))
       (Instr 'movq (list (Reg 'rdx) (Var 'c8475)))
       (Instr 'movq (list (Reg 'rcx) (Var 'd8476)))
       (Instr 'movq (list (Reg 'r8) (Var 'e8477)))
       (Instr 'movq (list (Reg 'r9) (Var 'tup8482)))
       (Instr 'movq (list (Var 'tup8482) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 32) (Reg 'rax)))
       (Jmp 'm8472conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (_8490 . Void)
      (_8489 . Void)
      (alloc8483 Vector Integer Integer Integer Integer)
      (tmp8494 Vector Integer Integer Integer Integer)
      (tmp8496 . Integer)
      (vecinit8485 . Integer)
      (tmp8493
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer Integer Integer)
       ->
       Integer)
      (vecinit8487 . Integer)
      (vecinit8486 . Integer)
      (_8488 . Void)
      (_8492 . Void)
      (vecinit8484 . Integer)
      (tmp8495 . Integer)
      (tmp8497 . Integer)
      (_8491 . Void))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'm8472) (Var 'tmp8493)))
       (Instr 'movq (list (Imm 772) (Var 'vecinit8484)))
       (Instr 'movq (list (Imm 771) (Var 'vecinit8485)))
       (Instr 'movq (list (Imm 770) (Var 'vecinit8486)))
       (Instr 'movq (list (Imm 42) (Var 'vecinit8487)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8496)))
       (Instr 'movq (list (Var 'tmp8496) (Var 'tmp8495)))
       (Instr 'addq (list (Imm 40) (Var 'tmp8495)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8497)))
       (Instr 'cmpq (list (Var 'tmp8497) (Var 'tmp8495)))
       (JmpIf 'l 'block8499)
       (Jmp 'block8500))))
    (cons
     'block8500
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 40) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8498))))
    (cons
     'block8499
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8492))) (Jmp 'block8498))))
    (cons
     'block8498
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 40) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 9) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8483)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8484) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8491)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8485) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8490)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8486) (Deref 'r11 24)))
       (Instr 'movq (list (Imm 0) (Var '_8489)))
       (Instr 'movq (list (Var 'alloc8483) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8487) (Deref 'r11 32)))
       (Instr 'movq (list (Imm 0) (Var '_8488)))
       (Instr 'movq (list (Var 'alloc8483) (Var 'tmp8494)))
       (Instr 'movq (list (Imm 777) (Reg 'rdi)))
       (Instr 'movq (list (Imm 776) (Reg 'rsi)))
       (Instr 'movq (list (Imm 775) (Reg 'rdx)))
       (Instr 'movq (list (Imm 774) (Reg 'rcx)))
       (Instr 'movq (list (Imm 773) (Reg 'r8)))
       (Instr 'movq (list (Var 'tmp8494) (Reg 'r9)))
       (TailJmp (Var 'tmp8493) 6))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_8"

expected-result:
42


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'useless
   '((a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer)
     (g : Integer)
     (h : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a (Prim '+ (list (Var 'a) (Int 1))))
     (SetBang 'b (Prim '+ (list (Var 'b) (Int 2))))
     (Let
      'a
      (Int 10)
      (Begin (list (Prim '- (list (Int 20) (Var 'a)))) (SetBang 'a (Int 20))))
     (SetBang 'f (Apply (Var 'inc-2) (list (Int 7))))
     (If (Prim '< (list (Var 'f) (Var 'g))) (Int 10) (Int 20))
     (SetBang 'f (Prim '+ (list (Var 'f) (Int 5))))
     (SetBang 'g (Prim '- (list (Var 'g) (Int 5))))
     (Apply (Var 'h) (list (Int 7))))
    (Prim '+ (list (Var 'a) (Prim '+ (list (Var 'f) (Var 'g)))))))
  (Def 'inc-2 '((a : Integer)) 'Integer '() (Prim '+ (list (Var 'a) (Int 2)))))
 (Prim
  '+
  (list
   (Int 10)
   (Apply
    (Var 'useless)
    (list (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Int 6) (Int 7) (Var 'inc-2))))))


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless
   '((a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer)
     (g : Integer)
     (h : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a (Prim '+ (list (Var 'a) (Int 1))))
     (SetBang 'b (Prim '+ (list (Var 'b) (Int 2))))
     (Let
      'a
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a))))))
       (SetBang 'a (Int 20))))
     (SetBang 'f (Apply (Var 'inc-2) (list (Int 7))))
     (If (Prim '< (list (Var 'f) (Var 'g))) (Int 10) (Int 20))
     (SetBang 'f (Prim '+ (list (Var 'f) (Int 5))))
     (SetBang 'g (Prim '+ (list (Var 'g) (Prim '- (list (Int 5))))))
     (Apply (Var 'h) (list (Int 7))))
    (Prim '+ (list (Var 'a) (Prim '+ (list (Var 'f) (Var 'g)))))))
  (Def 'inc-2 '((a : Integer)) 'Integer '() (Prim '+ (list (Var 'a) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (Var 'useless)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Int 6)
       (Int 7)
       (Var 'inc-2))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless
   '((a : Integer)
     (b : Integer)
     (c : Integer)
     (d : Integer)
     (e : Integer)
     (f : Integer)
     (g : Integer)
     (h : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a (Prim '+ (list (Var 'a) (Int 1))))
     (SetBang 'b (Prim '+ (list (Var 'b) (Int 2))))
     (Let
      'a
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a))))))
       (SetBang 'a (Int 20))))
     (SetBang 'f (Apply (Var 'inc-2) (list (Int 7))))
     (If (Prim '< (list (Var 'f) (Var 'g))) (Int 10) (Int 20))
     (SetBang 'f (Prim '+ (list (Var 'f) (Int 5))))
     (SetBang 'g (Prim '+ (list (Var 'g) (Prim '- (list (Int 5))))))
     (Apply (Var 'h) (list (Int 7))))
    (Prim '+ (list (Var 'a) (Prim '+ (list (Var 'f) (Var 'g)))))))
  (Def 'inc-2 '((a : Integer)) 'Integer '() (Prim '+ (list (Var 'a) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (Var 'useless)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Int 6)
       (Int 7)
       (Var 'inc-2))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (f8509 : Integer)
     (g8510 : Integer)
     (h8511 : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (SetBang 'f8509 (Apply (Var 'inc-28503) (list (Int 7))))
     (If (Prim '< (list (Var 'f8509) (Var 'g8510))) (Int 10) (Int 20))
     (SetBang 'f8509 (Prim '+ (list (Var 'f8509) (Int 5))))
     (SetBang 'g8510 (Prim '+ (list (Var 'g8510) (Prim '- (list (Int 5))))))
     (Apply (Var 'h8511) (list (Int 7))))
    (Prim '+ (list (Var 'a8504) (Prim '+ (list (Var 'f8509) (Var 'g8510)))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (Var 'useless8502)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Int 6)
       (Int 7)
       (Var 'inc-28503))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (f8509 : Integer)
     (g8510 : Integer)
     (h8511 : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (SetBang 'f8509 (Apply (Var 'inc-28503) (list (Int 7))))
     (If (Prim '< (list (Var 'f8509) (Var 'g8510))) (Int 10) (Int 20))
     (SetBang 'f8509 (Prim '+ (list (Var 'f8509) (Int 5))))
     (SetBang 'g8510 (Prim '+ (list (Var 'g8510) (Prim '- (list (Int 5))))))
     (Apply (Var 'h8511) (list (Int 7))))
    (Prim '+ (list (Var 'a8504) (Prim '+ (list (Var 'f8509) (Var 'g8510)))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (Var 'useless8502)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Int 6)
       (Int 7)
       (Var 'inc-28503))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
inc-28503
COMING HERE !!!!!
useless8502
COMING HERE !!!!!
inc-28503
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (f8509 : Integer)
     (g8510 : Integer)
     (h8511 : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (SetBang 'f8509 (Apply (FunRef 'inc-28503 1) (list (Int 7))))
     (If (Prim '< (list (Var 'f8509) (Var 'g8510))) (Int 10) (Int 20))
     (SetBang 'f8509 (Prim '+ (list (Var 'f8509) (Int 5))))
     (SetBang 'g8510 (Prim '+ (list (Var 'g8510) (Prim '- (list (Int 5))))))
     (Apply (Var 'h8511) (list (Int 7))))
    (Prim '+ (list (Var 'a8504) (Prim '+ (list (Var 'f8509) (Var 'g8510)))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Int 6)
       (Int 7)
       (FunRef 'inc-28503 1))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (f8509 : Integer)
     (g8510 : Integer)
     (h8511 : (Integer -> Integer)))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (SetBang 'f8509 (Apply (FunRef 'inc-28503 1) (list (Int 7))))
     (If (Prim '< (list (Var 'f8509) (Var 'g8510))) (Int 10) (Int 20))
     (SetBang 'f8509 (Prim '+ (list (Var 'f8509) (Int 5))))
     (SetBang 'g8510 (Prim '+ (list (Var 'g8510) (Prim '- (list (Int 5))))))
     (Apply (Var 'h8511) (list (Int 7))))
    (Prim '+ (list (Var 'a8504) (Prim '+ (list (Var 'f8509) (Var 'g8510)))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Int 6)
       (Int 7)
       (FunRef 'inc-28503 1))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: limit functions @ utilities.rkt:2027

writing rem-ps
(Integer Integer (Integer -> Integer))
(Integer Integer Integer Integer Integer (Vector Integer Integer (Integer -> Integer)))
((a8504 : Integer) (b8505 : Integer) (c8506 : Integer) (d8507 : Integer) (e8508 : Integer) (tup8514 : (Vector Integer Integer (Integer -> Integer))))

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Apply (FunRef 'inc-28503 1) (list (Int 7)))))
     (If
      (Prim
       '<
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))
      (Int 10)
      (Int 20))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Prim
        '+
        (list (Prim 'vector-ref (list (Var 'tup8514) (Int 0))) (Int 5)))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 1)
       (Prim
        '+
        (list
         (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
         (Prim '- (list (Int 5)))))))
     (Apply (Prim 'vector-ref (list (Var 'tup8514) (Int 2))) (list (Int 7))))
    (Prim
     '+
     (list
      (Var 'a8504)
      (Prim
       '+
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Prim 'vector (list (Int 6) (Int 7) (FunRef 'inc-28503 1))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Apply (FunRef 'inc-28503 1) (list (Int 7)))))
     (If
      (Prim
       '<
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))
      (Int 10)
      (Int 20))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Prim
        '+
        (list (Prim 'vector-ref (list (Var 'tup8514) (Int 0))) (Int 5)))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 1)
       (Prim
        '+
        (list
         (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
         (Prim '- (list (Int 5)))))))
     (Apply (Prim 'vector-ref (list (Var 'tup8514) (Int 2))) (list (Int 7))))
    (Prim
     '+
     (list
      (Var 'a8504)
      (Prim
       '+
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (HasType
        (Prim 'vector (list (Int 6) (Int 7) (FunRef 'inc-28503 1)))
        '(Vector Integer Integer (Integer -> Integer))))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Apply (FunRef 'inc-28503 1) (list (Int 7)))))
     (If
      (Prim
       '<
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))
      (Int 10)
      (Int 20))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Prim
        '+
        (list (Prim 'vector-ref (list (Var 'tup8514) (Int 0))) (Int 5)))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 1)
       (Prim
        '+
        (list
         (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
         (Prim '- (list (Int 5)))))))
     (Apply (Prim 'vector-ref (list (Var 'tup8514) (Int 2))) (list (Int 7))))
    (Prim
     '+
     (list
      (Var 'a8504)
      (Prim
       '+
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Let
        'vecinit8516
        (Int 6)
        (Let
         'vecinit8517
         (Int 7)
         (Let
          'vecinit8518
          (FunRef 'inc-28503 1)
          (Let
           '_8522
           (If
            (Prim
             '<
             (list
              (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
              (GlobalValue 'fromspace_end)))
            (Void)
            (collect 32))
           (Let
            'alloc8515
            (allocate 3 (Vector Integer Integer (Integer -> Integer)))
            (Let
             '_8521
             (Prim
              'vector-set!
              (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516)))
             (Let
              '_8520
              (Prim
               'vector-set!
               (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517)))
              (Let
               '_8519
               (Prim
                'vector-set!
                (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518)))
               (Var 'alloc8515))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (Var 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (Var 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (Var 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Apply (FunRef 'inc-28503 1) (list (Int 7)))))
     (If
      (Prim
       '<
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))
      (Int 10)
      (Int 20))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Prim
        '+
        (list (Prim 'vector-ref (list (Var 'tup8514) (Int 0))) (Int 5)))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 1)
       (Prim
        '+
        (list
         (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
         (Prim '- (list (Int 5)))))))
     (Apply (Prim 'vector-ref (list (Var 'tup8514) (Int 2))) (list (Int 7))))
    (Prim
     '+
     (list
      (Var 'a8504)
      (Prim
       '+
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Let
        'vecinit8516
        (Int 6)
        (Let
         'vecinit8517
         (Int 7)
         (Let
          'vecinit8518
          (FunRef 'inc-28503 1)
          (Let
           '_8522
           (If
            (Prim
             '<
             (list
              (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
              (GlobalValue 'fromspace_end)))
            (Void)
            (collect 32))
           (Let
            'alloc8515
            (allocate 3 (Vector Integer Integer (Integer -> Integer)))
            (Let
             '_8521
             (Prim
              'vector-set!
              (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516)))
             (Let
              '_8520
              (Prim
               'vector-set!
               (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517)))
              (Let
               '_8519
               (Prim
                'vector-set!
                (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518)))
               (Var 'alloc8515))))))))))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (GetBang 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (GetBang 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (GetBang 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Apply (FunRef 'inc-28503 1) (list (Int 7)))))
     (If
      (Prim
       '<
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))
      (Int 10)
      (Int 20))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Prim
        '+
        (list (Prim 'vector-ref (list (Var 'tup8514) (Int 0))) (Int 5)))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 1)
       (Prim
        '+
        (list
         (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
         (Prim '- (list (Int 5)))))))
     (Apply (Prim 'vector-ref (list (Var 'tup8514) (Int 2))) (list (Int 7))))
    (Prim
     '+
     (list
      (GetBang 'a8504)
      (Prim
       '+
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Let
        'vecinit8516
        (Int 6)
        (Let
         'vecinit8517
         (Int 7)
         (Let
          'vecinit8518
          (FunRef 'inc-28503 1)
          (Let
           '_8522
           (If
            (Prim
             '<
             (list
              (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
              (GlobalValue 'fromspace_end)))
            (Void)
            (collect 32))
           (Let
            'alloc8515
            (allocate 3 (Vector Integer Integer (Integer -> Integer)))
            (Let
             '_8521
             (Prim
              'vector-set!
              (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516)))
             (Let
              '_8520
              (Prim
               'vector-set!
               (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517)))
              (Let
               '_8519
               (Prim
                'vector-set!
                (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518)))
               (Var 'alloc8515))))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang 'a8504 (Prim '+ (list (GetBang 'a8504) (Int 1))))
     (SetBang 'b8505 (Prim '+ (list (GetBang 'b8505) (Int 2))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list (Prim '+ (list (Int 20) (Prim '- (list (GetBang 'a8512))))))
       (SetBang 'a8512 (Int 20))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Apply (FunRef 'inc-28503 1) (list (Int 7)))))
     (If
      (Prim
       '<
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))
      (Int 10)
      (Int 20))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 0)
       (Prim
        '+
        (list (Prim 'vector-ref (list (Var 'tup8514) (Int 0))) (Int 5)))))
     (Prim
      'vector-set!
      (list
       (Var 'tup8514)
       (Int 1)
       (Prim
        '+
        (list
         (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
         (Prim '- (list (Int 5)))))))
     (Apply (Prim 'vector-ref (list (Var 'tup8514) (Int 2))) (list (Int 7))))
    (Prim
     '+
     (list
      (GetBang 'a8504)
      (Prim
       '+
       (list
        (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    '+
    (list
     (Int 10)
     (Apply
      (FunRef 'useless8502 8)
      (list
       (Int 1)
       (Int 2)
       (Int 3)
       (Int 4)
       (Int 5)
       (Let
        'vecinit8516
        (Int 6)
        (Let
         'vecinit8517
         (Int 7)
         (Let
          'vecinit8518
          (FunRef 'inc-28503 1)
          (Let
           '_8522
           (If
            (Prim
             '<
             (list
              (Prim '+ (list (GlobalValue 'free_ptr) (Int 32)))
              (GlobalValue 'fromspace_end)))
            (Void)
            (collect 32))
           (Let
            'alloc8515
            (allocate 3 (Vector Integer Integer (Integer -> Integer)))
            (Let
             '_8521
             (Prim
              'vector-set!
              (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516)))
             (Let
              '_8520
              (Prim
               'vector-set!
               (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517)))
              (Let
               '_8519
               (Prim
                'vector-set!
                (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518)))
               (Var 'alloc8515))))))))))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang
      'a8504
      (Let 'tmp8523 (Var 'a8504) (Prim '+ (list (Var 'tmp8523) (Int 1)))))
     (SetBang
      'b8505
      (Let 'tmp8524 (Var 'b8505) (Prim '+ (list (Var 'tmp8524) (Int 2)))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list
        (Let
         'tmp8525
         (Let 'tmp8526 (Var 'a8512) (Prim '- (list (Var 'tmp8526))))
         (Prim '+ (list (Int 20) (Var 'tmp8525)))))
       (SetBang 'a8512 (Int 20))))
     (Let
      'tmp8527
      (Let
       'tmp8528
       (FunRef 'inc-28503 1)
       (Apply (Var 'tmp8528) (list (Int 7))))
      (Prim 'vector-set! (list (Var 'tup8514) (Int 0) (Var 'tmp8527))))
     (If
      (Let
       'tmp8529
       (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
       (Let
        'tmp8530
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
        (Prim '< (list (Var 'tmp8529) (Var 'tmp8530)))))
      (Int 10)
      (Int 20))
     (Let
      'tmp8531
      (Let
       'tmp8532
       (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
       (Prim '+ (list (Var 'tmp8532) (Int 5))))
      (Prim 'vector-set! (list (Var 'tup8514) (Int 0) (Var 'tmp8531))))
     (Let
      'tmp8533
      (Let
       'tmp8534
       (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
       (Let
        'tmp8535
        (Prim '- (list (Int 5)))
        (Prim '+ (list (Var 'tmp8534) (Var 'tmp8535)))))
      (Prim 'vector-set! (list (Var 'tup8514) (Int 1) (Var 'tmp8533))))
     (Let
      'tmp8536
      (Prim 'vector-ref (list (Var 'tup8514) (Int 2)))
      (Apply (Var 'tmp8536) (list (Int 7)))))
    (Let
     'tmp8537
     (Var 'a8504)
     (Let
      'tmp8538
      (Let
       'tmp8539
       (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
       (Let
        'tmp8540
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
        (Prim '+ (list (Var 'tmp8539) (Var 'tmp8540)))))
      (Prim '+ (list (Var 'tmp8537) (Var 'tmp8538)))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8541
    (Let
     'tmp8542
     (FunRef 'useless8502 8)
     (Let
      'tmp8543
      (Let
       'vecinit8516
       (Int 6)
       (Let
        'vecinit8517
        (Int 7)
        (Let
         'vecinit8518
         (FunRef 'inc-28503 1)
         (Let
          '_8522
          (If
           (Let
            'tmp8544
            (Let
             'tmp8545
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8545) (Int 32))))
            (Let
             'tmp8546
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8544) (Var 'tmp8546)))))
           (Void)
           (collect 32))
          (Let
           'alloc8515
           (allocate 3 (Vector Integer Integer (Integer -> Integer)))
           (Let
            '_8521
            (Prim
             'vector-set!
             (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516)))
            (Let
             '_8520
             (Prim
              'vector-set!
              (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517)))
             (Let
              '_8519
              (Prim
               'vector-set!
               (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518)))
              (Var 'alloc8515)))))))))
      (Apply
       (Var 'tmp8542)
       (list (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Var 'tmp8543)))))
    (Prim '+ (list (Int 10) (Var 'tmp8541)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (Begin
    (list
     (SetBang
      'a8504
      (Let 'tmp8523 (Var 'a8504) (Prim '+ (list (Var 'tmp8523) (Int 1)))))
     (SetBang
      'b8505
      (Let 'tmp8524 (Var 'b8505) (Prim '+ (list (Var 'tmp8524) (Int 2)))))
     (Let
      'a8512
      (Int 10)
      (Begin
       (list
        (Let
         'tmp8525
         (Let 'tmp8526 (Var 'a8512) (Prim '- (list (Var 'tmp8526))))
         (Prim '+ (list (Int 20) (Var 'tmp8525)))))
       (SetBang 'a8512 (Int 20))))
     (Let
      'tmp8527
      (Let
       'tmp8528
       (FunRef 'inc-28503 1)
       (Apply (Var 'tmp8528) (list (Int 7))))
      (Prim 'vector-set! (list (Var 'tup8514) (Int 0) (Var 'tmp8527))))
     (If
      (Let
       'tmp8529
       (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
       (Let
        'tmp8530
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
        (Prim '< (list (Var 'tmp8529) (Var 'tmp8530)))))
      (Int 10)
      (Int 20))
     (Let
      'tmp8531
      (Let
       'tmp8532
       (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
       (Prim '+ (list (Var 'tmp8532) (Int 5))))
      (Prim 'vector-set! (list (Var 'tup8514) (Int 0) (Var 'tmp8531))))
     (Let
      'tmp8533
      (Let
       'tmp8534
       (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
       (Let
        'tmp8535
        (Prim '- (list (Int 5)))
        (Prim '+ (list (Var 'tmp8534) (Var 'tmp8535)))))
      (Prim 'vector-set! (list (Var 'tup8514) (Int 1) (Var 'tmp8533))))
     (Let
      'tmp8536
      (Prim 'vector-ref (list (Var 'tup8514) (Int 2)))
      (Apply (Var 'tmp8536) (list (Int 7)))))
    (Let
     'tmp8537
     (Var 'a8504)
     (Let
      'tmp8538
      (Let
       'tmp8539
       (Prim 'vector-ref (list (Var 'tup8514) (Int 0)))
       (Let
        'tmp8540
        (Prim 'vector-ref (list (Var 'tup8514) (Int 1)))
        (Prim '+ (list (Var 'tmp8539) (Var 'tmp8540)))))
      (Prim '+ (list (Var 'tmp8537) (Var 'tmp8538)))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'a8513) (Int 2))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8541
    (Let
     'tmp8542
     (FunRef 'useless8502 8)
     (Let
      'tmp8543
      (Let
       'vecinit8516
       (Int 6)
       (Let
        'vecinit8517
        (Int 7)
        (Let
         'vecinit8518
         (FunRef 'inc-28503 1)
         (Let
          '_8522
          (If
           (Let
            'tmp8544
            (Let
             'tmp8545
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8545) (Int 32))))
            (Let
             'tmp8546
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8544) (Var 'tmp8546)))))
           (Void)
           (collect 32))
          (Let
           'alloc8515
           (allocate 3 (Vector Integer Integer (Integer -> Integer)))
           (Let
            '_8521
            (Prim
             'vector-set!
             (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516)))
            (Let
             '_8520
             (Prim
              'vector-set!
              (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517)))
             (Let
              '_8519
              (Prim
               'vector-set!
               (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518)))
              (Var 'alloc8515)))))))))
      (Apply
       (Var 'tmp8542)
       (list (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Var 'tmp8543)))))
    (Prim '+ (list (Int 10) (Var 'tmp8541)))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '()
   (list
    (cons
     'useless8502start
     (Seq
      (Assign (Var 'tmp8523) (Var 'a8504))
      (Seq
       (Assign (Var 'a8504) (Prim '+ (list (Var 'tmp8523) (Int 1))))
       (Seq
        (Assign (Var 'tmp8524) (Var 'b8505))
        (Seq
         (Assign (Var 'b8505) (Prim '+ (list (Var 'tmp8524) (Int 2))))
         (Seq
          (Assign (Var 'a8512) (Int 10))
          (Seq
           (Assign (Var 'tmp8526) (Var 'a8512))
           (Seq
            (Assign (Var 'tmp8525) (Prim '- (list (Var 'tmp8526))))
            (Seq
             (Assign (Var 'a8512) (Int 20))
             (Seq
              (Assign (Var 'tmp8528) (FunRef 'inc-28503 1))
              (Seq
               (Assign (Var 'tmp8527) (Call (Var 'tmp8528) (list (Int 7))))
               (Seq
                (Prim
                 'vector-set!
                 (list (Var 'tup8514) (Int 0) (Var 'tmp8527)))
                (Seq
                 (Assign
                  (Var 'tmp8529)
                  (Prim 'vector-ref (list (Var 'tup8514) (Int 0))))
                 (Seq
                  (Assign
                   (Var 'tmp8530)
                   (Prim 'vector-ref (list (Var 'tup8514) (Int 1))))
                  (IfStmt
                   (Prim '< (list (Var 'tmp8529) (Var 'tmp8530)))
                   (Goto 'block8547)
                   (Goto 'block8547))))))))))))))))
    (cons
     'block8547
     (Seq
      (Assign (Var 'tmp8532) (Prim 'vector-ref (list (Var 'tup8514) (Int 0))))
      (Seq
       (Assign (Var 'tmp8531) (Prim '+ (list (Var 'tmp8532) (Int 5))))
       (Seq
        (Prim 'vector-set! (list (Var 'tup8514) (Int 0) (Var 'tmp8531)))
        (Seq
         (Assign
          (Var 'tmp8534)
          (Prim 'vector-ref (list (Var 'tup8514) (Int 1))))
         (Seq
          (Assign (Var 'tmp8535) (Prim '- (list (Int 5))))
          (Seq
           (Assign
            (Var 'tmp8533)
            (Prim '+ (list (Var 'tmp8534) (Var 'tmp8535))))
           (Seq
            (Prim 'vector-set! (list (Var 'tup8514) (Int 1) (Var 'tmp8533)))
            (Seq
             (Assign
              (Var 'tmp8536)
              (Prim 'vector-ref (list (Var 'tup8514) (Int 2))))
             (Seq
              (Assign (Var 'tmp8537) (Var 'a8504))
              (Seq
               (Assign
                (Var 'tmp8539)
                (Prim 'vector-ref (list (Var 'tup8514) (Int 0))))
               (Seq
                (Assign
                 (Var 'tmp8540)
                 (Prim 'vector-ref (list (Var 'tup8514) (Int 1))))
                (Seq
                 (Assign
                  (Var 'tmp8538)
                  (Prim '+ (list (Var 'tmp8539) (Var 'tmp8540))))
                 (Return (Prim '+ (list (Var 'tmp8537) (Var 'tmp8538)))))))))))))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '()
   (list (cons 'inc-28503start (Return (Prim '+ (list (Var 'a8513) (Int 2)))))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8542) (FunRef 'useless8502 8))
      (Seq
       (Assign (Var 'vecinit8516) (Int 6))
       (Seq
        (Assign (Var 'vecinit8517) (Int 7))
        (Seq
         (Assign (Var 'vecinit8518) (FunRef 'inc-28503 1))
         (Seq
          (Assign (Var 'tmp8545) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8544) (Prim '+ (list (Var 'tmp8545) (Int 32))))
           (Seq
            (Assign (Var 'tmp8546) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8544) (Var 'tmp8546)))
             (Goto 'block8549)
             (Goto 'block8550))))))))))
    (cons 'block8550 (Seq (collect 32) (Goto 'block8548)))
    (cons 'block8549 (Seq (Assign (Var '_8522) (Void)) (Goto 'block8548)))
    (cons
     'block8548
     (Seq
      (Assign
       (Var 'alloc8515)
       (allocate 3 (Vector Integer Integer (Integer -> Integer))))
      (Seq
       (Assign
        (Var '_8521)
        (Prim 'vector-set! (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516))))
       (Seq
        (Assign
         (Var '_8520)
         (Prim 'vector-set! (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517))))
        (Seq
         (Assign
          (Var '_8519)
          (Prim
           'vector-set!
           (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518))))
         (Seq
          (Assign (Var 'tmp8543) (Var 'alloc8515))
          (Seq
           (Assign
            (Var 'tmp8541)
            (Call
             (Var 'tmp8542)
             (list (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Var 'tmp8543))))
           (Return (Prim '+ (list (Int 10) (Var 'tmp8541)))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '((a8504 : Integer)
     (b8505 : Integer)
     (c8506 : Integer)
     (d8507 : Integer)
     (e8508 : Integer)
     (tup8514 : (Vector Integer Integer (Integer -> Integer))))
   'Integer
   '((locals-types
      (tmp8537 . Integer)
      (tmp8531 . Integer)
      (tmp8538 . Integer)
      (tmp8524 . Integer)
      (b8505 . Integer)
      (tmp8528 Integer -> Integer)
      (tmp8532 . Integer)
      (tmp8539 . Integer)
      (tmp8536 Integer -> Integer)
      (tmp8540 . Integer)
      (a8512 . Integer)
      (tmp8525 . Integer)
      (tmp8534 . Integer)
      (tmp8533 . Integer)
      (tmp8529 . Integer)
      (tup8514 Vector Integer Integer (Integer -> Integer))
      (tmp8530 . Integer)
      (c8506 . Integer)
      (d8507 . Integer)
      (e8508 . Integer)
      (tmp8526 . Integer)
      (a8504 . Integer)
      (tmp8535 . Integer)
      (tmp8523 . Integer)
      (tmp8527 . Integer)))
   (list
    (cons
     'useless8502start
     (Seq
      (Assign (Var 'tmp8523) (Var 'a8504))
      (Seq
       (Assign (Var 'a8504) (Prim '+ (list (Var 'tmp8523) (Int 1))))
       (Seq
        (Assign (Var 'tmp8524) (Var 'b8505))
        (Seq
         (Assign (Var 'b8505) (Prim '+ (list (Var 'tmp8524) (Int 2))))
         (Seq
          (Assign (Var 'a8512) (Int 10))
          (Seq
           (Assign (Var 'tmp8526) (Var 'a8512))
           (Seq
            (Assign (Var 'tmp8525) (Prim '- (list (Var 'tmp8526))))
            (Seq
             (Assign (Var 'a8512) (Int 20))
             (Seq
              (Assign (Var 'tmp8528) (FunRef 'inc-28503 1))
              (Seq
               (Assign (Var 'tmp8527) (Call (Var 'tmp8528) (list (Int 7))))
               (Seq
                (Prim
                 'vector-set!
                 (list (Var 'tup8514) (Int 0) (Var 'tmp8527)))
                (Seq
                 (Assign
                  (Var 'tmp8529)
                  (Prim 'vector-ref (list (Var 'tup8514) (Int 0))))
                 (Seq
                  (Assign
                   (Var 'tmp8530)
                   (Prim 'vector-ref (list (Var 'tup8514) (Int 1))))
                  (IfStmt
                   (Prim '< (list (Var 'tmp8529) (Var 'tmp8530)))
                   (Goto 'block8547)
                   (Goto 'block8547))))))))))))))))
    (cons
     'block8547
     (Seq
      (Assign (Var 'tmp8532) (Prim 'vector-ref (list (Var 'tup8514) (Int 0))))
      (Seq
       (Assign (Var 'tmp8531) (Prim '+ (list (Var 'tmp8532) (Int 5))))
       (Seq
        (Prim 'vector-set! (list (Var 'tup8514) (Int 0) (Var 'tmp8531)))
        (Seq
         (Assign
          (Var 'tmp8534)
          (Prim 'vector-ref (list (Var 'tup8514) (Int 1))))
         (Seq
          (Assign (Var 'tmp8535) (Prim '- (list (Int 5))))
          (Seq
           (Assign
            (Var 'tmp8533)
            (Prim '+ (list (Var 'tmp8534) (Var 'tmp8535))))
           (Seq
            (Prim 'vector-set! (list (Var 'tup8514) (Int 1) (Var 'tmp8533)))
            (Seq
             (Assign
              (Var 'tmp8536)
              (Prim 'vector-ref (list (Var 'tup8514) (Int 2))))
             (Seq
              (Assign (Var 'tmp8537) (Var 'a8504))
              (Seq
               (Assign
                (Var 'tmp8539)
                (Prim 'vector-ref (list (Var 'tup8514) (Int 0))))
               (Seq
                (Assign
                 (Var 'tmp8540)
                 (Prim 'vector-ref (list (Var 'tup8514) (Int 1))))
                (Seq
                 (Assign
                  (Var 'tmp8538)
                  (Prim '+ (list (Var 'tmp8539) (Var 'tmp8540))))
                 (Return (Prim '+ (list (Var 'tmp8537) (Var 'tmp8538)))))))))))))))))))
  (Def
   'inc-28503
   '((a8513 : Integer))
   'Integer
   '((locals-types (a8513 . Integer)))
   (list (cons 'inc-28503start (Return (Prim '+ (list (Var 'a8513) (Int 2)))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (vecinit8516 . Integer)
      (tmp8542
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer (Integer -> Integer))
       ->
       Integer)
      (tmp8543 Vector Integer Integer (Integer -> Integer))
      (vecinit8518 Integer -> Integer)
      (_8521 . Void)
      (tmp8544 . Integer)
      (_8520 . Void)
      (tmp8546 . Integer)
      (tmp8541 . Integer)
      (vecinit8517 . Integer)
      (_8519 . Void)
      (tmp8545 . Integer)
      (_8522 . Void)
      (alloc8515 Vector Integer Integer (Integer -> Integer))))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8542) (FunRef 'useless8502 8))
      (Seq
       (Assign (Var 'vecinit8516) (Int 6))
       (Seq
        (Assign (Var 'vecinit8517) (Int 7))
        (Seq
         (Assign (Var 'vecinit8518) (FunRef 'inc-28503 1))
         (Seq
          (Assign (Var 'tmp8545) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8544) (Prim '+ (list (Var 'tmp8545) (Int 32))))
           (Seq
            (Assign (Var 'tmp8546) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8544) (Var 'tmp8546)))
             (Goto 'block8549)
             (Goto 'block8550))))))))))
    (cons 'block8550 (Seq (collect 32) (Goto 'block8548)))
    (cons 'block8549 (Seq (Assign (Var '_8522) (Void)) (Goto 'block8548)))
    (cons
     'block8548
     (Seq
      (Assign
       (Var 'alloc8515)
       (allocate 3 (Vector Integer Integer (Integer -> Integer))))
      (Seq
       (Assign
        (Var '_8521)
        (Prim 'vector-set! (list (Var 'alloc8515) (Int 0) (Var 'vecinit8516))))
       (Seq
        (Assign
         (Var '_8520)
         (Prim 'vector-set! (list (Var 'alloc8515) (Int 1) (Var 'vecinit8517))))
        (Seq
         (Assign
          (Var '_8519)
          (Prim
           'vector-set!
           (list (Var 'alloc8515) (Int 2) (Var 'vecinit8518))))
         (Seq
          (Assign (Var 'tmp8543) (Var 'alloc8515))
          (Seq
           (Assign
            (Var 'tmp8541)
            (Call
             (Var 'tmp8542)
             (list (Int 1) (Int 2) (Int 3) (Int 4) (Int 5) (Var 'tmp8543))))
           (Return (Prim '+ (list (Int 10) (Var 'tmp8541)))))))))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '()
   'Integer
   '((locals-types
      (a8504 . Integer)
      (b8505 . Integer)
      (c8506 . Integer)
      (d8507 . Integer)
      (e8508 . Integer)
      (tup8514 Vector Integer Integer (Integer -> Integer))
      (tmp8537 . Integer)
      (tmp8531 . Integer)
      (tmp8538 . Integer)
      (tmp8524 . Integer)
      (b8505 . Integer)
      (tmp8528 Integer -> Integer)
      (tmp8532 . Integer)
      (tmp8539 . Integer)
      (tmp8536 Integer -> Integer)
      (tmp8540 . Integer)
      (a8512 . Integer)
      (tmp8525 . Integer)
      (tmp8534 . Integer)
      (tmp8533 . Integer)
      (tmp8529 . Integer)
      (tup8514 Vector Integer Integer (Integer -> Integer))
      (tmp8530 . Integer)
      (c8506 . Integer)
      (d8507 . Integer)
      (e8508 . Integer)
      (tmp8526 . Integer)
      (a8504 . Integer)
      (tmp8535 . Integer)
      (tmp8523 . Integer)
      (tmp8527 . Integer))
     (num-params . 6))
   (list
    (cons
     'useless8502start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'a8504)))
       (Instr 'movq (list (Reg 'rsi) (Var 'b8505)))
       (Instr 'movq (list (Reg 'rdx) (Var 'c8506)))
       (Instr 'movq (list (Reg 'rcx) (Var 'd8507)))
       (Instr 'movq (list (Reg 'r8) (Var 'e8508)))
       (Instr 'movq (list (Reg 'r9) (Var 'tup8514)))
       (Instr 'movq (list (Var 'a8504) (Var 'tmp8523)))
       (Instr 'movq (list (Var 'tmp8523) (Var 'a8504)))
       (Instr 'addq (list (Imm 1) (Var 'a8504)))
       (Instr 'movq (list (Var 'b8505) (Var 'tmp8524)))
       (Instr 'movq (list (Var 'tmp8524) (Var 'b8505)))
       (Instr 'addq (list (Imm 2) (Var 'b8505)))
       (Instr 'movq (list (Imm 10) (Var 'a8512)))
       (Instr 'movq (list (Var 'a8512) (Var 'tmp8526)))
       (Instr 'movq (list (Var 'tmp8526) (Var 'tmp8525)))
       (Instr 'negq (list (Var 'tmp8525)))
       (Instr 'movq (list (Imm 20) (Var 'a8512)))
       (Instr 'leaq (list (Global 'inc-28503) (Var 'tmp8528)))
       (Instr 'movq (list (Imm 7) (Reg 'rdi)))
       (IndirectCallq (Var 'tmp8528) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8527)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Var 'tmp8527) (Deref 'r11 8)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8529)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8530)))
       (Instr 'cmpq (list (Var 'tmp8530) (Var 'tmp8529)))
       (JmpIf 'l 'block8547)
       (Jmp 'block8547))))
    (cons
     'block8547
     (Block
      '()
      (list
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8532)))
       (Instr 'movq (list (Var 'tmp8532) (Var 'tmp8531)))
       (Instr 'addq (list (Imm 5) (Var 'tmp8531)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Var 'tmp8531) (Deref 'r11 8)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8534)))
       (Instr 'movq (list (Imm 5) (Var 'tmp8535)))
       (Instr 'negq (list (Var 'tmp8535)))
       (Instr 'movq (list (Var 'tmp8534) (Var 'tmp8533)))
       (Instr 'addq (list (Var 'tmp8535) (Var 'tmp8533)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Var 'tmp8533) (Deref 'r11 16)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 24) (Var 'tmp8536)))
       (Instr 'movq (list (Var 'a8504) (Var 'tmp8537)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8539)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8540)))
       (Instr 'movq (list (Var 'tmp8539) (Var 'tmp8538)))
       (Instr 'addq (list (Var 'tmp8540) (Var 'tmp8538)))
       (Instr 'movq (list (Var 'tmp8537) (Reg 'rax)))
       (Instr 'addq (list (Var 'tmp8538) (Reg 'rax)))
       (Jmp 'useless8502conclusion))))))
  (Def
   'inc-28503
   '()
   'Integer
   '((locals-types (a8513 . Integer) (a8513 . Integer)) (num-params . 1))
   (list
    (cons
     'inc-28503start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'a8513)))
       (Instr 'movq (list (Var 'a8513) (Reg 'rax)))
       (Instr 'addq (list (Imm 2) (Reg 'rax)))
       (Jmp 'inc-28503conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (vecinit8516 . Integer)
      (tmp8542
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer (Integer -> Integer))
       ->
       Integer)
      (tmp8543 Vector Integer Integer (Integer -> Integer))
      (vecinit8518 Integer -> Integer)
      (_8521 . Void)
      (tmp8544 . Integer)
      (_8520 . Void)
      (tmp8546 . Integer)
      (tmp8541 . Integer)
      (vecinit8517 . Integer)
      (_8519 . Void)
      (tmp8545 . Integer)
      (_8522 . Void)
      (alloc8515 Vector Integer Integer (Integer -> Integer)))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'useless8502) (Var 'tmp8542)))
       (Instr 'movq (list (Imm 6) (Var 'vecinit8516)))
       (Instr 'movq (list (Imm 7) (Var 'vecinit8517)))
       (Instr 'leaq (list (Global 'inc-28503) (Var 'vecinit8518)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8545)))
       (Instr 'movq (list (Var 'tmp8545) (Var 'tmp8544)))
       (Instr 'addq (list (Imm 32) (Var 'tmp8544)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8546)))
       (Instr 'cmpq (list (Var 'tmp8546) (Var 'tmp8544)))
       (JmpIf 'l 'block8549)
       (Jmp 'block8550))))
    (cons
     'block8550
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 32) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8548))))
    (cons
     'block8549
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8522))) (Jmp 'block8548))))
    (cons
     'block8548
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8515)))
       (Instr 'movq (list (Var 'alloc8515) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8516) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8521)))
       (Instr 'movq (list (Var 'alloc8515) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8517) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8520)))
       (Instr 'movq (list (Var 'alloc8515) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8518) (Deref 'r11 24)))
       (Instr 'movq (list (Imm 0) (Var '_8519)))
       (Instr 'movq (list (Var 'alloc8515) (Var 'tmp8543)))
       (Instr 'movq (list (Imm 1) (Reg 'rdi)))
       (Instr 'movq (list (Imm 2) (Reg 'rsi)))
       (Instr 'movq (list (Imm 3) (Reg 'rdx)))
       (Instr 'movq (list (Imm 4) (Reg 'rcx)))
       (Instr 'movq (list (Imm 5) (Reg 'r8)))
       (Instr 'movq (list (Var 'tmp8543) (Reg 'r9)))
       (IndirectCallq (Var 'tmp8542) 6)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8541)))
       (Instr 'movq (list (Imm 10) (Reg 'rax)))
       (Instr 'addq (list (Var 'tmp8541) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'useless8502
   '()
   'Integer
   '((locals-types
      (a8504 . Integer)
      (b8505 . Integer)
      (c8506 . Integer)
      (d8507 . Integer)
      (e8508 . Integer)
      (tup8514 Vector Integer Integer (Integer -> Integer))
      (tmp8537 . Integer)
      (tmp8531 . Integer)
      (tmp8538 . Integer)
      (tmp8524 . Integer)
      (b8505 . Integer)
      (tmp8528 Integer -> Integer)
      (tmp8532 . Integer)
      (tmp8539 . Integer)
      (tmp8536 Integer -> Integer)
      (tmp8540 . Integer)
      (a8512 . Integer)
      (tmp8525 . Integer)
      (tmp8534 . Integer)
      (tmp8533 . Integer)
      (tmp8529 . Integer)
      (tup8514 Vector Integer Integer (Integer -> Integer))
      (tmp8530 . Integer)
      (c8506 . Integer)
      (d8507 . Integer)
      (e8508 . Integer)
      (tmp8526 . Integer)
      (a8504 . Integer)
      (tmp8535 . Integer)
      (tmp8523 . Integer)
      (tmp8527 . Integer))
     (num-params . 6))
   (list
    (cons
     'useless8502start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'a8504)))
       (Instr 'movq (list (Reg 'rsi) (Var 'b8505)))
       (Instr 'movq (list (Reg 'rdx) (Var 'c8506)))
       (Instr 'movq (list (Reg 'rcx) (Var 'd8507)))
       (Instr 'movq (list (Reg 'r8) (Var 'e8508)))
       (Instr 'movq (list (Reg 'r9) (Var 'tup8514)))
       (Instr 'movq (list (Var 'a8504) (Var 'tmp8523)))
       (Instr 'movq (list (Var 'tmp8523) (Var 'a8504)))
       (Instr 'addq (list (Imm 1) (Var 'a8504)))
       (Instr 'movq (list (Var 'b8505) (Var 'tmp8524)))
       (Instr 'movq (list (Var 'tmp8524) (Var 'b8505)))
       (Instr 'addq (list (Imm 2) (Var 'b8505)))
       (Instr 'movq (list (Imm 10) (Var 'a8512)))
       (Instr 'movq (list (Var 'a8512) (Var 'tmp8526)))
       (Instr 'movq (list (Var 'tmp8526) (Var 'tmp8525)))
       (Instr 'negq (list (Var 'tmp8525)))
       (Instr 'movq (list (Imm 20) (Var 'a8512)))
       (Instr 'leaq (list (Global 'inc-28503) (Var 'tmp8528)))
       (Instr 'movq (list (Imm 7) (Reg 'rdi)))
       (IndirectCallq (Var 'tmp8528) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8527)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Var 'tmp8527) (Deref 'r11 8)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8529)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8530)))
       (Instr 'cmpq (list (Var 'tmp8530) (Var 'tmp8529)))
       (JmpIf 'l 'block8547)
       (Jmp 'block8547))))
    (cons
     'block8547
     (Block
      '()
      (list
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8532)))
       (Instr 'movq (list (Var 'tmp8532) (Var 'tmp8531)))
       (Instr 'addq (list (Imm 5) (Var 'tmp8531)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Var 'tmp8531) (Deref 'r11 8)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8534)))
       (Instr 'movq (list (Imm 5) (Var 'tmp8535)))
       (Instr 'negq (list (Var 'tmp8535)))
       (Instr 'movq (list (Var 'tmp8534) (Var 'tmp8533)))
       (Instr 'addq (list (Var 'tmp8535) (Var 'tmp8533)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Var 'tmp8533) (Deref 'r11 16)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 24) (Var 'tmp8536)))
       (Instr 'movq (list (Var 'a8504) (Var 'tmp8537)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8539)))
       (Instr 'movq (list (Var 'tup8514) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8540)))
       (Instr 'movq (list (Var 'tmp8539) (Var 'tmp8538)))
       (Instr 'addq (list (Var 'tmp8540) (Var 'tmp8538)))
       (Instr 'movq (list (Var 'tmp8537) (Reg 'rax)))
       (Instr 'addq (list (Var 'tmp8538) (Reg 'rax)))
       (Jmp 'useless8502conclusion))))))
  (Def
   'inc-28503
   '()
   'Integer
   '((locals-types (a8513 . Integer) (a8513 . Integer)) (num-params . 1))
   (list
    (cons
     'inc-28503start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'a8513)))
       (Instr 'movq (list (Var 'a8513) (Reg 'rax)))
       (Instr 'addq (list (Imm 2) (Reg 'rax)))
       (Jmp 'inc-28503conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (vecinit8516 . Integer)
      (tmp8542
       Integer
       Integer
       Integer
       Integer
       Integer
       (Vector Integer Integer (Integer -> Integer))
       ->
       Integer)
      (tmp8543 Vector Integer Integer (Integer -> Integer))
      (vecinit8518 Integer -> Integer)
      (_8521 . Void)
      (tmp8544 . Integer)
      (_8520 . Void)
      (tmp8546 . Integer)
      (tmp8541 . Integer)
      (vecinit8517 . Integer)
      (_8519 . Void)
      (tmp8545 . Integer)
      (_8522 . Void)
      (alloc8515 Vector Integer Integer (Integer -> Integer)))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'useless8502) (Var 'tmp8542)))
       (Instr 'movq (list (Imm 6) (Var 'vecinit8516)))
       (Instr 'movq (list (Imm 7) (Var 'vecinit8517)))
       (Instr 'leaq (list (Global 'inc-28503) (Var 'vecinit8518)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8545)))
       (Instr 'movq (list (Var 'tmp8545) (Var 'tmp8544)))
       (Instr 'addq (list (Imm 32) (Var 'tmp8544)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8546)))
       (Instr 'cmpq (list (Var 'tmp8546) (Var 'tmp8544)))
       (JmpIf 'l 'block8549)
       (Jmp 'block8550))))
    (cons
     'block8550
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 32) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8548))))
    (cons
     'block8549
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8522))) (Jmp 'block8548))))
    (cons
     'block8548
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 32) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 7) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8515)))
       (Instr 'movq (list (Var 'alloc8515) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8516) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8521)))
       (Instr 'movq (list (Var 'alloc8515) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8517) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8520)))
       (Instr 'movq (list (Var 'alloc8515) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8518) (Deref 'r11 24)))
       (Instr 'movq (list (Imm 0) (Var '_8519)))
       (Instr 'movq (list (Var 'alloc8515) (Var 'tmp8543)))
       (Instr 'movq (list (Imm 1) (Reg 'rdi)))
       (Instr 'movq (list (Imm 2) (Reg 'rsi)))
       (Instr 'movq (list (Imm 3) (Reg 'rdx)))
       (Instr 'movq (list (Imm 4) (Reg 'rcx)))
       (Instr 'movq (list (Imm 5) (Reg 'r8)))
       (Instr 'movq (list (Var 'tmp8543) (Reg 'r9)))
       (IndirectCallq (Var 'tmp8542) 6)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8541)))
       (Instr 'movq (list (Imm 10) (Reg 'rax)))
       (Instr 'addq (list (Var 'tmp8541) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


output:  @ utilities.rkt:2042
result:
28


testing @ utilities.rkt:2016
test-name:
"functions_test_9"

expected-result:
28


type checker output: @ utilities.rkt:1999
(strip-has-type tsexp):
(ProgramDefsExp
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1)))))
 (Prim
  'vector-ref
  (list
   (Apply
    (Var 'map)
    (list
     (Var 'inc)
     (HasType
      (Prim 'vector (list (Int 0) (Int 41)))
      '(Vector Integer Integer))))
   (Int 1))))


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: shrink @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map)
      (list
       (Var 'inc)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map
   '((f : (Integer -> Integer)) (v : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 0)))))
      (Apply (Var 'f) (list (Prim 'vector-ref (list (Var 'v) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def 'inc '((x : Integer)) 'Integer '() (Prim '+ (list (Var 'x) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map)
      (list
       (Var 'inc)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: uniquify @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map8552)
      (list
       (Var 'inc8553)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (Var 'map8552)
      (list
       (Var 'inc8553)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: reveal functions @ utilities.rkt:2027

COMING HERE !!!!!
map8552
COMING HERE !!!!!
inc8553
pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: limit functions @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (HasType
    (Prim
     'vector
     (list
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
      (Apply
       (Var 'f8554)
       (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))))
    '(Vector Integer Integer)))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (HasType
        (Prim 'vector (list (Int 0) (Int 41)))
        '(Vector Integer Integer))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: expose allocation @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8558
    (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
    (Let
     'vecinit8559
     (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))
     (Let
      '_8562
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8557
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8561
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558)))
        (Let
         '_8560
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559)))
         (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (Let
        'vecinit8564
        (Int 0)
        (Let
         'vecinit8565
         (Int 41)
         (Let
          '_8568
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8563
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8567
            (Prim
             'vector-set!
             (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564)))
            (Let
             '_8566
             (Prim
              'vector-set!
              (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565)))
             (Var 'alloc8563)))))))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8558
    (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
    (Let
     'vecinit8559
     (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))
     (Let
      '_8562
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8557
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8561
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558)))
        (Let
         '_8560
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559)))
         (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (Let
        'vecinit8564
        (Int 0)
        (Let
         'vecinit8565
         (Int 41)
         (Let
          '_8568
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8563
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8567
            (Prim
             'vector-set!
             (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564)))
            (Let
             '_8566
             (Prim
              'vector-set!
              (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565)))
             (Var 'alloc8563)))))))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: uncover get @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8558
    (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
    (Let
     'vecinit8559
     (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))
     (Let
      '_8562
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8557
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8561
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558)))
        (Let
         '_8560
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559)))
         (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (Let
        'vecinit8564
        (Int 0)
        (Let
         'vecinit8565
         (Int 41)
         (Let
          '_8568
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8563
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8567
            (Prim
             'vector-set!
             (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564)))
            (Let
             '_8566
             (Prim
              'vector-set!
              (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565)))
             (Var 'alloc8563)))))))))
     (Int 1))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8558
    (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 0)))))
    (Let
     'vecinit8559
     (Apply (Var 'f8554) (list (Prim 'vector-ref (list (Var 'v8555) (Int 1)))))
     (Let
      '_8562
      (If
       (Prim
        '<
        (list
         (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
         (GlobalValue 'fromspace_end)))
       (Void)
       (collect 24))
      (Let
       'alloc8557
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8561
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558)))
        (Let
         '_8560
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559)))
         (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Prim
    'vector-ref
    (list
     (Apply
      (FunRef 'map8552 2)
      (list
       (FunRef 'inc8553 1)
       (Let
        'vecinit8564
        (Int 0)
        (Let
         'vecinit8565
         (Int 41)
         (Let
          '_8568
          (If
           (Prim
            '<
            (list
             (Prim '+ (list (GlobalValue 'free_ptr) (Int 24)))
             (GlobalValue 'fromspace_end)))
           (Void)
           (collect 24))
          (Let
           'alloc8563
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8567
            (Prim
             'vector-set!
             (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564)))
            (Let
             '_8566
             (Prim
              'vector-set!
              (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565)))
             (Var 'alloc8563)))))))))
     (Int 1))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: remove complex opera* @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8558
    (Let
     'tmp8569
     (Prim 'vector-ref (list (Var 'v8555) (Int 0)))
     (Apply (Var 'f8554) (list (Var 'tmp8569))))
    (Let
     'vecinit8559
     (Let
      'tmp8570
      (Prim 'vector-ref (list (Var 'v8555) (Int 1)))
      (Apply (Var 'f8554) (list (Var 'tmp8570))))
     (Let
      '_8562
      (If
       (Let
        'tmp8571
        (Let
         'tmp8572
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp8572) (Int 24))))
        (Let
         'tmp8573
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp8571) (Var 'tmp8573)))))
       (Void)
       (collect 24))
      (Let
       'alloc8557
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8561
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558)))
        (Let
         '_8560
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559)))
         (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8574
    (Let
     'tmp8575
     (FunRef 'map8552 2)
     (Let
      'tmp8576
      (FunRef 'inc8553 1)
      (Let
       'tmp8577
       (Let
        'vecinit8564
        (Int 0)
        (Let
         'vecinit8565
         (Int 41)
         (Let
          '_8568
          (If
           (Let
            'tmp8578
            (Let
             'tmp8579
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8579) (Int 24))))
            (Let
             'tmp8580
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8578) (Var 'tmp8580)))))
           (Void)
           (collect 24))
          (Let
           'alloc8563
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8567
            (Prim
             'vector-set!
             (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564)))
            (Let
             '_8566
             (Prim
              'vector-set!
              (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565)))
             (Var 'alloc8563)))))))
       (Apply (Var 'tmp8575) (list (Var 'tmp8576) (Var 'tmp8577))))))
    (Prim 'vector-ref (list (Var 'tmp8574) (Int 1)))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (Let
    'vecinit8558
    (Let
     'tmp8569
     (Prim 'vector-ref (list (Var 'v8555) (Int 0)))
     (Apply (Var 'f8554) (list (Var 'tmp8569))))
    (Let
     'vecinit8559
     (Let
      'tmp8570
      (Prim 'vector-ref (list (Var 'v8555) (Int 1)))
      (Apply (Var 'f8554) (list (Var 'tmp8570))))
     (Let
      '_8562
      (If
       (Let
        'tmp8571
        (Let
         'tmp8572
         (GlobalValue 'free_ptr)
         (Prim '+ (list (Var 'tmp8572) (Int 24))))
        (Let
         'tmp8573
         (GlobalValue 'fromspace_end)
         (Prim '< (list (Var 'tmp8571) (Var 'tmp8573)))))
       (Void)
       (collect 24))
      (Let
       'alloc8557
       (allocate 2 (Vector Integer Integer))
       (Let
        '_8561
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558)))
        (Let
         '_8560
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559)))
         (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (Prim '+ (list (Var 'x8556) (Int 1))))
  (Def
   'main
   '()
   'Integer
   '()
   (Let
    'tmp8574
    (Let
     'tmp8575
     (FunRef 'map8552 2)
     (Let
      'tmp8576
      (FunRef 'inc8553 1)
      (Let
       'tmp8577
       (Let
        'vecinit8564
        (Int 0)
        (Let
         'vecinit8565
         (Int 41)
         (Let
          '_8568
          (If
           (Let
            'tmp8578
            (Let
             'tmp8579
             (GlobalValue 'free_ptr)
             (Prim '+ (list (Var 'tmp8579) (Int 24))))
            (Let
             'tmp8580
             (GlobalValue 'fromspace_end)
             (Prim '< (list (Var 'tmp8578) (Var 'tmp8580)))))
           (Void)
           (collect 24))
          (Let
           'alloc8563
           (allocate 2 (Vector Integer Integer))
           (Let
            '_8567
            (Prim
             'vector-set!
             (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564)))
            (Let
             '_8566
             (Prim
              'vector-set!
              (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565)))
             (Var 'alloc8563)))))))
       (Apply (Var 'tmp8575) (list (Var 'tmp8576) (Var 'tmp8577))))))
    (Prim 'vector-ref (list (Var 'tmp8574) (Int 1)))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: explicate control @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '()
   (list
    (cons
     'map8552start
     (Seq
      (Assign (Var 'tmp8569) (Prim 'vector-ref (list (Var 'v8555) (Int 0))))
      (Seq
       (Assign (Var 'vecinit8558) (Call (Var 'f8554) (list (Var 'tmp8569))))
       (Seq
        (Assign (Var 'tmp8570) (Prim 'vector-ref (list (Var 'v8555) (Int 1))))
        (Seq
         (Assign (Var 'vecinit8559) (Call (Var 'f8554) (list (Var 'tmp8570))))
         (Seq
          (Assign (Var 'tmp8572) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8571) (Prim '+ (list (Var 'tmp8572) (Int 24))))
           (Seq
            (Assign (Var 'tmp8573) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8571) (Var 'tmp8573)))
             (Goto 'block8582)
             (Goto 'block8583))))))))))
    (cons 'block8583 (Seq (collect 24) (Goto 'block8581)))
    (cons 'block8582 (Seq (Assign (Var '_8562) (Void)) (Goto 'block8581)))
    (cons
     'block8581
     (Seq
      (Assign (Var 'alloc8557) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8561)
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558))))
       (Seq
        (Assign
         (Var '_8560)
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559))))
        (Return (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '()
   (list (cons 'inc8553start (Return (Prim '+ (list (Var 'x8556) (Int 1)))))))
  (Def
   'main
   '()
   'Integer
   '()
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8575) (FunRef 'map8552 2))
      (Seq
       (Assign (Var 'tmp8576) (FunRef 'inc8553 1))
       (Seq
        (Assign (Var 'vecinit8564) (Int 0))
        (Seq
         (Assign (Var 'vecinit8565) (Int 41))
         (Seq
          (Assign (Var 'tmp8579) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8578) (Prim '+ (list (Var 'tmp8579) (Int 24))))
           (Seq
            (Assign (Var 'tmp8580) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8578) (Var 'tmp8580)))
             (Goto 'block8585)
             (Goto 'block8586))))))))))
    (cons 'block8586 (Seq (collect 24) (Goto 'block8584)))
    (cons 'block8585 (Seq (Assign (Var '_8568) (Void)) (Goto 'block8584)))
    (cons
     'block8584
     (Seq
      (Assign (Var 'alloc8563) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8567)
        (Prim 'vector-set! (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564))))
       (Seq
        (Assign
         (Var '_8566)
         (Prim 'vector-set! (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565))))
        (Seq
         (Assign (Var 'tmp8577) (Var 'alloc8563))
         (Seq
          (Assign
           (Var 'tmp8574)
           (Call (Var 'tmp8575) (list (Var 'tmp8576) (Var 'tmp8577))))
          (Return (Prim 'vector-ref (list (Var 'tmp8574) (Int 1))))))))))))))


type checking... @ utilities.rkt:2032

type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '((f8554 : (Integer -> Integer)) (v8555 : (Vector Integer Integer)))
   '(Vector Integer Integer)
   '((locals-types
      (tmp8572 . Integer)
      (f8554 Integer -> Integer)
      (vecinit8559 . Integer)
      (tmp8569 . Integer)
      (_8560 . Void)
      (tmp8571 . Integer)
      (tmp8573 . Integer)
      (tmp8570 . Integer)
      (_8562 . Void)
      (vecinit8558 . Integer)
      (v8555 Vector Integer Integer)
      (alloc8557 Vector Integer Integer)
      (_8561 . Void)))
   (list
    (cons
     'map8552start
     (Seq
      (Assign (Var 'tmp8569) (Prim 'vector-ref (list (Var 'v8555) (Int 0))))
      (Seq
       (Assign (Var 'vecinit8558) (Call (Var 'f8554) (list (Var 'tmp8569))))
       (Seq
        (Assign (Var 'tmp8570) (Prim 'vector-ref (list (Var 'v8555) (Int 1))))
        (Seq
         (Assign (Var 'vecinit8559) (Call (Var 'f8554) (list (Var 'tmp8570))))
         (Seq
          (Assign (Var 'tmp8572) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8571) (Prim '+ (list (Var 'tmp8572) (Int 24))))
           (Seq
            (Assign (Var 'tmp8573) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8571) (Var 'tmp8573)))
             (Goto 'block8582)
             (Goto 'block8583))))))))))
    (cons 'block8583 (Seq (collect 24) (Goto 'block8581)))
    (cons 'block8582 (Seq (Assign (Var '_8562) (Void)) (Goto 'block8581)))
    (cons
     'block8581
     (Seq
      (Assign (Var 'alloc8557) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8561)
        (Prim 'vector-set! (list (Var 'alloc8557) (Int 0) (Var 'vecinit8558))))
       (Seq
        (Assign
         (Var '_8560)
         (Prim 'vector-set! (list (Var 'alloc8557) (Int 1) (Var 'vecinit8559))))
        (Return (Var 'alloc8557))))))))
  (Def
   'inc8553
   '((x8556 : Integer))
   'Integer
   '((locals-types (x8556 . Integer)))
   (list (cons 'inc8553start (Return (Prim '+ (list (Var 'x8556) (Int 1)))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (tmp8577 Vector Integer Integer)
      (_8566 . Void)
      (tmp8575
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (tmp8579 . Integer)
      (_8568 . Void)
      (vecinit8564 . Integer)
      (_8567 . Void)
      (tmp8574 Vector Integer Integer)
      (alloc8563 Vector Integer Integer)
      (tmp8578 . Integer)
      (tmp8576 Integer -> Integer)
      (tmp8580 . Integer)
      (vecinit8565 . Integer)))
   (list
    (cons
     'mainstart
     (Seq
      (Assign (Var 'tmp8575) (FunRef 'map8552 2))
      (Seq
       (Assign (Var 'tmp8576) (FunRef 'inc8553 1))
       (Seq
        (Assign (Var 'vecinit8564) (Int 0))
        (Seq
         (Assign (Var 'vecinit8565) (Int 41))
         (Seq
          (Assign (Var 'tmp8579) (GlobalValue 'free_ptr))
          (Seq
           (Assign (Var 'tmp8578) (Prim '+ (list (Var 'tmp8579) (Int 24))))
           (Seq
            (Assign (Var 'tmp8580) (GlobalValue 'fromspace_end))
            (IfStmt
             (Prim '< (list (Var 'tmp8578) (Var 'tmp8580)))
             (Goto 'block8585)
             (Goto 'block8586))))))))))
    (cons 'block8586 (Seq (collect 24) (Goto 'block8584)))
    (cons 'block8585 (Seq (Assign (Var '_8568) (Void)) (Goto 'block8584)))
    (cons
     'block8584
     (Seq
      (Assign (Var 'alloc8563) (allocate 2 (Vector Integer Integer)))
      (Seq
       (Assign
        (Var '_8567)
        (Prim 'vector-set! (list (Var 'alloc8563) (Int 0) (Var 'vecinit8564))))
       (Seq
        (Assign
         (Var '_8566)
         (Prim 'vector-set! (list (Var 'alloc8563) (Int 1) (Var 'vecinit8565))))
        (Seq
         (Assign (Var 'tmp8577) (Var 'alloc8563))
         (Seq
          (Assign
           (Var 'tmp8574)
           (Call (Var 'tmp8575) (list (Var 'tmp8576) (Var 'tmp8577))))
          (Return (Prim 'vector-ref (list (Var 'tmp8574) (Int 1))))))))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


running pass: instruction selection @ utilities.rkt:2027

pass output:  @ utilities.rkt:2030
(strip-has-type new-p^):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '()
   '(Vector Integer Integer)
   '((locals-types
      (f8554 Integer -> Integer)
      (v8555 Vector Integer Integer)
      (tmp8572 . Integer)
      (f8554 Integer -> Integer)
      (vecinit8559 . Integer)
      (tmp8569 . Integer)
      (_8560 . Void)
      (tmp8571 . Integer)
      (tmp8573 . Integer)
      (tmp8570 . Integer)
      (_8562 . Void)
      (vecinit8558 . Integer)
      (v8555 Vector Integer Integer)
      (alloc8557 Vector Integer Integer)
      (_8561 . Void))
     (num-params . 2))
   (list
    (cons
     'map8552start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'f8554)))
       (Instr 'movq (list (Reg 'rsi) (Var 'v8555)))
       (Instr 'movq (list (Var 'v8555) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8569)))
       (Instr 'movq (list (Var 'tmp8569) (Reg 'rdi)))
       (IndirectCallq (Var 'f8554) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8558)))
       (Instr 'movq (list (Var 'v8555) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8570)))
       (Instr 'movq (list (Var 'tmp8570) (Reg 'rdi)))
       (IndirectCallq (Var 'f8554) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8559)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8572)))
       (Instr 'movq (list (Var 'tmp8572) (Var 'tmp8571)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8571)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8573)))
       (Instr 'cmpq (list (Var 'tmp8573) (Var 'tmp8571)))
       (JmpIf 'l 'block8582)
       (Jmp 'block8583))))
    (cons
     'block8583
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8581))))
    (cons
     'block8582
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8562))) (Jmp 'block8581))))
    (cons
     'block8581
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8557)))
       (Instr 'movq (list (Var 'alloc8557) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8558) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8561)))
       (Instr 'movq (list (Var 'alloc8557) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8559) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8560)))
       (Instr 'movq (list (Var 'alloc8557) (Reg 'rax)))
       (Jmp 'map8552conclusion))))))
  (Def
   'inc8553
   '()
   'Integer
   '((locals-types (x8556 . Integer) (x8556 . Integer)) (num-params . 1))
   (list
    (cons
     'inc8553start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8556)))
       (Instr 'movq (list (Var 'x8556) (Reg 'rax)))
       (Instr 'addq (list (Imm 1) (Reg 'rax)))
       (Jmp 'inc8553conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (tmp8577 Vector Integer Integer)
      (_8566 . Void)
      (tmp8575
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (tmp8579 . Integer)
      (_8568 . Void)
      (vecinit8564 . Integer)
      (_8567 . Void)
      (tmp8574 Vector Integer Integer)
      (alloc8563 Vector Integer Integer)
      (tmp8578 . Integer)
      (tmp8576 Integer -> Integer)
      (tmp8580 . Integer)
      (vecinit8565 . Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'map8552) (Var 'tmp8575)))
       (Instr 'leaq (list (Global 'inc8553) (Var 'tmp8576)))
       (Instr 'movq (list (Imm 0) (Var 'vecinit8564)))
       (Instr 'movq (list (Imm 41) (Var 'vecinit8565)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8579)))
       (Instr 'movq (list (Var 'tmp8579) (Var 'tmp8578)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8578)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8580)))
       (Instr 'cmpq (list (Var 'tmp8580) (Var 'tmp8578)))
       (JmpIf 'l 'block8585)
       (Jmp 'block8586))))
    (cons
     'block8586
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8584))))
    (cons
     'block8585
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8568))) (Jmp 'block8584))))
    (cons
     'block8584
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8563)))
       (Instr 'movq (list (Var 'alloc8563) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8564) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8567)))
       (Instr 'movq (list (Var 'alloc8563) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8565) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8566)))
       (Instr 'movq (list (Var 'alloc8563) (Var 'tmp8577)))
       (Instr 'movq (list (Var 'tmp8576) (Reg 'rdi)))
       (Instr 'movq (list (Var 'tmp8577) (Reg 'rsi)))
       (IndirectCallq (Var 'tmp8575) 2)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8574)))
       (Instr 'movq (list (Var 'tmp8574) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


type-check output:  @ utilities.rkt:2035
(strip-has-type new-p):
(ProgramDefs
 '()
 (list
  (Def
   'map8552
   '()
   '(Vector Integer Integer)
   '((locals-types
      (f8554 Integer -> Integer)
      (v8555 Vector Integer Integer)
      (tmp8572 . Integer)
      (f8554 Integer -> Integer)
      (vecinit8559 . Integer)
      (tmp8569 . Integer)
      (_8560 . Void)
      (tmp8571 . Integer)
      (tmp8573 . Integer)
      (tmp8570 . Integer)
      (_8562 . Void)
      (vecinit8558 . Integer)
      (v8555 Vector Integer Integer)
      (alloc8557 Vector Integer Integer)
      (_8561 . Void))
     (num-params . 2))
   (list
    (cons
     'map8552start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'f8554)))
       (Instr 'movq (list (Reg 'rsi) (Var 'v8555)))
       (Instr 'movq (list (Var 'v8555) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 8) (Var 'tmp8569)))
       (Instr 'movq (list (Var 'tmp8569) (Reg 'rdi)))
       (IndirectCallq (Var 'f8554) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8558)))
       (Instr 'movq (list (Var 'v8555) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Var 'tmp8570)))
       (Instr 'movq (list (Var 'tmp8570) (Reg 'rdi)))
       (IndirectCallq (Var 'f8554) 1)
       (Instr 'movq (list (Reg 'rax) (Var 'vecinit8559)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8572)))
       (Instr 'movq (list (Var 'tmp8572) (Var 'tmp8571)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8571)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8573)))
       (Instr 'cmpq (list (Var 'tmp8573) (Var 'tmp8571)))
       (JmpIf 'l 'block8582)
       (Jmp 'block8583))))
    (cons
     'block8583
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8581))))
    (cons
     'block8582
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8562))) (Jmp 'block8581))))
    (cons
     'block8581
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8557)))
       (Instr 'movq (list (Var 'alloc8557) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8558) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8561)))
       (Instr 'movq (list (Var 'alloc8557) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8559) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8560)))
       (Instr 'movq (list (Var 'alloc8557) (Reg 'rax)))
       (Jmp 'map8552conclusion))))))
  (Def
   'inc8553
   '()
   'Integer
   '((locals-types (x8556 . Integer) (x8556 . Integer)) (num-params . 1))
   (list
    (cons
     'inc8553start
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'rdi) (Var 'x8556)))
       (Instr 'movq (list (Var 'x8556) (Reg 'rax)))
       (Instr 'addq (list (Imm 1) (Reg 'rax)))
       (Jmp 'inc8553conclusion))))))
  (Def
   'main
   '()
   'Integer
   '((locals-types
      (tmp8577 Vector Integer Integer)
      (_8566 . Void)
      (tmp8575
       (Integer -> Integer)
       (Vector Integer Integer)
       ->
       (Vector Integer Integer))
      (tmp8579 . Integer)
      (_8568 . Void)
      (vecinit8564 . Integer)
      (_8567 . Void)
      (tmp8574 Vector Integer Integer)
      (alloc8563 Vector Integer Integer)
      (tmp8578 . Integer)
      (tmp8576 Integer -> Integer)
      (tmp8580 . Integer)
      (vecinit8565 . Integer))
     (num-params . 0))
   (list
    (cons
     'mainstart
     (Block
      '()
      (list
       (Instr 'leaq (list (Global 'map8552) (Var 'tmp8575)))
       (Instr 'leaq (list (Global 'inc8553) (Var 'tmp8576)))
       (Instr 'movq (list (Imm 0) (Var 'vecinit8564)))
       (Instr 'movq (list (Imm 41) (Var 'vecinit8565)))
       (Instr 'movq (list (Global 'free_ptr) (Var 'tmp8579)))
       (Instr 'movq (list (Var 'tmp8579) (Var 'tmp8578)))
       (Instr 'addq (list (Imm 24) (Var 'tmp8578)))
       (Instr 'movq (list (Global 'fromspace_end) (Var 'tmp8580)))
       (Instr 'cmpq (list (Var 'tmp8580) (Var 'tmp8578)))
       (JmpIf 'l 'block8585)
       (Jmp 'block8586))))
    (cons
     'block8586
     (Block
      '()
      (list
       (Instr 'movq (list (Reg 'r15) (Reg 'rdi)))
       (Instr 'movq (list (Imm 24) (Reg 'rsi)))
       (Callq 'collect 2)
       (Jmp 'block8584))))
    (cons
     'block8585
     (Block
      '()
      (list (Instr 'movq (list (Imm 0) (Var '_8568))) (Jmp 'block8584))))
    (cons
     'block8584
     (Block
      '()
      (list
       (Instr 'movq (list (Global 'free_ptr) (Reg 'r11)))
       (Instr 'addq (list (Imm 24) (Global 'free_ptr)))
       (Instr 'movq (list (Imm 5) (Deref 'r11 0)))
       (Instr 'movq (list (Reg 'r11) (Var 'alloc8563)))
       (Instr 'movq (list (Var 'alloc8563) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8564) (Deref 'r11 8)))
       (Instr 'movq (list (Imm 0) (Var '_8567)))
       (Instr 'movq (list (Var 'alloc8563) (Reg 'r11)))
       (Instr 'movq (list (Var 'vecinit8565) (Deref 'r11 16)))
       (Instr 'movq (list (Imm 0) (Var '_8566)))
       (Instr 'movq (list (Var 'alloc8563) (Var 'tmp8577)))
       (Instr 'movq (list (Var 'tmp8576) (Reg 'rdi)))
       (Instr 'movq (list (Var 'tmp8577) (Reg 'rsi)))
       (IndirectCallq (Var 'tmp8575) 2)
       (Instr 'movq (list (Reg 'rax) (Var 'tmp8574)))
       (Instr 'movq (list (Var 'tmp8574) (Reg 'r11)))
       (Instr 'movq (list (Deref 'r11 16) (Reg 'rax)))
       (Jmp 'mainconclusion))))))))


output:  @ utilities.rkt:2042
result:
42


testing @ utilities.rkt:2016
test-name:
"functions_test_99"

expected-result:
42


271 success(es) 0 failure(s) 0 error(s) 271 test(s) run
0
